<!-- this is a shortened xml file of the generated output of the apiDocMaker for testing purposes -->

<?xml-stylesheet type="text/css" href="Live.css"?>
<Live>
Live API version 11.3.13
<Doc>	Unofficial Live API documentation generated by the "API_MakeDoc" MIDI Remote Script.
            <requirement xmlns:html="http://www.w3.org/1999/xhtml">
            <html:a href="http://remotescripts.blogspot.com">http://remotescripts.blogspot.com</html:a></requirement>
            </Doc>

<Doc>	This is unofficial documentation. Please do not contact Ableton with questions or problems relating to the use of this documentation.</Doc>

<Module>Live<Description>Module</Description></Module>

<Module>Live.Track<Description>Module</Description></Module>

<Class>Live.Track.Track<Description>Class</Description></Class>

<Doc>	This class represents a track in Live. It can be either an Audio track, a MIDI Track, a Return Track or the Master track. The Master Track and at least one Audio or MIDI track will be always present.Return Tracks are optional.</Doc>

<Built-In>Live.Track.Track.add_arm_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_arm_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "arm" has changed. C++ signature :  void add_arm_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_arrangement_clips_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_arrangement_clips_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "arrangement_clips" has changed. C++ signature :  void add_arrangement_clips_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_available_input_routing_channels_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_available_input_routing_channels_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "available_input_routing_channels" has changed. C++ signature :  void add_available_input_routing_channels_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_available_input_routing_types_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_available_input_routing_types_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "available_input_routing_types" has changed. C++ signature :  void add_available_input_routing_types_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_available_output_routing_channels_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_available_output_routing_channels_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "available_output_routing_channels" has changed. C++ signature :  void add_available_output_routing_channels_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_available_output_routing_types_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_available_output_routing_types_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "available_output_routing_types" has changed. C++ signature :  void add_available_output_routing_types_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_clip_slots_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_clip_slots_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "clip_slots" has changed. C++ signature :  void add_clip_slots_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_color_index_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_color_index_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "color_index" has changed. C++ signature :  void add_color_index_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_color_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_color_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "color" has changed. C++ signature :  void add_color_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_current_input_routing_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_current_input_routing_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "current_input_routing" has changed. C++ signature :  void add_current_input_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_current_input_sub_routing_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_current_input_sub_routing_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "current_input_sub_routing" has changed. C++ signature :  void add_current_input_sub_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_current_monitoring_state_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_current_monitoring_state_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "current_monitoring_state" has changed. C++ signature :  void add_current_monitoring_state_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_current_output_routing_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_current_output_routing_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "current_output_routing" has changed. C++ signature :  void add_current_output_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_current_output_sub_routing_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_current_output_sub_routing_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "current_output_sub_routing" has changed. C++ signature :  void add_current_output_sub_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_data_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_data_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "data" has changed. C++ signature :  void add_data_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_devices_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_devices_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "devices" has changed. C++ signature :  void add_devices_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_fired_slot_index_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_fired_slot_index_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "fired_slot_index" has changed. C++ signature :  void add_fired_slot_index_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_has_audio_input_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_has_audio_input_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "has_audio_input" has changed. C++ signature :  void add_has_audio_input_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_has_audio_output_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_has_audio_output_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "has_audio_output" has changed. C++ signature :  void add_has_audio_output_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_has_midi_input_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_has_midi_input_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "has_midi_input" has changed. C++ signature :  void add_has_midi_input_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_has_midi_output_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_has_midi_output_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "has_midi_output" has changed. C++ signature :  void add_has_midi_output_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_implicit_arm_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_implicit_arm_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "implicit_arm" has changed. C++ signature :  void add_implicit_arm_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_input_meter_left_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_input_meter_left_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "input_meter_left" has changed. C++ signature :  void add_input_meter_left_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_input_meter_level_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_input_meter_level_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "input_meter_level" has changed. C++ signature :  void add_input_meter_level_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_input_meter_right_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_input_meter_right_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "input_meter_right" has changed. C++ signature :  void add_input_meter_right_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_input_routing_channel_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_input_routing_channel_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "input_routing_channel" has changed. C++ signature :  void add_input_routing_channel_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_input_routing_type_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_input_routing_type_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "input_routing_type" has changed. C++ signature :  void add_input_routing_type_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_input_routings_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_input_routings_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "input_routings" has changed. C++ signature :  void add_input_routings_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_input_sub_routings_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_input_sub_routings_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "input_sub_routings" has changed. C++ signature :  void add_input_sub_routings_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_is_frozen_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_is_frozen_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "is_frozen" has changed. C++ signature :  void add_is_frozen_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_is_showing_chains_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_is_showing_chains_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "is_showing_chains" has changed. C++ signature :  void add_is_showing_chains_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_mute_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_mute_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "mute" has changed. C++ signature :  void add_mute_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_muted_via_solo_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_muted_via_solo_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "muted_via_solo" has changed. C++ signature :  void add_muted_via_solo_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_name_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_name_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_output_meter_left_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_output_meter_left_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "output_meter_left" has changed. C++ signature :  void add_output_meter_left_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_output_meter_level_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_output_meter_level_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "output_meter_level" has changed. C++ signature :  void add_output_meter_level_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_output_meter_right_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_output_meter_right_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "output_meter_right" has changed. C++ signature :  void add_output_meter_right_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_output_routing_channel_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_output_routing_channel_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "output_routing_channel" has changed. C++ signature :  void add_output_routing_channel_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_output_routing_type_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_output_routing_type_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "output_routing_type" has changed. C++ signature :  void add_output_routing_type_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_output_routings_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_output_routings_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "output_routings" has changed. C++ signature :  void add_output_routings_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_output_sub_routings_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_output_sub_routings_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "output_sub_routings" has changed. C++ signature :  void add_output_sub_routings_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_performance_impact_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_performance_impact_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "performance_impact" has changed. C++ signature :  void add_performance_impact_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_playing_slot_index_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_playing_slot_index_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "playing_slot_index" has changed. C++ signature :  void add_playing_slot_index_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.add_solo_listener()<Description>Built-In</Description></Built-In>

<Doc>	add_solo_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "solo" has changed. C++ signature :  void add_solo_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.arm_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	arm_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "arm". C++ signature :  bool arm_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.arrangement_clips_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	arrangement_clips_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "arrangement_clips". C++ signature :  bool arrangement_clips_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.available_input_routing_channels_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	available_input_routing_channels_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "available_input_routing_channels". C++ signature :  bool available_input_routing_channels_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.available_input_routing_types_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	available_input_routing_types_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "available_input_routing_types". C++ signature :  bool available_input_routing_types_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.available_output_routing_channels_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	available_output_routing_channels_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "available_output_routing_channels". C++ signature :  bool available_output_routing_channels_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.available_output_routing_types_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	available_output_routing_types_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "available_output_routing_types". C++ signature :  bool available_output_routing_types_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.clip_slots_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	clip_slots_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "clip_slots". C++ signature :  bool clip_slots_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.color_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	color_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "color". C++ signature :  bool color_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.color_index_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	color_index_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "color_index". C++ signature :  bool color_index_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.current_input_routing_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	current_input_routing_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "current_input_routing". C++ signature :  bool current_input_routing_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.current_input_sub_routing_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	current_input_sub_routing_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "current_input_sub_routing". C++ signature :  bool current_input_sub_routing_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.current_monitoring_state_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	current_monitoring_state_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "current_monitoring_state". C++ signature :  bool current_monitoring_state_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.current_output_routing_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	current_output_routing_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "current_output_routing". C++ signature :  bool current_output_routing_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.current_output_sub_routing_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	current_output_sub_routing_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "current_output_sub_routing". C++ signature :  bool current_output_sub_routing_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.data_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	data_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "data". C++ signature :  bool data_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.delete_clip()<Description>Built-In</Description></Built-In>

<Doc>	delete_clip( (Track)arg1, (Clip)arg2) -&amp;gt; None : Delete the given clip. Raises a runtime error when the clip belongs to another track. C++ signature :  void delete_clip(TTrackPyHandle,TPyHandle&amp;lt;AClip&amp;gt;)</Doc>

<Built-In>Live.Track.Track.delete_device()<Description>Built-In</Description></Built-In>

<Doc>	delete_device( (Track)arg1, (int)arg2) -&amp;gt; None : Delete a device identified by the index in the 'devices' list. C++ signature :  void delete_device(TTrackPyHandle,int)</Doc>

<Built-In>Live.Track.Track.devices_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	devices_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "devices". C++ signature :  bool devices_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.duplicate_clip_slot()<Description>Built-In</Description></Built-In>

<Doc>	duplicate_clip_slot( (Track)arg1, (int)arg2) -&amp;gt; int : Duplicate a clip and put it into the next free slot and return the index of the destination slot. A new scene is created if no free slot is available. If creating the new scene would exceed the limitations, a runtime error is raised. C++ signature :  int duplicate_clip_slot(TTrackPyHandle,int)</Doc>

<Built-In>Live.Track.Track.duplicate_clip_to_arrangement()<Description>Built-In</Description></Built-In>

<Doc>	duplicate_clip_to_arrangement( (Track)self, (Clip)clip, (float)destination_time) -&amp;gt; Clip : Duplicate the given clip into the arrangement of this track at the provided destination time and return it. When the type of the clip and the type of the track are incompatible, a runtime error is raised. C++ signature :  TWeakPtr&amp;lt;TPyHandle&amp;lt;AClip&amp;gt;&amp;gt; duplicate_clip_to_arrangement(TTrackPyHandle,TPyHandle&amp;lt;AClip&amp;gt;,double)</Doc>

<Built-In>Live.Track.Track.fired_slot_index_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	fired_slot_index_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "fired_slot_index". C++ signature :  bool fired_slot_index_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.get_data()<Description>Built-In</Description></Built-In>

<Doc>	get_data( (Track)arg1, (object)key, (object)default_value) -&amp;gt; object : Get data for the given key, that was previously stored using set_data. C++ signature :  boost::python::api::object get_data(TTrackPyHandle,TString,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.has_audio_input_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	has_audio_input_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "has_audio_input". C++ signature :  bool has_audio_input_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.has_audio_output_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	has_audio_output_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "has_audio_output". C++ signature :  bool has_audio_output_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.has_midi_input_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	has_midi_input_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "has_midi_input". C++ signature :  bool has_midi_input_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.has_midi_output_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	has_midi_output_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "has_midi_output". C++ signature :  bool has_midi_output_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.implicit_arm_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	implicit_arm_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "implicit_arm". C++ signature :  bool implicit_arm_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.input_meter_left_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	input_meter_left_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "input_meter_left". C++ signature :  bool input_meter_left_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.input_meter_level_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	input_meter_level_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "input_meter_level". C++ signature :  bool input_meter_level_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.input_meter_right_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	input_meter_right_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "input_meter_right". C++ signature :  bool input_meter_right_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.input_routing_channel_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	input_routing_channel_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "input_routing_channel". C++ signature :  bool input_routing_channel_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.input_routing_type_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	input_routing_type_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "input_routing_type". C++ signature :  bool input_routing_type_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.input_routings_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	input_routings_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "input_routings". C++ signature :  bool input_routings_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.input_sub_routings_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	input_sub_routings_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "input_sub_routings". C++ signature :  bool input_sub_routings_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.is_frozen_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	is_frozen_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "is_frozen". C++ signature :  bool is_frozen_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.is_showing_chains_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	is_showing_chains_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "is_showing_chains". C++ signature :  bool is_showing_chains_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.jump_in_running_session_clip()<Description>Built-In</Description></Built-In>

<Doc>	jump_in_running_session_clip( (Track)arg1, (float)arg2) -&amp;gt; None : Jump forward or backward in the currently running Sessionclip (if any) by the specified relative amount in beats. Does nothing if no Session Clip is currently running. C++ signature :  void jump_in_running_session_clip(TTrackPyHandle,double)</Doc>

<Built-In>Live.Track.Track.mute_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	mute_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "mute". C++ signature :  bool mute_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.muted_via_solo_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	muted_via_solo_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "muted_via_solo". C++ signature :  bool muted_via_solo_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.name_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	name_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.output_meter_left_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	output_meter_left_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "output_meter_left". C++ signature :  bool output_meter_left_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.output_meter_level_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	output_meter_level_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "output_meter_level". C++ signature :  bool output_meter_level_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.output_meter_right_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	output_meter_right_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "output_meter_right". C++ signature :  bool output_meter_right_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.output_routing_channel_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	output_routing_channel_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "output_routing_channel". C++ signature :  bool output_routing_channel_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.output_routing_type_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	output_routing_type_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "output_routing_type". C++ signature :  bool output_routing_type_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.output_routings_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	output_routings_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "output_routings". C++ signature :  bool output_routings_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.output_sub_routings_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	output_sub_routings_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "output_sub_routings". C++ signature :  bool output_sub_routings_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.performance_impact_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	performance_impact_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "performance_impact". C++ signature :  bool performance_impact_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.playing_slot_index_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	playing_slot_index_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "playing_slot_index". C++ signature :  bool playing_slot_index_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_arm_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_arm_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "arm". C++ signature :  void remove_arm_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_arrangement_clips_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_arrangement_clips_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "arrangement_clips". C++ signature :  void remove_arrangement_clips_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_available_input_routing_channels_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_available_input_routing_channels_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "available_input_routing_channels". C++ signature :  void remove_available_input_routing_channels_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_available_input_routing_types_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_available_input_routing_types_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "available_input_routing_types". C++ signature :  void remove_available_input_routing_types_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_available_output_routing_channels_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_available_output_routing_channels_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "available_output_routing_channels". C++ signature :  void remove_available_output_routing_channels_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_available_output_routing_types_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_available_output_routing_types_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "available_output_routing_types". C++ signature :  void remove_available_output_routing_types_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_clip_slots_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_clip_slots_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "clip_slots". C++ signature :  void remove_clip_slots_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_color_index_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_color_index_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "color_index". C++ signature :  void remove_color_index_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_color_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_color_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "color". C++ signature :  void remove_color_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_current_input_routing_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_current_input_routing_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "current_input_routing". C++ signature :  void remove_current_input_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_current_input_sub_routing_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_current_input_sub_routing_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "current_input_sub_routing". C++ signature :  void remove_current_input_sub_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_current_monitoring_state_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_current_monitoring_state_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "current_monitoring_state". C++ signature :  void remove_current_monitoring_state_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_current_output_routing_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_current_output_routing_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "current_output_routing". C++ signature :  void remove_current_output_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_current_output_sub_routing_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_current_output_sub_routing_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "current_output_sub_routing". C++ signature :  void remove_current_output_sub_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_data_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_data_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "data". C++ signature :  void remove_data_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_devices_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_devices_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "devices". C++ signature :  void remove_devices_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_fired_slot_index_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_fired_slot_index_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "fired_slot_index". C++ signature :  void remove_fired_slot_index_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_has_audio_input_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_has_audio_input_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "has_audio_input". C++ signature :  void remove_has_audio_input_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_has_audio_output_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_has_audio_output_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "has_audio_output". C++ signature :  void remove_has_audio_output_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_has_midi_input_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_has_midi_input_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "has_midi_input". C++ signature :  void remove_has_midi_input_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_has_midi_output_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_has_midi_output_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "has_midi_output". C++ signature :  void remove_has_midi_output_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_implicit_arm_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_implicit_arm_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "implicit_arm". C++ signature :  void remove_implicit_arm_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_input_meter_left_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_input_meter_left_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "input_meter_left". C++ signature :  void remove_input_meter_left_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_input_meter_level_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_input_meter_level_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "input_meter_level". C++ signature :  void remove_input_meter_level_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_input_meter_right_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_input_meter_right_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "input_meter_right". C++ signature :  void remove_input_meter_right_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_input_routing_channel_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_input_routing_channel_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "input_routing_channel". C++ signature :  void remove_input_routing_channel_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_input_routing_type_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_input_routing_type_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "input_routing_type". C++ signature :  void remove_input_routing_type_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_input_routings_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_input_routings_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "input_routings". C++ signature :  void remove_input_routings_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_input_sub_routings_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_input_sub_routings_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "input_sub_routings". C++ signature :  void remove_input_sub_routings_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_is_frozen_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_is_frozen_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "is_frozen". C++ signature :  void remove_is_frozen_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_is_showing_chains_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_is_showing_chains_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "is_showing_chains". C++ signature :  void remove_is_showing_chains_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_mute_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_mute_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "mute". C++ signature :  void remove_mute_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_muted_via_solo_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_muted_via_solo_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "muted_via_solo". C++ signature :  void remove_muted_via_solo_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_name_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_name_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_output_meter_left_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_output_meter_left_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "output_meter_left". C++ signature :  void remove_output_meter_left_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_output_meter_level_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_output_meter_level_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "output_meter_level". C++ signature :  void remove_output_meter_level_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_output_meter_right_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_output_meter_right_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "output_meter_right". C++ signature :  void remove_output_meter_right_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_output_routing_channel_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_output_routing_channel_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "output_routing_channel". C++ signature :  void remove_output_routing_channel_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_output_routing_type_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_output_routing_type_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "output_routing_type". C++ signature :  void remove_output_routing_type_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_output_routings_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_output_routings_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "output_routings". C++ signature :  void remove_output_routings_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_output_sub_routings_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_output_sub_routings_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "output_sub_routings". C++ signature :  void remove_output_sub_routings_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_performance_impact_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_performance_impact_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "performance_impact". C++ signature :  void remove_performance_impact_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_playing_slot_index_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_playing_slot_index_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "playing_slot_index". C++ signature :  void remove_playing_slot_index_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.remove_solo_listener()<Description>Built-In</Description></Built-In>

<Doc>	remove_solo_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "solo". C++ signature :  void remove_solo_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.set_data()<Description>Built-In</Description></Built-In>

<Doc>	set_data( (Track)arg1, (object)key, (object)value) -&amp;gt; None : Store data for the given key in this object. The data is persistent and will be restored when loading the Live Set. C++ signature :  void set_data(TTrackPyHandle,TString,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.solo_has_listener()<Description>Built-In</Description></Built-In>

<Doc>	solo_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "solo". C++ signature :  bool solo_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Built-In>Live.Track.Track.stop_all_clips()<Description>Built-In</Description></Built-In>

<Doc>	stop_all_clips( (Track)arg1 [, (bool)Quantized=True]) -&amp;gt; None : Stop running and triggered clip and slots on this track. C++ signature :  void stop_all_clips(TTrackPyHandle [,bool=True])</Doc>

<Value>Live.Track.Track.View<Description>Value</Description></Value>

<Doc>	Representing the view aspects of a Track.</Doc>

<Value>Live.Track.Track.__bool__()<Description>Value</Description></Value>

<Doc>	__bool__( (object)arg1) -&amp;gt; bool : C++ signature :  bool __bool__(TWeakPtr&amp;lt;TPyHandleBase&amp;gt;)</Doc>

<Value>Live.Track.Track.class<Description>Value</Description></Value>

<Value>Live.Track.Track.__delattr__<Description>Value</Description></Value>

<Doc>	Implement delattr(self, name).</Doc>

<Value>Live.Track.Track.__dict__<Description>Value</Description></Value>

<Value>Live.Track.Track.__dir__<Description>Value</Description></Value>

<Doc>	Default dir() implementation.</Doc>

<Value>Live.Track.Track.__doc__<Description>Value</Description></Value>

<Doc>	str(object='') -&amp;gt; strstr(bytes_or_buffer[, encoding[, errors]]) -&amp;gt; strCreate a new string object from the given object. If encoding orerrors is specified, then the object must expose a data bufferthat will be decoded using the given encoding and error handler.Otherwise, returns the result of object.__str__() (if defined)or repr(object).encoding defaults to sys.getdefaultencoding().errors defaults to 'strict'.</Doc>

<Value>Live.Track.Track.__eq__()<Description>Value</Description></Value>

<Doc>	__eq__( (object)arg1, (LomObject)arg2) -&amp;gt; bool : C++ signature :  bool __eq__(TWeakPtr&amp;lt;TPyHandleBase&amp;gt;,TPyHandleBase*)</Doc>

<Value>Live.Track.Track.__format__<Description>Value</Description></Value>

<Doc>	Default object formatter.</Doc>

<Value>Live.Track.Track.__ge__<Description>Value</Description></Value>

<Doc>	Return self&amp;gt;=value.</Doc>

<Value>Live.Track.Track.__getattribute__<Description>Value</Description></Value>

<Doc>	Return getattr(self, name).</Doc>

<Value>Live.Track.Track.__gt__<Description>Value</Description></Value>

<Doc>	Return self&amp;gt;value.</Doc>

<Value>Live.Track.Track.__hash__()<Description>Value</Description></Value>

<Doc>	__hash__( (object)arg1) -&amp;gt; int : C++ signature :  long long __hash__(TWeakPtr&amp;lt;TPyHandleBase&amp;gt;)</Doc>

<Value>Live.Track.Track.__init__()<Description>Value</Description></Value>

<Doc>	Raises an exceptionThis class cannot be instantiated from Python</Doc>

<Value>Live.Track.Track.__init_subclass__()<Description>Value</Description></Value>

<Doc>	This method is called when a class is subclassed.The default implementation does nothing. It may beoverridden to extend subclasses.</Doc>

<Value>Live.Track.Track.__le__<Description>Value</Description></Value>

<Doc>	Return self&amp;lt;=value.</Doc>

<Value>Live.Track.Track.__lt__<Description>Value</Description></Value>

<Doc>	Return self&amp;lt;value.</Doc>

<Value>Live.Track.Track.__module__<Description>Value</Description></Value>

<Doc>	str(object='') -&amp;gt; strstr(bytes_or_buffer[, encoding[, errors]]) -&amp;gt; strCreate a new string object from the given object. If encoding orerrors is specified, then the object must expose a data bufferthat will be decoded using the given encoding and error handler.Otherwise, returns the result of object.__str__() (if defined)or repr(object).encoding defaults to sys.getdefaultencoding().errors defaults to 'strict'.</Doc>

<Value>Live.Track.Track.__ne__()<Description>Value</Description></Value>

<Doc>	__ne__( (object)arg1, (LomObject)arg2) -&amp;gt; bool : C++ signature :  bool __ne__(TWeakPtr&amp;lt;TPyHandleBase&amp;gt;,TPyHandleBase*)</Doc>

<Value>Live.Track.Track.__new__()<Description>Value</Description></Value>

<Doc>	Create and return a new object.  See help(type) for accurate signature.</Doc>

<Value>Live.Track.Track.unnamed Boost.Python function()<Description>Value</Description></Value>

<Value>Live.Track.Track.__reduce_ex__<Description>Value</Description></Value>

<Doc>	Helper for pickle.</Doc>

<Value>Live.Track.Track.__repr__<Description>Value</Description></Value>

<Doc>	Return repr(self).</Doc>

<Value>Live.Track.Track.__setattr__<Description>Value</Description></Value>

<Doc>	Implement setattr(self, name, value).</Doc>

<Value>Live.Track.Track.__sizeof__<Description>Value</Description></Value>

<Doc>	Size of object in memory, in bytes.</Doc>

<Value>Live.Track.Track.__str__<Description>Value</Description></Value>

<Doc>	Return str(self).</Doc>

<Value>Live.Track.Track.__subclasshook__()<Description>Value</Description></Value>

<Doc>	Abstract classes can override this to customize issubclass().This is invoked early on by abc.ABCMeta.__subclasscheck__().It should return True, False or NotImplemented.  If it returnsNotImplemented, the normal algorithm is used.  Otherwise, itoverrides the normal algorithm (and the outcome is cached).</Doc>

<Value>Live.Track.Track.__weakref__<Description>Value</Description></Value>

<Value>Live.Track.Track._live_ptr<Description>Value</Description></Value>

<Value>Live.Track.Track.add_arm_listener()<Description>Value</Description></Value>

<Doc>	add_arm_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "arm" has changed. C++ signature :  void add_arm_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_arrangement_clips_listener()<Description>Value</Description></Value>

<Doc>	add_arrangement_clips_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "arrangement_clips" has changed. C++ signature :  void add_arrangement_clips_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_available_input_routing_channels_listener()<Description>Value</Description></Value>

<Doc>	add_available_input_routing_channels_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "available_input_routing_channels" has changed. C++ signature :  void add_available_input_routing_channels_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_available_input_routing_types_listener()<Description>Value</Description></Value>

<Doc>	add_available_input_routing_types_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "available_input_routing_types" has changed. C++ signature :  void add_available_input_routing_types_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_available_output_routing_channels_listener()<Description>Value</Description></Value>

<Doc>	add_available_output_routing_channels_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "available_output_routing_channels" has changed. C++ signature :  void add_available_output_routing_channels_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_available_output_routing_types_listener()<Description>Value</Description></Value>

<Doc>	add_available_output_routing_types_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "available_output_routing_types" has changed. C++ signature :  void add_available_output_routing_types_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_clip_slots_listener()<Description>Value</Description></Value>

<Doc>	add_clip_slots_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "clip_slots" has changed. C++ signature :  void add_clip_slots_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_color_index_listener()<Description>Value</Description></Value>

<Doc>	add_color_index_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "color_index" has changed. C++ signature :  void add_color_index_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_color_listener()<Description>Value</Description></Value>

<Doc>	add_color_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "color" has changed. C++ signature :  void add_color_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_current_input_routing_listener()<Description>Value</Description></Value>

<Doc>	add_current_input_routing_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "current_input_routing" has changed. C++ signature :  void add_current_input_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_current_input_sub_routing_listener()<Description>Value</Description></Value>

<Doc>	add_current_input_sub_routing_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "current_input_sub_routing" has changed. C++ signature :  void add_current_input_sub_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_current_monitoring_state_listener()<Description>Value</Description></Value>

<Doc>	add_current_monitoring_state_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "current_monitoring_state" has changed. C++ signature :  void add_current_monitoring_state_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_current_output_routing_listener()<Description>Value</Description></Value>

<Doc>	add_current_output_routing_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "current_output_routing" has changed. C++ signature :  void add_current_output_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_current_output_sub_routing_listener()<Description>Value</Description></Value>

<Doc>	add_current_output_sub_routing_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "current_output_sub_routing" has changed. C++ signature :  void add_current_output_sub_routing_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_data_listener()<Description>Value</Description></Value>

<Doc>	add_data_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "data" has changed. C++ signature :  void add_data_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_devices_listener()<Description>Value</Description></Value>

<Doc>	add_devices_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "devices" has changed. C++ signature :  void add_devices_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_fired_slot_index_listener()<Description>Value</Description></Value>

<Doc>	add_fired_slot_index_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "fired_slot_index" has changed. C++ signature :  void add_fired_slot_index_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_has_audio_input_listener()<Description>Value</Description></Value>

<Doc>	add_has_audio_input_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "has_audio_input" has changed. C++ signature :  void add_has_audio_input_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_has_audio_output_listener()<Description>Value</Description></Value>

<Doc>	add_has_audio_output_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "has_audio_output" has changed. C++ signature :  void add_has_audio_output_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_has_midi_input_listener()<Description>Value</Description></Value>

<Doc>	add_has_midi_input_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "has_midi_input" has changed. C++ signature :  void add_has_midi_input_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_has_midi_output_listener()<Description>Value</Description></Value>

<Doc>	add_has_midi_output_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "has_midi_output" has changed. C++ signature :  void add_has_midi_output_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_implicit_arm_listener()<Description>Value</Description></Value>

<Doc>	add_implicit_arm_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "implicit_arm" has changed. C++ signature :  void add_implicit_arm_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_input_meter_left_listener()<Description>Value</Description></Value>

<Doc>	add_input_meter_left_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "input_meter_left" has changed. C++ signature :  void add_input_meter_left_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_input_meter_level_listener()<Description>Value</Description></Value>

<Doc>	add_input_meter_level_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "input_meter_level" has changed. C++ signature :  void add_input_meter_level_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_input_meter_right_listener()<Description>Value</Description></Value>

<Doc>	add_input_meter_right_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "input_meter_right" has changed. C++ signature :  void add_input_meter_right_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_input_routing_channel_listener()<Description>Value</Description></Value>

<Doc>	add_input_routing_channel_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "input_routing_channel" has changed. C++ signature :  void add_input_routing_channel_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_input_routing_type_listener()<Description>Value</Description></Value>

<Doc>	add_input_routing_type_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "input_routing_type" has changed. C++ signature :  void add_input_routing_type_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_input_routings_listener()<Description>Value</Description></Value>

<Doc>	add_input_routings_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "input_routings" has changed. C++ signature :  void add_input_routings_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_input_sub_routings_listener()<Description>Value</Description></Value>

<Doc>	add_input_sub_routings_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "input_sub_routings" has changed. C++ signature :  void add_input_sub_routings_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_is_frozen_listener()<Description>Value</Description></Value>

<Doc>	add_is_frozen_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "is_frozen" has changed. C++ signature :  void add_is_frozen_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_is_showing_chains_listener()<Description>Value</Description></Value>

<Doc>	add_is_showing_chains_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "is_showing_chains" has changed. C++ signature :  void add_is_showing_chains_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_mute_listener()<Description>Value</Description></Value>

<Doc>	add_mute_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "mute" has changed. C++ signature :  void add_mute_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_muted_via_solo_listener()<Description>Value</Description></Value>

<Doc>	add_muted_via_solo_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "muted_via_solo" has changed. C++ signature :  void add_muted_via_solo_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_name_listener()<Description>Value</Description></Value>

<Doc>	add_name_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_output_meter_left_listener()<Description>Value</Description></Value>

<Doc>	add_output_meter_left_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "output_meter_left" has changed. C++ signature :  void add_output_meter_left_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_output_meter_level_listener()<Description>Value</Description></Value>

<Doc>	add_output_meter_level_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "output_meter_level" has changed. C++ signature :  void add_output_meter_level_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_output_meter_right_listener()<Description>Value</Description></Value>

<Doc>	add_output_meter_right_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "output_meter_right" has changed. C++ signature :  void add_output_meter_right_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_output_routing_channel_listener()<Description>Value</Description></Value>

<Doc>	add_output_routing_channel_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "output_routing_channel" has changed. C++ signature :  void add_output_routing_channel_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_output_routing_type_listener()<Description>Value</Description></Value>

<Doc>	add_output_routing_type_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "output_routing_type" has changed. C++ signature :  void add_output_routing_type_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_output_routings_listener()<Description>Value</Description></Value>

<Doc>	add_output_routings_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "output_routings" has changed. C++ signature :  void add_output_routings_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_output_sub_routings_listener()<Description>Value</Description></Value>

<Doc>	add_output_sub_routings_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "output_sub_routings" has changed. C++ signature :  void add_output_sub_routings_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_performance_impact_listener()<Description>Value</Description></Value>

<Doc>	add_performance_impact_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "performance_impact" has changed. C++ signature :  void add_performance_impact_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_playing_slot_index_listener()<Description>Value</Description></Value>

<Doc>	add_playing_slot_index_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "playing_slot_index" has changed. C++ signature :  void add_playing_slot_index_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.add_solo_listener()<Description>Value</Description></Value>

<Doc>	add_solo_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Add a listener function or method, which will be called as soon as the property "solo" has changed. C++ signature :  void add_solo_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.arm<Description>Value</Description></Value>

<Doc>	Arm the track for recording. Not available for Master- and Send Tracks.</Doc>

<Value>Live.Track.Track.arm_has_listener()<Description>Value</Description></Value>

<Doc>	arm_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "arm". C++ signature :  bool arm_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.arrangement_clips<Description>Value</Description></Value>

<Doc>	const access to the list of clips in arrangement viewThe list will be empty for the master, send and group tracks.</Doc>

<Value>Live.Track.Track.arrangement_clips_has_listener()<Description>Value</Description></Value>

<Doc>	arrangement_clips_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "arrangement_clips". C++ signature :  bool arrangement_clips_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.available_input_routing_channels<Description>Value</Description></Value>

<Doc>	Return a list of source channels for input routing.</Doc>

<Value>Live.Track.Track.available_input_routing_channels_has_listener()<Description>Value</Description></Value>

<Doc>	available_input_routing_channels_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "available_input_routing_channels". C++ signature :  bool available_input_routing_channels_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.available_input_routing_types<Description>Value</Description></Value>

<Doc>	Return a list of source types for input routing.</Doc>

<Value>Live.Track.Track.available_input_routing_types_has_listener()<Description>Value</Description></Value>

<Doc>	available_input_routing_types_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "available_input_routing_types". C++ signature :  bool available_input_routing_types_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.available_output_routing_channels<Description>Value</Description></Value>

<Doc>	Return a list of destination channels for output routing.</Doc>

<Value>Live.Track.Track.available_output_routing_channels_has_listener()<Description>Value</Description></Value>

<Doc>	available_output_routing_channels_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "available_output_routing_channels". C++ signature :  bool available_output_routing_channels_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.available_output_routing_types<Description>Value</Description></Value>

<Doc>	Return a list of destination types for output routing.</Doc>

<Value>Live.Track.Track.available_output_routing_types_has_listener()<Description>Value</Description></Value>

<Doc>	available_output_routing_types_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "available_output_routing_types". C++ signature :  bool available_output_routing_types_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.can_be_armed<Description>Value</Description></Value>

<Doc>	return True, if this Track has a valid arm property. Not all trackscan be armed (for example return Tracks or the Master Tracks).</Doc>

<Value>Live.Track.Track.can_be_frozen<Description>Value</Description></Value>

<Doc>	return True, if this Track can be frozen.</Doc>

<Value>Live.Track.Track.can_show_chains<Description>Value</Description></Value>

<Doc>	return True, if this Track contains a rack instrument device that is capable of showing its chains in session view.</Doc>

<Value>Live.Track.Track.canonical_parent<Description>Value</Description></Value>

<Doc>	Get the canonical parent of the track.</Doc>

<Value>Live.Track.Track.clip_slots<Description>Value</Description></Value>

<Doc>	const access to the list of clipslots (see class AClipSlot) for this track.The list will be empty for the master and sendtracks.</Doc>

<Value>Live.Track.Track.clip_slots_has_listener()<Description>Value</Description></Value>

<Doc>	clip_slots_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "clip_slots". C++ signature :  bool clip_slots_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.color<Description>Value</Description></Value>

<Doc>	Get/set access to the color of the Track (RGB).</Doc>

<Value>Live.Track.Track.color_has_listener()<Description>Value</Description></Value>

<Doc>	color_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "color". C++ signature :  bool color_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.color_index<Description>Value</Description></Value>

<Doc>	Get/Set access to the color index of the track. Can be None for no color.</Doc>

<Value>Live.Track.Track.color_index_has_listener()<Description>Value</Description></Value>

<Doc>	color_index_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "color_index". C++ signature :  bool color_index_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.current_input_routing<Description>Value</Description></Value>

<Doc>	Get/Set the name of the current active input routing.When setting a new routing, the new routing must be one of the available ones.</Doc>

<Value>Live.Track.Track.current_input_routing_has_listener()<Description>Value</Description></Value>

<Doc>	current_input_routing_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "current_input_routing". C++ signature :  bool current_input_routing_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.current_input_sub_routing<Description>Value</Description></Value>

<Doc>	Get/Set the current active input sub routing.When setting a new routing, the new routing must be one of the available ones.</Doc>

<Value>Live.Track.Track.current_input_sub_routing_has_listener()<Description>Value</Description></Value>

<Doc>	current_input_sub_routing_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "current_input_sub_routing". C++ signature :  bool current_input_sub_routing_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.current_monitoring_state<Description>Value</Description></Value>

<Doc>	Get/Set the track's current monitoring state.</Doc>

<Value>Live.Track.Track.current_monitoring_state_has_listener()<Description>Value</Description></Value>

<Doc>	current_monitoring_state_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "current_monitoring_state". C++ signature :  bool current_monitoring_state_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.current_output_routing<Description>Value</Description></Value>

<Doc>	Get/Set the current active output routing.When setting a new routing, the new routing must be one of the available ones.</Doc>

<Value>Live.Track.Track.current_output_routing_has_listener()<Description>Value</Description></Value>

<Doc>	current_output_routing_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "current_output_routing". C++ signature :  bool current_output_routing_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.current_output_sub_routing<Description>Value</Description></Value>

<Doc>	Get/Set the current active output sub routing.When setting a new routing, the new routing must be one of the available ones.</Doc>

<Value>Live.Track.Track.current_output_sub_routing_has_listener()<Description>Value</Description></Value>

<Doc>	current_output_sub_routing_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "current_output_sub_routing". C++ signature :  bool current_output_sub_routing_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.data_has_listener()<Description>Value</Description></Value>

<Doc>	data_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "data". C++ signature :  bool data_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.delete_clip()<Description>Value</Description></Value>

<Doc>	delete_clip( (Track)arg1, (Clip)arg2) -&amp;gt; None : Delete the given clip. Raises a runtime error when the clip belongs to another track. C++ signature :  void delete_clip(TTrackPyHandle,TPyHandle&amp;lt;AClip&amp;gt;)</Doc>

<Value>Live.Track.Track.delete_device()<Description>Value</Description></Value>

<Doc>	delete_device( (Track)arg1, (int)arg2) -&amp;gt; None : Delete a device identified by the index in the 'devices' list. C++ signature :  void delete_device(TTrackPyHandle,int)</Doc>

<Value>Live.Track.Track.devices<Description>Value</Description></Value>

<Doc>	Return const access to all available Devices that are present in the TracksDevicechain. This tuple will also include the 'mixer_device' that every Trackalways has.</Doc>

<Value>Live.Track.Track.devices_has_listener()<Description>Value</Description></Value>

<Doc>	devices_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "devices". C++ signature :  bool devices_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.duplicate_clip_slot()<Description>Value</Description></Value>

<Doc>	duplicate_clip_slot( (Track)arg1, (int)arg2) -&amp;gt; int : Duplicate a clip and put it into the next free slot and return the index of the destination slot. A new scene is created if no free slot is available. If creating the new scene would exceed the limitations, a runtime error is raised. C++ signature :  int duplicate_clip_slot(TTrackPyHandle,int)</Doc>

<Value>Live.Track.Track.duplicate_clip_to_arrangement()<Description>Value</Description></Value>

<Doc>	duplicate_clip_to_arrangement( (Track)self, (Clip)clip, (float)destination_time) -&amp;gt; Clip : Duplicate the given clip into the arrangement of this track at the provided destination time and return it. When the type of the clip and the type of the track are incompatible, a runtime error is raised. C++ signature :  TWeakPtr&amp;lt;TPyHandle&amp;lt;AClip&amp;gt;&amp;gt; duplicate_clip_to_arrangement(TTrackPyHandle,TPyHandle&amp;lt;AClip&amp;gt;,double)</Doc>

<Value>Live.Track.Track.fired_slot_index<Description>Value</Description></Value>

<Doc>	const access to the index of the fired (and thus blinking) clipslot in this track.This index is -1 if no slot is fired and -2 if the track's stop button has been fired.</Doc>

<Value>Live.Track.Track.fired_slot_index_has_listener()<Description>Value</Description></Value>

<Doc>	fired_slot_index_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "fired_slot_index". C++ signature :  bool fired_slot_index_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.fold_state<Description>Value</Description></Value>

<Doc>	Get/Set whether the track is folded or not. Only available if is_foldable is True.</Doc>

<Value>Live.Track.Track.get_data()<Description>Value</Description></Value>

<Doc>	get_data( (Track)arg1, (object)key, (object)default_value) -&amp;gt; object : Get data for the given key, that was previously stored using set_data. C++ signature :  boost::python::api::object get_data(TTrackPyHandle,TString,boost::python::api::object)</Doc>

<Value>Live.Track.Track.group_track<Description>Value</Description></Value>

<Doc>	return the group track if is_grouped.</Doc>

<Value>Live.Track.Track.has_audio_input<Description>Value</Description></Value>

<Doc>	return True, if this Track can be feed with an Audio signal. This istrue for all Audio Tracks.</Doc>

<Value>Live.Track.Track.has_audio_input_has_listener()<Description>Value</Description></Value>

<Doc>	has_audio_input_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "has_audio_input". C++ signature :  bool has_audio_input_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.has_audio_output<Description>Value</Description></Value>

<Doc>	return True, if this Track sends out an Audio signal. This istrue for all Audio Tracks, and MIDI tracks with an Instrument.</Doc>

<Value>Live.Track.Track.has_audio_output_has_listener()<Description>Value</Description></Value>

<Doc>	has_audio_output_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "has_audio_output". C++ signature :  bool has_audio_output_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.has_midi_input<Description>Value</Description></Value>

<Doc>	return True, if this Track can be feed with an Audio signal. This istrue for all MIDI Tracks.</Doc>

<Value>Live.Track.Track.has_midi_input_has_listener()<Description>Value</Description></Value>

<Doc>	has_midi_input_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "has_midi_input". C++ signature :  bool has_midi_input_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.has_midi_output<Description>Value</Description></Value>

<Doc>	return True, if this Track sends out MIDI events. This istrue for all MIDI Tracks with no Instruments.</Doc>

<Value>Live.Track.Track.has_midi_output_has_listener()<Description>Value</Description></Value>

<Doc>	has_midi_output_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "has_midi_output". C++ signature :  bool has_midi_output_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.implicit_arm<Description>Value</Description></Value>

<Doc>	Arm the track for recording. When The track is implicitly armed, it showsin a weaker color in the live GUI and is not saved in the set.</Doc>

<Value>Live.Track.Track.implicit_arm_has_listener()<Description>Value</Description></Value>

<Doc>	implicit_arm_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "implicit_arm". C++ signature :  bool implicit_arm_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.input_meter_left<Description>Value</Description></Value>

<Doc>	Momentary value of left input channel meter, 0.0 to 1.0. For Audio Tracks only.</Doc>

<Value>Live.Track.Track.input_meter_left_has_listener()<Description>Value</Description></Value>

<Doc>	input_meter_left_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "input_meter_left". C++ signature :  bool input_meter_left_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.input_meter_level<Description>Value</Description></Value>

<Doc>	Return the MIDI or Audio meter value of the Tracks input, depending on thetype of the Track input. Meter values (MIDI or Audio) are always scaledfrom 0.0 to 1.0.</Doc>

<Value>Live.Track.Track.input_meter_level_has_listener()<Description>Value</Description></Value>

<Doc>	input_meter_level_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "input_meter_level". C++ signature :  bool input_meter_level_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.input_meter_right<Description>Value</Description></Value>

<Doc>	Momentary value of right input channel meter, 0.0 to 1.0. For Audio Tracks only.</Doc>

<Value>Live.Track.Track.input_meter_right_has_listener()<Description>Value</Description></Value>

<Doc>	input_meter_right_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "input_meter_right". C++ signature :  bool input_meter_right_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.input_routing_channel<Description>Value</Description></Value>

<Doc>	Get and set the current source channel for input routing.Raises ValueError if the type isn't one of the current values inavailable_input_routing_channels.</Doc>

<Value>Live.Track.Track.input_routing_channel_has_listener()<Description>Value</Description></Value>

<Doc>	input_routing_channel_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "input_routing_channel". C++ signature :  bool input_routing_channel_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.input_routing_type<Description>Value</Description></Value>

<Doc>	Get and set the current source type for input routing.Raises ValueError if the type isn't one of the current values inavailable_input_routing_types.</Doc>

<Value>Live.Track.Track.input_routing_type_has_listener()<Description>Value</Description></Value>

<Doc>	input_routing_type_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "input_routing_type". C++ signature :  bool input_routing_type_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.input_routings<Description>Value</Description></Value>

<Doc>	Const access to the list of available input routings.</Doc>

<Value>Live.Track.Track.input_routings_has_listener()<Description>Value</Description></Value>

<Doc>	input_routings_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "input_routings". C++ signature :  bool input_routings_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.input_sub_routings<Description>Value</Description></Value>

<Doc>	Return a list of all available input sub routings.</Doc>

<Value>Live.Track.Track.input_sub_routings_has_listener()<Description>Value</Description></Value>

<Doc>	input_sub_routings_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "input_sub_routings". C++ signature :  bool input_sub_routings_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.is_foldable<Description>Value</Description></Value>

<Doc>	return True if the track can be (un)folded to hide/reveal contained tracks.</Doc>

<Value>Live.Track.Track.is_frozen<Description>Value</Description></Value>

<Doc>	return True if this Track is currently frozen. No changes should be applied to the track's devices or clips while it is frozen.</Doc>

<Value>Live.Track.Track.is_frozen_has_listener()<Description>Value</Description></Value>

<Doc>	is_frozen_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "is_frozen". C++ signature :  bool is_frozen_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.is_grouped<Description>Value</Description></Value>

<Doc>	return True if this Track is current part of a group track.</Doc>

<Value>Live.Track.Track.is_part_of_selection<Description>Value</Description></Value>

<Doc>	return False if the track is not selected.</Doc>

<Value>Live.Track.Track.is_showing_chains<Description>Value</Description></Value>

<Doc>	Get/Set whether a track with a rack device is showing its chains in session view.</Doc>

<Value>Live.Track.Track.is_showing_chains_has_listener()<Description>Value</Description></Value>

<Doc>	is_showing_chains_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "is_showing_chains". C++ signature :  bool is_showing_chains_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.is_visible<Description>Value</Description></Value>

<Doc>	return False if the track is hidden within a folded group track.</Doc>

<Value>Live.Track.Track.jump_in_running_session_clip()<Description>Value</Description></Value>

<Doc>	jump_in_running_session_clip( (Track)arg1, (float)arg2) -&amp;gt; None : Jump forward or backward in the currently running Sessionclip (if any) by the specified relative amount in beats. Does nothing if no Session Clip is currently running. C++ signature :  void jump_in_running_session_clip(TTrackPyHandle,double)</Doc>

<Value>Live.Track.Track.mixer_device<Description>Value</Description></Value>

<Doc>	Return access to the special Device that every Track has: This Device containsthe Volume, Pan, Sendamounts, and Crossfade assignment parameters.</Doc>

<Value>Live.Track.Track.monitoring_states<Description>Value</Description></Value>

<Value>Live.Track.Track.mute<Description>Value</Description></Value>

<Doc>	Mute/unmute the track.</Doc>

<Value>Live.Track.Track.mute_has_listener()<Description>Value</Description></Value>

<Doc>	mute_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "mute". C++ signature :  bool mute_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.muted_via_solo<Description>Value</Description></Value>

<Doc>	Returns true if the track is muted because another track is soloed.</Doc>

<Value>Live.Track.Track.muted_via_solo_has_listener()<Description>Value</Description></Value>

<Doc>	muted_via_solo_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "muted_via_solo". C++ signature :  bool muted_via_solo_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.name<Description>Value</Description></Value>

<Doc>	Read/write access to the name of the Track, as visible in the track header.</Doc>

<Value>Live.Track.Track.name_has_listener()<Description>Value</Description></Value>

<Doc>	name_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.output_meter_left<Description>Value</Description></Value>

<Doc>	Momentary value of left output channel meter, 0.0 to 1.0.For tracks with audio output only.</Doc>

<Value>Live.Track.Track.output_meter_left_has_listener()<Description>Value</Description></Value>

<Doc>	output_meter_left_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "output_meter_left". C++ signature :  bool output_meter_left_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.output_meter_level<Description>Value</Description></Value>

<Doc>	Return the MIDI or Audio meter value of the Track output (behind themixer_device), depending on the type of the Track input, this can be a MIDIor Audio meter. Meter values (MIDI or Audio) are always scaled from 0.0 to 1.0.</Doc>

<Value>Live.Track.Track.output_meter_level_has_listener()<Description>Value</Description></Value>

<Doc>	output_meter_level_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "output_meter_level". C++ signature :  bool output_meter_level_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.output_meter_right<Description>Value</Description></Value>

<Doc>	Momentary value of right output channel meter, 0.0 to 1.0.For tracks with audio output only.</Doc>

<Value>Live.Track.Track.output_meter_right_has_listener()<Description>Value</Description></Value>

<Doc>	output_meter_right_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "output_meter_right". C++ signature :  bool output_meter_right_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.output_routing_channel<Description>Value</Description></Value>

<Doc>	Get and set the current destination channel for output routing.Raises ValueError if the channel isn't one of the current values inavailable_output_routing_channels.</Doc>

<Value>Live.Track.Track.output_routing_channel_has_listener()<Description>Value</Description></Value>

<Doc>	output_routing_channel_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "output_routing_channel". C++ signature :  bool output_routing_channel_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.output_routing_type<Description>Value</Description></Value>

<Doc>	Get and set the current destination type for output routing.Raises ValueError if the type isn't one of the current values inavailable_output_routing_types.</Doc>

<Value>Live.Track.Track.output_routing_type_has_listener()<Description>Value</Description></Value>

<Doc>	output_routing_type_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "output_routing_type". C++ signature :  bool output_routing_type_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.output_routings<Description>Value</Description></Value>

<Doc>	Const access to the list of all available output routings.</Doc>

<Value>Live.Track.Track.output_routings_has_listener()<Description>Value</Description></Value>

<Doc>	output_routings_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "output_routings". C++ signature :  bool output_routings_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.output_sub_routings<Description>Value</Description></Value>

<Doc>	Return a list of all available output sub routings.</Doc>

<Value>Live.Track.Track.output_sub_routings_has_listener()<Description>Value</Description></Value>

<Doc>	output_sub_routings_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "output_sub_routings". C++ signature :  bool output_sub_routings_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.performance_impact<Description>Value</Description></Value>

<Doc>	Reports the performance impact of this track.</Doc>

<Value>Live.Track.Track.performance_impact_has_listener()<Description>Value</Description></Value>

<Doc>	performance_impact_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "performance_impact". C++ signature :  bool performance_impact_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.playing_slot_index<Description>Value</Description></Value>

<Doc>	const access to the index of the currently playing clip in the track.Will be -1 when no clip is playing.</Doc>

<Value>Live.Track.Track.playing_slot_index_has_listener()<Description>Value</Description></Value>

<Doc>	playing_slot_index_has_listener( (Track)arg1, (object)arg2) -&amp;gt; bool : Returns true, if the given listener function or method is connected to the property "playing_slot_index". C++ signature :  bool playing_slot_index_has_listener(TTrackPyHandle,boost::python::api::object)</Doc>

<Value>Live.Track.Track.remove_arm_listener()<Description>Value</Description></Value>

<Doc>	remove_arm_listener( (Track)arg1, (object)arg2) -&amp;gt; None : Remove a previously set listener function or method from property "arm". C++ signature :  void remove_arm_listener(TTrackPyHandle,boost::python::api::object)</Doc>

</Live>
