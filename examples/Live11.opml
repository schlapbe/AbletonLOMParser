<?xml version="1.0" encoding="UTF-8"?>
<opml version="2.0">
<head>
	<title>Tree Export</title>
</head>
<body><outline text="Live" _note="full path:Live\n" type="label" _label="Module">
    <outline text="Application" _note="full path:Live.Application\n" type="label" _label="Module">
        <outline text="combine_apcs()" _note="full path:Live.Application.combine_apcs()\ncombine_apcs() -> bool : Returns true if multiple APCs should be combined. C++ signature :  bool combine_apcs()" type="label" _label="Built-In">
        </outline>
        <outline text="encrypt_challenge()" _note="full path:Live.Application.encrypt_challenge()\nencrypt_challenge( (int)dongle1, (int)dongle2 [, (int)key_index=0]) -> tuple : Returns an encrypted challenge based on the TEA algortithm C++ signature :  boost::python::tuple encrypt_challenge(int,int [,int=0])" type="label" _label="Built-In">
        </outline>
        <outline text="encrypt_challenge2()" _note="full path:Live.Application.encrypt_challenge2()\nencrypt_challenge2( (int)arg1) -> int : Returns the UMAC hash for the given challenge. C++ signature :  int encrypt_challenge2(int)" type="label" _label="Built-In">
        </outline>
        <outline text="get_application()" _note="full path:Live.Application.get_application()\nget_application() -> Application : Returns the application instance. C++ signature :  TWeakPtr<TPyHandle<ASongApp> > get_application()" type="label" _label="Built-In">
        </outline>
        <outline text="get_random_int()" _note="full path:Live.Application.get_random_int()\nget_random_int( (int)arg1, (int)arg2) -> int : Returns a random integer from the given range. C++ signature :  int get_random_int(int,int)" type="label" _label="Built-In">
        </outline>
        <outline text="Application" _note="full path:Live.Application.Application\nThis class represents the Live application." type="label" _label="Class">
            <outline text="View" _note="full path:Live.Application.Application.View\nThis class represents the view aspects of the Live application." type="label" _label="Class">
                <outline text="NavDirection" _note="full path:Live.Application.Application.View.NavDirection\n" type="label" _label="Sub-Class">
                    <outline text="Values">
                        <outline text="down" _note="full path:Live.Application.Application.View.NavDirection.down\n" type="label" _label="Value">
                        </outline>
                        <outline text="left" _note="full path:Live.Application.Application.View.NavDirection.left\n" type="label" _label="Value">
                        </outline>
                        <outline text="right" _note="full path:Live.Application.Application.View.NavDirection.right\n" type="label" _label="Value">
                        </outline>
                        <outline text="up" _note="full path:Live.Application.Application.View.NavDirection.up\n" type="label" _label="Value">
                        </outline>
                    </outline>
                </outline>
                <outline text="Properties">
                    <outline text="_live_ptr" _note="full path:Live.Application.Application.View._live_ptr\n" type="label" _label="Property">
                    </outline>
                    <outline text="browse_mode" _note="full path:Live.Application.Application.View.browse_mode\nReturn true if HotSwap mode is active for any target." type="label" _label="Property">
                    </outline>
                    <outline text="canonical_parent" _note="full path:Live.Application.Application.View.canonical_parent\nGet the canonical parent of the application view." type="label" _label="Property">
                    </outline>
                    <outline text="focused_document_view" _note="full path:Live.Application.Application.View.focused_document_view\nReturn the name of the document view ('Session' or 'Arranger')shown in the currently selected window." type="label" _label="Property">
                    </outline>
                </outline>
                <outline text="Listeners">
                    <outline text="add_browse_mode_listener()" _note="full path:Live.Application.Application.View.add_browse_mode_listener()\nadd_browse_mode_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;browse_mode&quot; has changed. C++ signature :  void add_browse_mode_listener(TPyViewData<ASongApp>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="add_focused_document_view_listener()" _note="full path:Live.Application.Application.View.add_focused_document_view_listener()\nadd_focused_document_view_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;focused_document_view&quot; has changed. C++ signature :  void add_focused_document_view_listener(TPyViewData<ASongApp>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="add_is_view_visible_listener()" _note="full path:Live.Application.Application.View.add_is_view_visible_listener()\nadd_is_view_visible_listener( (View)arg1, (object)arg2, (object)arg3) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_view_visible&quot; has changed. C++ signature :  void add_is_view_visible_listener(TPyViewData<ASongApp>,TString,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="add_view_focus_changed_listener()" _note="full path:Live.Application.Application.View.add_view_focus_changed_listener()\nadd_view_focus_changed_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;view_focus_changed&quot; has changed. C++ signature :  void add_view_focus_changed_listener(TPyViewData<ASongApp>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="browse_mode_has_listener()" _note="full path:Live.Application.Application.View.browse_mode_has_listener()\nbrowse_mode_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;browse_mode&quot;. C++ signature :  bool browse_mode_has_listener(TPyViewData<ASongApp>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="focused_document_view_has_listener()" _note="full path:Live.Application.Application.View.focused_document_view_has_listener()\nfocused_document_view_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;focused_document_view&quot;. C++ signature :  bool focused_document_view_has_listener(TPyViewData<ASongApp>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="is_view_visible_has_listener()" _note="full path:Live.Application.Application.View.is_view_visible_has_listener()\nis_view_visible_has_listener( (View)arg1, (object)arg2, (object)arg3) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_view_visible&quot;. C++ signature :  bool is_view_visible_has_listener(TPyViewData<ASongApp>,TString,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_browse_mode_listener()" _note="full path:Live.Application.Application.View.remove_browse_mode_listener()\nremove_browse_mode_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;browse_mode&quot;. C++ signature :  void remove_browse_mode_listener(TPyViewData<ASongApp>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_focused_document_view_listener()" _note="full path:Live.Application.Application.View.remove_focused_document_view_listener()\nremove_focused_document_view_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;focused_document_view&quot;. C++ signature :  void remove_focused_document_view_listener(TPyViewData<ASongApp>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_is_view_visible_listener()" _note="full path:Live.Application.Application.View.remove_is_view_visible_listener()\nremove_is_view_visible_listener( (View)arg1, (object)arg2, (object)arg3) -> None : Remove a previously set listener function or method from property &quot;is_view_visible&quot;. C++ signature :  void remove_is_view_visible_listener(TPyViewData<ASongApp>,TString,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_view_focus_changed_listener()" _note="full path:Live.Application.Application.View.remove_view_focus_changed_listener()\nremove_view_focus_changed_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;view_focus_changed&quot;. C++ signature :  void remove_view_focus_changed_listener(TPyViewData<ASongApp>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="view_focus_changed_has_listener()" _note="full path:Live.Application.Application.View.view_focus_changed_has_listener()\nview_focus_changed_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;view_focus_changed&quot;. C++ signature :  bool view_focus_changed_has_listener(TPyViewData<ASongApp>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                </outline>
                <outline text="Methods">
                    <outline text="available_main_views()" _note="full path:Live.Application.Application.View.available_main_views()\navailable_main_views( (View)arg1) -> StringVector : Return a list of strings with the available subcomponent views, which is to be specified, when using the rest of this classes functions. A 'subcomponent view' is a main view component of a document view, like the Session view, the Arranger or Detailview and so on... C++ signature :  std::__1::vector<TString, std::__1::allocator<TString> > available_main_views(TPyViewData<ASongApp>)" type="label" _label="Method">
                    </outline>
                    <outline text="focus_view()" _note="full path:Live.Application.Application.View.focus_view()\nfocus_view( (View)arg1, (object)arg2) -> None : Show and focus one through the identifier string specified view. C++ signature :  void focus_view(TPyViewData<ASongApp>,TString)" type="label" _label="Method">
                    </outline>
                    <outline text="hide_view()" _note="full path:Live.Application.Application.View.hide_view()\nhide_view( (View)arg1, (object)arg2) -> None : Hide one through the identifier string specified view. C++ signature :  void hide_view(TPyViewData<ASongApp>,TString)" type="label" _label="Method">
                    </outline>
                    <outline text="is_view_visible()" _note="full path:Live.Application.Application.View.is_view_visible()\nis_view_visible( (View)arg1, (object)identifier [, (bool)main_window_only=True]) -> bool : Return true if the through the identifier string specified view is currently visible. If main_window_only is set to False, this will also check in second window. Notifications from the second window are not yet supported. C++ signature :  bool is_view_visible(TPyViewData<ASongApp>,TString [,bool=True])" type="label" _label="Method">
                    </outline>
                    <outline text="scroll_view()" _note="full path:Live.Application.Application.View.scroll_view()\nscroll_view( (View)arg1, (int)arg2, (object)arg3, (bool)arg4) -> None : Scroll through the identifier string specified view into the given direction, if possible.  Will silently return if the specified view can not perform the requested action. C++ signature :  void scroll_view(TPyViewData<ASongApp>,int,TString,bool)" type="label" _label="Method">
                    </outline>
                    <outline text="show_view()" _note="full path:Live.Application.Application.View.show_view()\nshow_view( (View)arg1, (object)arg2) -> None : Show one through the identifier string specified view. Will throw a runtime error if this is called in Live's initialization scope. C++ signature :  void show_view(TPyViewData<ASongApp>,TString)" type="label" _label="Method">
                    </outline>
                    <outline text="toggle_browse()" _note="full path:Live.Application.Application.View.toggle_browse()\ntoggle_browse( (View)arg1) -> None : Reveals the device chain, the browser and starts hot swap for the selected device. Calling this function again stops hot swap. C++ signature :  void toggle_browse(TPyViewData<ASongApp>)" type="label" _label="Method">
                    </outline>
                    <outline text="zoom_view()" _note="full path:Live.Application.Application.View.zoom_view()\nzoom_view( (View)arg1, (int)arg2, (object)arg3, (bool)arg4) -> None : Zoom through the identifier string specified view into the given direction, if possible.  Will silently return if the specified view can not perform the requested action. C++ signature :  void zoom_view(TPyViewData<ASongApp>,int,TString,bool)" type="label" _label="Method">
                    </outline>
                </outline>
            </outline>
            <outline text="Properties">
                <outline text="_live_ptr" _note="full path:Live.Application.Application._live_ptr\n" type="label" _label="Property">
                </outline>
                <outline text="browser" _note="full path:Live.Application.Application.browser\nReturns an interface to the browser." type="label" _label="Property">
                </outline>
                <outline text="canonical_parent" _note="full path:Live.Application.Application.canonical_parent\nReturns the canonical parent of the application." type="label" _label="Property">
                </outline>
                <outline text="control_surfaces" _note="full path:Live.Application.Application.control_surfaces\nConst access to a list of the control surfaces selected in preferences, in the same order.The list contains None if no control surface is active at that index." type="label" _label="Property">
                </outline>
                <outline text="current_dialog_button_count" _note="full path:Live.Application.Application.current_dialog_button_count\nNumber of buttons on the current dialog." type="label" _label="Property">
                </outline>
                <outline text="current_dialog_message" _note="full path:Live.Application.Application.current_dialog_message\nText of the last dialog that appeared; Empty if all dialogs just disappeared." type="label" _label="Property">
                </outline>
                <outline text="open_dialog_count" _note="full path:Live.Application.Application.open_dialog_count\nThe number of open dialogs in Live. 0 if not dialog is open." type="label" _label="Property">
                </outline>
                <outline text="unavailable_features" _note="full path:Live.Application.Application.unavailable_features\nList of features that are unavailable due to limitations of the current Live edition." type="label" _label="Property">
                </outline>
                <outline text="view" _note="full path:Live.Application.Application.view\nReturns the applications view component." type="label" _label="Property">
                </outline>
            </outline>
            <outline text="Listeners">
                <outline text="add_control_surfaces_listener()" _note="full path:Live.Application.Application.add_control_surfaces_listener()\nadd_control_surfaces_listener( (Application)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;control_surfaces&quot; has changed. C++ signature :  void add_control_surfaces_listener(TPyHandle<ASongApp>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_open_dialog_count_listener()" _note="full path:Live.Application.Application.add_open_dialog_count_listener()\nadd_open_dialog_count_listener( (Application)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;open_dialog_count&quot; has changed. C++ signature :  void add_open_dialog_count_listener(TPyHandle<ASongApp>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_unavailable_features_listener()" _note="full path:Live.Application.Application.add_unavailable_features_listener()\nadd_unavailable_features_listener( (Application)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;unavailable_features&quot; has changed. C++ signature :  void add_unavailable_features_listener(TPyHandle<ASongApp>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="control_surfaces_has_listener()" _note="full path:Live.Application.Application.control_surfaces_has_listener()\ncontrol_surfaces_has_listener( (Application)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;control_surfaces&quot;. C++ signature :  bool control_surfaces_has_listener(TPyHandle<ASongApp>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="open_dialog_count_has_listener()" _note="full path:Live.Application.Application.open_dialog_count_has_listener()\nopen_dialog_count_has_listener( (Application)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;open_dialog_count&quot;. C++ signature :  bool open_dialog_count_has_listener(TPyHandle<ASongApp>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_control_surfaces_listener()" _note="full path:Live.Application.Application.remove_control_surfaces_listener()\nremove_control_surfaces_listener( (Application)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;control_surfaces&quot;. C++ signature :  void remove_control_surfaces_listener(TPyHandle<ASongApp>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_open_dialog_count_listener()" _note="full path:Live.Application.Application.remove_open_dialog_count_listener()\nremove_open_dialog_count_listener( (Application)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;open_dialog_count&quot;. C++ signature :  void remove_open_dialog_count_listener(TPyHandle<ASongApp>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_unavailable_features_listener()" _note="full path:Live.Application.Application.remove_unavailable_features_listener()\nremove_unavailable_features_listener( (Application)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;unavailable_features&quot;. C++ signature :  void remove_unavailable_features_listener(TPyHandle<ASongApp>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="unavailable_features_has_listener()" _note="full path:Live.Application.Application.unavailable_features_has_listener()\nunavailable_features_has_listener( (Application)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;unavailable_features&quot;. C++ signature :  bool unavailable_features_has_listener(TPyHandle<ASongApp>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
            </outline>
            <outline text="Methods">
                <outline text="get_bugfix_version()" _note="full path:Live.Application.Application.get_bugfix_version()\nget_bugfix_version( (Application)arg1) -> int : Returns an integer representing the bugfix version of Live. C++ signature :  int get_bugfix_version(TPyHandle<ASongApp>)" type="label" _label="Method">
                </outline>
                <outline text="get_document()" _note="full path:Live.Application.Application.get_document()\nget_document( (Application)arg1) -> Song : Returns the current Live Set. C++ signature :  TWeakPtr<TPyHandle<ASong> > get_document(TPyHandle<ASongApp>)" type="label" _label="Method">
                </outline>
                <outline text="get_major_version()" _note="full path:Live.Application.Application.get_major_version()\nget_major_version( (Application)arg1) -> int : Returns an integer representing the major version of Live. C++ signature :  int get_major_version(TPyHandle<ASongApp>)" type="label" _label="Method">
                </outline>
                <outline text="get_minor_version()" _note="full path:Live.Application.Application.get_minor_version()\nget_minor_version( (Application)arg1) -> int : Returns an integer representing the minor version of Live. C++ signature :  int get_minor_version(TPyHandle<ASongApp>)" type="label" _label="Method">
                </outline>
                <outline text="has_option()" _note="full path:Live.Application.Application.has_option()\nhas_option( (Application)arg1, (object)arg2) -> bool : Returns True if the given entry exists in Options.txt, False otherwise. C++ signature :  bool has_option(TPyHandle<ASongApp>,TString)" type="label" _label="Method">
                </outline>
                <outline text="press_current_dialog_button()" _note="full path:Live.Application.Application.press_current_dialog_button()\npress_current_dialog_button( (Application)arg1, (int)arg2) -> None : Press a button, by index, on the current message box. C++ signature :  void press_current_dialog_button(TPyHandle<ASongApp>,int)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
        <outline text="UnavailableFeature" _note="full path:Live.Application.UnavailableFeature\n" type="label" _label="Class">
            <outline text="Values">
                <outline text="note_velocity_ranges_and_probabilities" _note="full path:Live.Application.UnavailableFeature.note_velocity_ranges_and_probabilities\n" type="label" _label="Value">
                </outline>
            </outline>
        </outline>
        <outline text="UnavailableFeatureVector" _note="full path:Live.Application.UnavailableFeatureVector\nA container for returning unavailable features." type="label" _label="Class">
            <outline text="Methods">
                <outline text="append()" _note="full path:Live.Application.UnavailableFeatureVector.append()\nappend( (UnavailableFeatureVector)arg1, (object)arg2) -> None : C++ signature :  void append(std::__1::vector<NPythonApplication::TUnavailableFeature, std::__1::allocator<NPythonApplication::TUnavailableFeature> > {lvalue},boost::python::api::object)" type="label" _label="Method">
                </outline>
                <outline text="extend()" _note="full path:Live.Application.UnavailableFeatureVector.extend()\nextend( (UnavailableFeatureVector)arg1, (object)arg2) -> None : C++ signature :  void extend(std::__1::vector<NPythonApplication::TUnavailableFeature, std::__1::allocator<NPythonApplication::TUnavailableFeature> > {lvalue},boost::python::api::object)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
    </outline>
    <outline text="Base" _note="full path:Live.Base\n" type="label" _label="Module">
        <outline text="log()" _note="full path:Live.Base.log()\nlog( (object)arg1) -> None : C++ signature :  void log(TString)" type="label" _label="Built-In">
        </outline>
        <outline text="FloatVector" _note="full path:Live.Base.FloatVector\nA simple container for returning floats from Live." type="label" _label="Class">
            <outline text="Methods">
                <outline text="append()" _note="full path:Live.Base.FloatVector.append()\nappend( (FloatVector)arg1, (object)arg2) -> None : C++ signature :  void append(std::__1::vector<float, std::__1::allocator<float> > {lvalue},boost::python::api::object)" type="label" _label="Method">
                </outline>
                <outline text="extend()" _note="full path:Live.Base.FloatVector.extend()\nextend( (FloatVector)arg1, (object)arg2) -> None : C++ signature :  void extend(std::__1::vector<float, std::__1::allocator<float> > {lvalue},boost::python::api::object)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
        <outline text="IntVector" _note="full path:Live.Base.IntVector\nA simple container for returning integers from Live." type="label" _label="Class">
            <outline text="Methods">
                <outline text="append()" _note="full path:Live.Base.IntVector.append()\nappend( (IntVector)arg1, (object)arg2) -> None : C++ signature :  void append(std::__1::vector<int, std::__1::allocator<int> > {lvalue},boost::python::api::object)" type="label" _label="Method">
                </outline>
                <outline text="extend()" _note="full path:Live.Base.IntVector.extend()\nextend( (IntVector)arg1, (object)arg2) -> None : C++ signature :  void extend(std::__1::vector<int, std::__1::allocator<int> > {lvalue},boost::python::api::object)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
        <outline text="LimitationError" _note="full path:Live.Base.LimitationError\n" type="label" _label="Class">
        </outline>
        <outline text="ObjectVector" _note="full path:Live.Base.ObjectVector\nA simple read only container for returning python objects." type="label" _label="Class">
            <outline text="Methods">
                <outline text="append()" _note="full path:Live.Base.ObjectVector.append()\nappend( (ObjectVector)arg1, (object)arg2) -> None : C++ signature :  void append(std::__1::vector<boost::python::api::object, std::__1::allocator<boost::python::api::object> > {lvalue},boost::python::api::object)" type="label" _label="Method">
                </outline>
                <outline text="extend()" _note="full path:Live.Base.ObjectVector.extend()\nextend( (ObjectVector)arg1, (object)arg2) -> None : C++ signature :  void extend(std::__1::vector<boost::python::api::object, std::__1::allocator<boost::python::api::object> > {lvalue},boost::python::api::object)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
        <outline text="StringVector" _note="full path:Live.Base.StringVector\nA simple container for returning strings from Live." type="label" _label="Class">
            <outline text="Methods">
                <outline text="append()" _note="full path:Live.Base.StringVector.append()\nappend( (StringVector)arg1, (object)arg2) -> None : C++ signature :  void append(std::__1::vector<TString, std::__1::allocator<TString> > {lvalue},boost::python::api::object)" type="label" _label="Method">
                </outline>
                <outline text="extend()" _note="full path:Live.Base.StringVector.extend()\nextend( (StringVector)arg1, (object)arg2) -> None : C++ signature :  void extend(std::__1::vector<TString, std::__1::allocator<TString> > {lvalue},boost::python::api::object)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
        <outline text="Timer" _note="full path:Live.Base.Timer\nA timer that will trigger a callback after a certain inverval. The timer can be repeated and will trigger the callback every interval. Errors in the callback will stop the timer." type="label" _label="Class">
            <outline text="Properties">
                <outline text="running" _note="full path:Live.Base.Timer.running\n" type="label" _label="Property">
                </outline>
            </outline>
            <outline text="Methods">
                <outline text="restart()" _note="full path:Live.Base.Timer.restart()\nrestart( (Timer)arg1) -> None : C++ signature :  void restart(PythonTimer {lvalue})" type="label" _label="Method">
                </outline>
                <outline text="start()" _note="full path:Live.Base.Timer.start()\nstart( (Timer)arg1) -> None : C++ signature :  void start(PythonTimer {lvalue})" type="label" _label="Method">
                </outline>
                <outline text="stop()" _note="full path:Live.Base.Timer.stop()\nstop( (Timer)arg1) -> None : C++ signature :  void stop(PythonTimer {lvalue})" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
        <outline text="Vector" _note="full path:Live.Base.Vector\nA simple read only container for returning objects from Live." type="label" _label="Class">
            <outline text="Methods">
                <outline text="append()" _note="full path:Live.Base.Vector.append()\nappend( (Vector)arg1, (object)arg2) -> None : C++ signature :  void append(std::__1::vector<TWeakPtr<TPyHandleBase>, std::__1::allocator<TWeakPtr<TPyHandleBase> > > {lvalue},boost::python::api::object)" type="label" _label="Method">
                </outline>
                <outline text="extend()" _note="full path:Live.Base.Vector.extend()\nextend( (Vector)arg1, (object)arg2) -> None : C++ signature :  void extend(std::__1::vector<TWeakPtr<TPyHandleBase>, std::__1::allocator<TWeakPtr<TPyHandleBase> > > {lvalue},boost::python::api::object)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
    </outline>
    <outline text="Browser" _note="full path:Live.Browser\n" type="label" _label="Module">
        <outline text="Browser" _note="full path:Live.Browser.Browser\nThis class represents the live browser data base." type="label" _label="Class">
            <outline text="Properties">
                <outline text="_live_ptr" _note="full path:Live.Browser.Browser._live_ptr\n" type="label" _label="Property">
                </outline>
                <outline text="audio_effects" _note="full path:Live.Browser.Browser.audio_effects\nReturns a browser item with access to all the Audio Effects content." type="label" _label="Property">
                </outline>
                <outline text="clips" _note="full path:Live.Browser.Browser.clips\nReturns a browser item with access to all the Clips content." type="label" _label="Property">
                </outline>
                <outline text="colors" _note="full path:Live.Browser.Browser.colors\nReturns a list of browser items containing the configured colors." type="label" _label="Property">
                </outline>
                <outline text="current_project" _note="full path:Live.Browser.Browser.current_project\nReturns a browser item with access to all the Current Project content." type="label" _label="Property">
                </outline>
                <outline text="drums" _note="full path:Live.Browser.Browser.drums\nReturns a browser item with access to all the Drums content." type="label" _label="Property">
                </outline>
                <outline text="filter_type" _note="full path:Live.Browser.Browser.filter_type\nBang triggered when the hotswap target has changed." type="label" _label="Property">
                </outline>
                <outline text="hotswap_target" _note="full path:Live.Browser.Browser.hotswap_target\nBang triggered when the hotswap target has changed." type="label" _label="Property">
                </outline>
                <outline text="instruments" _note="full path:Live.Browser.Browser.instruments\nReturns a browser item with access to all the Instruments content." type="label" _label="Property">
                </outline>
                <outline text="legacy_libraries" _note="full path:Live.Browser.Browser.legacy_libraries\nReturns a list of browser items containing the installed legacy libraries. The list is always empty as legacy library handling has been removed." type="label" _label="Property">
                </outline>
                <outline text="max_for_live" _note="full path:Live.Browser.Browser.max_for_live\nReturns a browser item with access to all the Max For Live content." type="label" _label="Property">
                </outline>
                <outline text="midi_effects" _note="full path:Live.Browser.Browser.midi_effects\nReturns a browser item with access to all the Midi Effects content." type="label" _label="Property">
                </outline>
                <outline text="packs" _note="full path:Live.Browser.Browser.packs\nReturns a browser item with access to all the Packs content." type="label" _label="Property">
                </outline>
                <outline text="plugins" _note="full path:Live.Browser.Browser.plugins\nReturns a browser item with access to all the Plugins content." type="label" _label="Property">
                </outline>
                <outline text="samples" _note="full path:Live.Browser.Browser.samples\nReturns a browser item with access to all the Samples content." type="label" _label="Property">
                </outline>
                <outline text="sounds" _note="full path:Live.Browser.Browser.sounds\nReturns a browser item with access to all the Sounds content." type="label" _label="Property">
                </outline>
                <outline text="user_folders" _note="full path:Live.Browser.Browser.user_folders\nReturns a list of browser items containing all the user folders." type="label" _label="Property">
                </outline>
                <outline text="user_library" _note="full path:Live.Browser.Browser.user_library\nReturns a browser item with access to all the User Library content." type="label" _label="Property">
                </outline>
            </outline>
            <outline text="Listeners">
                <outline text="add_filter_type_listener()" _note="full path:Live.Browser.Browser.add_filter_type_listener()\nadd_filter_type_listener( (Browser)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;filter_type&quot; has changed. C++ signature :  void add_filter_type_listener(TPyHandle<ABrowserDelegate>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_full_refresh_listener()" _note="full path:Live.Browser.Browser.add_full_refresh_listener()\nadd_full_refresh_listener( (Browser)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;full_refresh&quot; has changed. C++ signature :  void add_full_refresh_listener(TPyHandle<ABrowserDelegate>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_hotswap_target_listener()" _note="full path:Live.Browser.Browser.add_hotswap_target_listener()\nadd_hotswap_target_listener( (Browser)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;hotswap_target&quot; has changed. C++ signature :  void add_hotswap_target_listener(TPyHandle<ABrowserDelegate>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="filter_type_has_listener()" _note="full path:Live.Browser.Browser.filter_type_has_listener()\nfilter_type_has_listener( (Browser)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;filter_type&quot;. C++ signature :  bool filter_type_has_listener(TPyHandle<ABrowserDelegate>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="full_refresh_has_listener()" _note="full path:Live.Browser.Browser.full_refresh_has_listener()\nfull_refresh_has_listener( (Browser)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;full_refresh&quot;. C++ signature :  bool full_refresh_has_listener(TPyHandle<ABrowserDelegate>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="hotswap_target_has_listener()" _note="full path:Live.Browser.Browser.hotswap_target_has_listener()\nhotswap_target_has_listener( (Browser)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;hotswap_target&quot;. C++ signature :  bool hotswap_target_has_listener(TPyHandle<ABrowserDelegate>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_filter_type_listener()" _note="full path:Live.Browser.Browser.remove_filter_type_listener()\nremove_filter_type_listener( (Browser)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;filter_type&quot;. C++ signature :  void remove_filter_type_listener(TPyHandle<ABrowserDelegate>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_full_refresh_listener()" _note="full path:Live.Browser.Browser.remove_full_refresh_listener()\nremove_full_refresh_listener( (Browser)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;full_refresh&quot;. C++ signature :  void remove_full_refresh_listener(TPyHandle<ABrowserDelegate>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_hotswap_target_listener()" _note="full path:Live.Browser.Browser.remove_hotswap_target_listener()\nremove_hotswap_target_listener( (Browser)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;hotswap_target&quot;. C++ signature :  void remove_hotswap_target_listener(TPyHandle<ABrowserDelegate>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
            </outline>
            <outline text="Methods">
                <outline text="load_item()" _note="full path:Live.Browser.Browser.load_item()\nload_item( (Browser)arg1, (BrowserItem)arg2) -> None : Loads the provided browser item. C++ signature :  void load_item(TPyHandle<ABrowserDelegate>,NPythonBrowser::TPythonBrowserItem)" type="label" _label="Method">
                </outline>
                <outline text="preview_item()" _note="full path:Live.Browser.Browser.preview_item()\npreview_item( (Browser)arg1, (BrowserItem)arg2) -> None : Previews the provided browser item. C++ signature :  void preview_item(TPyHandle<ABrowserDelegate>,NPythonBrowser::TPythonBrowserItem)" type="label" _label="Method">
                </outline>
                <outline text="relation_to_hotswap_target()" _note="full path:Live.Browser.Browser.relation_to_hotswap_target()\nrelation_to_hotswap_target( (Browser)arg1, (BrowserItem)arg2) -> Relation : Returns the relation between the given browser item and the current hotswap target C++ signature :  NBrowserUri::TRelation relation_to_hotswap_target(TPyHandle<ABrowserDelegate>,NPythonBrowser::TPythonBrowserItem)" type="label" _label="Method">
                </outline>
                <outline text="stop_preview()" _note="full path:Live.Browser.Browser.stop_preview()\nstop_preview( (Browser)arg1) -> None : Stop the current preview. C++ signature :  void stop_preview(TPyHandle<ABrowserDelegate>)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
        <outline text="BrowserItem" _note="full path:Live.Browser.BrowserItem\nThis class represents an item of the browser hierarchy." type="label" _label="Class">
            <outline text="Properties">
                <outline text="children" _note="full path:Live.Browser.BrowserItem.children\nConst access to the descendants of this browser item." type="label" _label="Property">
                </outline>
                <outline text="is_device" _note="full path:Live.Browser.BrowserItem.is_device\nIndicates if the browser item represents a device." type="label" _label="Property">
                </outline>
                <outline text="is_folder" _note="full path:Live.Browser.BrowserItem.is_folder\nIndicates if the browser item represents folder." type="label" _label="Property">
                </outline>
                <outline text="is_loadable" _note="full path:Live.Browser.BrowserItem.is_loadable\nTrue if item can be loaded via the Browser's 'load_item' method." type="label" _label="Property">
                </outline>
                <outline text="is_selected" _note="full path:Live.Browser.BrowserItem.is_selected\nTrue if the item is ancestor of or the actual selection." type="label" _label="Property">
                </outline>
                <outline text="iter_children" _note="full path:Live.Browser.BrowserItem.iter_children\nConst iterable access to the descendants of this browser item." type="label" _label="Property">
                </outline>
                <outline text="name" _note="full path:Live.Browser.BrowserItem.name\nConst access to the canonical display name of this browser item." type="label" _label="Property">
                </outline>
                <outline text="source" _note="full path:Live.Browser.BrowserItem.source\nSpecifies where does item come from -- i.e. Live pack, user library..." type="label" _label="Property">
                </outline>
                <outline text="uri" _note="full path:Live.Browser.BrowserItem.uri\nThe uri describes a unique identifier for a browser item." type="label" _label="Property">
                </outline>
            </outline>
        </outline>
        <outline text="BrowserItemIterator" _note="full path:Live.Browser.BrowserItemIterator\nThis class iterates over children of another BrowserItem." type="label" _label="Class">
            <outline text="Methods">
                <outline text="next()" _note="full path:Live.Browser.BrowserItemIterator.next()\nnext( (BrowserItemIterator)arg1) -> BrowserItem : Retrieve next item C++ signature :  NPythonBrowser::TPythonBrowserItem next(NPythonBrowser::TPythonBrowserItem::TPythonBrowserItemIterator {lvalue})" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
        <outline text="BrowserItemVector" _note="full path:Live.Browser.BrowserItemVector\nA container for returning browser items from Live." type="label" _label="Class">
            <outline text="Methods">
                <outline text="append()" _note="full path:Live.Browser.BrowserItemVector.append()\nappend( (BrowserItemVector)arg1, (object)arg2) -> None : C++ signature :  void append(std::__1::vector<NPythonBrowser::TPythonBrowserItem, std::__1::allocator<NPythonBrowser::TPythonBrowserItem> > {lvalue},boost::python::api::object)" type="label" _label="Method">
                </outline>
                <outline text="extend()" _note="full path:Live.Browser.BrowserItemVector.extend()\nextend( (BrowserItemVector)arg1, (object)arg2) -> None : C++ signature :  void extend(std::__1::vector<NPythonBrowser::TPythonBrowserItem, std::__1::allocator<NPythonBrowser::TPythonBrowserItem> > {lvalue},boost::python::api::object)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
        <outline text="FilterType" _note="full path:Live.Browser.FilterType\n" type="label" _label="Class">
            <outline text="Values">
                <outline text="audio_effect_hotswap" _note="full path:Live.Browser.FilterType.audio_effect_hotswap\n" type="label" _label="Value">
                </outline>
                <outline text="count" _note="full path:Live.Browser.FilterType.count\n" type="label" _label="Value">
                </outline>
                <outline text="disabled" _note="full path:Live.Browser.FilterType.disabled\n" type="label" _label="Value">
                </outline>
                <outline text="drum_pad_hotswap" _note="full path:Live.Browser.FilterType.drum_pad_hotswap\n" type="label" _label="Value">
                </outline>
                <outline text="hotswap_off" _note="full path:Live.Browser.FilterType.hotswap_off\n" type="label" _label="Value">
                </outline>
                <outline text="instrument_hotswap" _note="full path:Live.Browser.FilterType.instrument_hotswap\n" type="label" _label="Value">
                </outline>
                <outline text="midi_effect_hotswap" _note="full path:Live.Browser.FilterType.midi_effect_hotswap\n" type="label" _label="Value">
                </outline>
                <outline text="midi_track_devices" _note="full path:Live.Browser.FilterType.midi_track_devices\n" type="label" _label="Value">
                </outline>
                <outline text="samples" _note="full path:Live.Browser.FilterType.samples\n" type="label" _label="Value">
                </outline>
            </outline>
        </outline>
        <outline text="Relation" _note="full path:Live.Browser.Relation\n" type="label" _label="Class">
            <outline text="Values">
                <outline text="ancestor" _note="full path:Live.Browser.Relation.ancestor\n" type="label" _label="Value">
                </outline>
                <outline text="descendant" _note="full path:Live.Browser.Relation.descendant\n" type="label" _label="Value">
                </outline>
                <outline text="equal" _note="full path:Live.Browser.Relation.equal\n" type="label" _label="Value">
                </outline>
                <outline text="none" _note="full path:Live.Browser.Relation.none\n" type="label" _label="Value">
                </outline>
            </outline>
        </outline>
    </outline>
    <outline text="Chain" _note="full path:Live.Chain\n" type="label" _label="Module">
        <outline text="Chain" _note="full path:Live.Chain.Chain\nThis class represents a group device chain in Live." type="label" _label="Class">
            <outline text="Properties">
                <outline text="_live_ptr" _note="full path:Live.Chain.Chain._live_ptr\n" type="label" _label="Property">
                </outline>
                <outline text="canonical_parent" _note="full path:Live.Chain.Chain.canonical_parent\nGet the canonical parent of the chain." type="label" _label="Property">
                </outline>
                <outline text="color" _note="full path:Live.Chain.Chain.color\nAccess the color index of the Chain." type="label" _label="Property">
                </outline>
                <outline text="color_index" _note="full path:Live.Chain.Chain.color_index\nAccess the color index of the Chain." type="label" _label="Property">
                </outline>
                <outline text="devices" _note="full path:Live.Chain.Chain.devices\nReturn const access to all available Devices that are present in the chains" type="label" _label="Property">
                </outline>
                <outline text="has_audio_input" _note="full path:Live.Chain.Chain.has_audio_input\nreturn True, if this Chain can be feed with an Audio signal. This istrue for all Audio Chains." type="label" _label="Property">
                </outline>
                <outline text="has_audio_output" _note="full path:Live.Chain.Chain.has_audio_output\nreturn True, if this Chain sends out an Audio signal. This istrue for all Audio Chains, and MIDI chains with an Instrument." type="label" _label="Property">
                </outline>
                <outline text="has_midi_input" _note="full path:Live.Chain.Chain.has_midi_input\nreturn True, if this Chain can be feed with an Audio signal. This istrue for all MIDI Chains." type="label" _label="Property">
                </outline>
                <outline text="has_midi_output" _note="full path:Live.Chain.Chain.has_midi_output\nreturn True, if this Chain sends out MIDI events. This istrue for all MIDI Chains with no Instruments." type="label" _label="Property">
                </outline>
                <outline text="is_auto_colored" _note="full path:Live.Chain.Chain.is_auto_colored\nGet/set access to the auto color flag of the Chain.If True, the Chain will always have the same color as the containingTrack or Chain." type="label" _label="Property">
                </outline>
                <outline text="mixer_device" _note="full path:Live.Chain.Chain.mixer_device\nReturn access to the mixer device that holds the chain's mixer parameters:the Volume, Pan, and Sendamounts." type="label" _label="Property">
                </outline>
                <outline text="mute" _note="full path:Live.Chain.Chain.mute\nMute/unmute the chain." type="label" _label="Property">
                </outline>
                <outline text="muted_via_solo" _note="full path:Live.Chain.Chain.muted_via_solo\nReturn const access to whether this chain is muted due to some other chainbeing soloed." type="label" _label="Property">
                </outline>
                <outline text="name" _note="full path:Live.Chain.Chain.name\nRead/write access to the name of the Chain, as visible in the track header." type="label" _label="Property">
                </outline>
                <outline text="solo" _note="full path:Live.Chain.Chain.solo\nGet/Set the solo status of the chain. Note that this will not disable thesolo state of any other Chain in the same rack. If you want exclusive solo, you have to disable the solo state of the other Chains manually." type="label" _label="Property">
                </outline>
            </outline>
            <outline text="Listeners">
                <outline text="add_color_index_listener()" _note="full path:Live.Chain.Chain.add_color_index_listener()\nadd_color_index_listener( (Chain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;color_index&quot; has changed. C++ signature :  void add_color_index_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_color_listener()" _note="full path:Live.Chain.Chain.add_color_listener()\nadd_color_listener( (Chain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;color&quot; has changed. C++ signature :  void add_color_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_devices_listener()" _note="full path:Live.Chain.Chain.add_devices_listener()\nadd_devices_listener( (Chain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;devices&quot; has changed. C++ signature :  void add_devices_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_is_auto_colored_listener()" _note="full path:Live.Chain.Chain.add_is_auto_colored_listener()\nadd_is_auto_colored_listener( (Chain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_auto_colored&quot; has changed. C++ signature :  void add_is_auto_colored_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_mute_listener()" _note="full path:Live.Chain.Chain.add_mute_listener()\nadd_mute_listener( (Chain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;mute&quot; has changed. C++ signature :  void add_mute_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_muted_via_solo_listener()" _note="full path:Live.Chain.Chain.add_muted_via_solo_listener()\nadd_muted_via_solo_listener( (Chain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;muted_via_solo&quot; has changed. C++ signature :  void add_muted_via_solo_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_name_listener()" _note="full path:Live.Chain.Chain.add_name_listener()\nadd_name_listener( (Chain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_solo_listener()" _note="full path:Live.Chain.Chain.add_solo_listener()\nadd_solo_listener( (Chain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;solo&quot; has changed. C++ signature :  void add_solo_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="color_has_listener()" _note="full path:Live.Chain.Chain.color_has_listener()\ncolor_has_listener( (Chain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;color&quot;. C++ signature :  bool color_has_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="color_index_has_listener()" _note="full path:Live.Chain.Chain.color_index_has_listener()\ncolor_index_has_listener( (Chain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;color_index&quot;. C++ signature :  bool color_index_has_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="devices_has_listener()" _note="full path:Live.Chain.Chain.devices_has_listener()\ndevices_has_listener( (Chain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;devices&quot;. C++ signature :  bool devices_has_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="is_auto_colored_has_listener()" _note="full path:Live.Chain.Chain.is_auto_colored_has_listener()\nis_auto_colored_has_listener( (Chain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_auto_colored&quot;. C++ signature :  bool is_auto_colored_has_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="mute_has_listener()" _note="full path:Live.Chain.Chain.mute_has_listener()\nmute_has_listener( (Chain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;mute&quot;. C++ signature :  bool mute_has_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="muted_via_solo_has_listener()" _note="full path:Live.Chain.Chain.muted_via_solo_has_listener()\nmuted_via_solo_has_listener( (Chain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;muted_via_solo&quot;. C++ signature :  bool muted_via_solo_has_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="name_has_listener()" _note="full path:Live.Chain.Chain.name_has_listener()\nname_has_listener( (Chain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_color_index_listener()" _note="full path:Live.Chain.Chain.remove_color_index_listener()\nremove_color_index_listener( (Chain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;color_index&quot;. C++ signature :  void remove_color_index_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_color_listener()" _note="full path:Live.Chain.Chain.remove_color_listener()\nremove_color_listener( (Chain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;color&quot;. C++ signature :  void remove_color_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_devices_listener()" _note="full path:Live.Chain.Chain.remove_devices_listener()\nremove_devices_listener( (Chain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;devices&quot;. C++ signature :  void remove_devices_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_is_auto_colored_listener()" _note="full path:Live.Chain.Chain.remove_is_auto_colored_listener()\nremove_is_auto_colored_listener( (Chain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_auto_colored&quot;. C++ signature :  void remove_is_auto_colored_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_mute_listener()" _note="full path:Live.Chain.Chain.remove_mute_listener()\nremove_mute_listener( (Chain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;mute&quot;. C++ signature :  void remove_mute_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_muted_via_solo_listener()" _note="full path:Live.Chain.Chain.remove_muted_via_solo_listener()\nremove_muted_via_solo_listener( (Chain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;muted_via_solo&quot;. C++ signature :  void remove_muted_via_solo_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_name_listener()" _note="full path:Live.Chain.Chain.remove_name_listener()\nremove_name_listener( (Chain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_solo_listener()" _note="full path:Live.Chain.Chain.remove_solo_listener()\nremove_solo_listener( (Chain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;solo&quot;. C++ signature :  void remove_solo_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="solo_has_listener()" _note="full path:Live.Chain.Chain.solo_has_listener()\nsolo_has_listener( (Chain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;solo&quot;. C++ signature :  bool solo_has_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
            </outline>
            <outline text="Methods">
                <outline text="delete_device()" _note="full path:Live.Chain.Chain.delete_device()\ndelete_device( (Chain)arg1, (int)arg2) -> None : Remove a device identified by its index from the chain. Throws runtime error if bad index.  C++ signature :  void delete_device(TChainPyHandle,int)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
    </outline>
    <outline text="ChainMixerDevice" _note="full path:Live.ChainMixerDevice\n" type="label" _label="Module">
        <outline text="ChainMixerDevice" _note="full path:Live.ChainMixerDevice.ChainMixerDevice\nThis class represents a Chain's Mixer Device in Live, which gives youaccess to the Volume, Panning, and Send properties of a Chain." type="label" _label="Class">
            <outline text="Properties">
                <outline text="_live_ptr" _note="full path:Live.ChainMixerDevice.ChainMixerDevice._live_ptr\n" type="label" _label="Property">
                </outline>
                <outline text="canonical_parent" _note="full path:Live.ChainMixerDevice.ChainMixerDevice.canonical_parent\nGet the canonical parent of the mixer device." type="label" _label="Property">
                </outline>
                <outline text="chain_activator" _note="full path:Live.ChainMixerDevice.ChainMixerDevice.chain_activator\nConst access to the Chain's Activator Device Parameter." type="label" _label="Property">
                </outline>
                <outline text="panning" _note="full path:Live.ChainMixerDevice.ChainMixerDevice.panning\nConst access to the Chain's Panning Device Parameter." type="label" _label="Property">
                </outline>
                <outline text="sends" _note="full path:Live.ChainMixerDevice.ChainMixerDevice.sends\nConst access to the Chain's list of Send Amount Device Parameters." type="label" _label="Property">
                </outline>
                <outline text="volume" _note="full path:Live.ChainMixerDevice.ChainMixerDevice.volume\nConst access to the Chain's Volume Device Parameter." type="label" _label="Property">
                </outline>
            </outline>
            <outline text="Listeners">
                <outline text="add_sends_listener()" _note="full path:Live.ChainMixerDevice.ChainMixerDevice.add_sends_listener()\nadd_sends_listener( (ChainMixerDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;sends&quot; has changed. C++ signature :  void add_sends_listener(TPyHandle<ABranchMixerDevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_sends_listener()" _note="full path:Live.ChainMixerDevice.ChainMixerDevice.remove_sends_listener()\nremove_sends_listener( (ChainMixerDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;sends&quot;. C++ signature :  void remove_sends_listener(TPyHandle<ABranchMixerDevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="sends_has_listener()" _note="full path:Live.ChainMixerDevice.ChainMixerDevice.sends_has_listener()\nsends_has_listener( (ChainMixerDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;sends&quot;. C++ signature :  bool sends_has_listener(TPyHandle<ABranchMixerDevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
            </outline>
        </outline>
    </outline>
    <outline text="Clip" _note="full path:Live.Clip\n" type="label" _label="Module">
        <outline text="AutomationEnvelope" _note="full path:Live.Clip.AutomationEnvelope\nDescribes parameter automation per clip." type="label" _label="Class">
            <outline text="Methods">
                <outline text="insert_step()" _note="full path:Live.Clip.AutomationEnvelope.insert_step()\ninsert_step( (AutomationEnvelope)arg1, (float)arg2, (float)arg3, (float)arg4) -> None : C++ signature :  void insert_step(AAutomation {lvalue},double,double,double)" type="label" _label="Method">
                </outline>
                <outline text="value_at_time()" _note="full path:Live.Clip.AutomationEnvelope.value_at_time()\nvalue_at_time( (AutomationEnvelope)arg1, (float)arg2) -> float : C++ signature :  double value_at_time(AAutomation {lvalue},double)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
        <outline text="Clip" _note="full path:Live.Clip.Clip\nThis class represents a Clip in Live. It can be either an AudioClip or a MIDI Clip, in an Arrangement or the Session, dependingon the Track (Slot) it lives in." type="label" _label="Class">
            <outline text="View" _note="full path:Live.Clip.Clip.View\nRepresenting the view aspects of a Clip." type="label" _label="Class">
                <outline text="Properties">
                    <outline text="_live_ptr" _note="full path:Live.Clip.Clip.View._live_ptr\n" type="label" _label="Property">
                    </outline>
                    <outline text="canonical_parent" _note="full path:Live.Clip.Clip.View.canonical_parent\nGet the canonical parent of the clip view." type="label" _label="Property">
                    </outline>
                    <outline text="grid_is_triplet" _note="full path:Live.Clip.Clip.View.grid_is_triplet\nGet/set wether the grid is showing in triplet mode." type="label" _label="Property">
                    </outline>
                    <outline text="grid_quantization" _note="full path:Live.Clip.Clip.View.grid_quantization\nGet/set clip grid quantization resolution." type="label" _label="Property">
                    </outline>
                </outline>
                <outline text="Methods">
                    <outline text="hide_envelope()" _note="full path:Live.Clip.Clip.View.hide_envelope()\nhide_envelope( (View)arg1) -> None : Hide the envelope view. C++ signature :  void hide_envelope(TPyViewData<AClip>)" type="label" _label="Method">
                    </outline>
                    <outline text="select_envelope_parameter()" _note="full path:Live.Clip.Clip.View.select_envelope_parameter()\nselect_envelope_parameter( (View)arg1, (DeviceParameter)arg2) -> None : Select the given device parameter in the envelope view. C++ signature :  void select_envelope_parameter(TPyViewData<AClip>,TPyHandle<ATimeableValue>)" type="label" _label="Method">
                    </outline>
                    <outline text="show_envelope()" _note="full path:Live.Clip.Clip.View.show_envelope()\nshow_envelope( (View)arg1) -> None : Show the envelope view. C++ signature :  void show_envelope(TPyViewData<AClip>)" type="label" _label="Method">
                    </outline>
                    <outline text="show_loop()" _note="full path:Live.Clip.Clip.View.show_loop()\nshow_loop( (View)arg1) -> None : Show the entire loop in the detail view. C++ signature :  void show_loop(TPyViewData<AClip>)" type="label" _label="Method">
                    </outline>
                </outline>
            </outline>
            <outline text="Properties">
                <outline text="_live_ptr" _note="full path:Live.Clip.Clip._live_ptr\n" type="label" _label="Property">
                </outline>
                <outline text="available_warp_modes" _note="full path:Live.Clip.Clip.available_warp_modes\nAvailable for AudioClips only.Get/Set the available warp modes, that can be used." type="label" _label="Property">
                </outline>
                <outline text="canonical_parent" _note="full path:Live.Clip.Clip.canonical_parent\nGet the canonical parent of the Clip." type="label" _label="Property">
                </outline>
                <outline text="color" _note="full path:Live.Clip.Clip.color\nGet/set access to the color of the Clip (RGB)." type="label" _label="Property">
                </outline>
                <outline text="color_index" _note="full path:Live.Clip.Clip.color_index\nGet/set access to the color index of the Clip." type="label" _label="Property">
                </outline>
                <outline text="end_marker" _note="full path:Live.Clip.Clip.end_marker\nGet/Set the Clips end marker pos in beats/seconds (unit depends on warping)." type="label" _label="Property">
                </outline>
                <outline text="end_time" _note="full path:Live.Clip.Clip.end_time\nGet the clip's end time." type="label" _label="Property">
                </outline>
                <outline text="file_path" _note="full path:Live.Clip.Clip.file_path\nGet the path of the file represented by the Audio Clip." type="label" _label="Property">
                </outline>
                <outline text="gain" _note="full path:Live.Clip.Clip.gain\nAvailable for AudioClips only.Read/write access to the gain setting of theAudio Clip" type="label" _label="Property">
                </outline>
                <outline text="gain_display_string" _note="full path:Live.Clip.Clip.gain_display_string\nReturn a string with the gain as dB value" type="label" _label="Property">
                </outline>
                <outline text="groove" _note="full path:Live.Clip.Clip.groove\nGet the groove associated with this clip." type="label" _label="Property">
                </outline>
                <outline text="has_envelopes" _note="full path:Live.Clip.Clip.has_envelopes\nWill notify if the clip gets his first envelope or the last envelope is removed." type="label" _label="Property">
                </outline>
                <outline text="has_groove" _note="full path:Live.Clip.Clip.has_groove\nReturns true if a groove is associated with this clip." type="label" _label="Property">
                </outline>
                <outline text="is_arrangement_clip" _note="full path:Live.Clip.Clip.is_arrangement_clip\nreturn true if this Clip is an Arrangement Clip.A Clip can be either a Session or Arrangement Clip." type="label" _label="Property">
                </outline>
                <outline text="is_audio_clip" _note="full path:Live.Clip.Clip.is_audio_clip\nReturn true if this Clip is an Audio Clip.A Clip can be either an Audioclip or a MIDI Clip." type="label" _label="Property">
                </outline>
                <outline text="is_midi_clip" _note="full path:Live.Clip.Clip.is_midi_clip\nreturn true if this Clip is a MIDI Clip.A Clip can be either an Audioclip or a MIDI Clip." type="label" _label="Property">
                </outline>
                <outline text="is_overdubbing" _note="full path:Live.Clip.Clip.is_overdubbing\nreturns true if the Clip is recording overdubs" type="label" _label="Property">
                </outline>
                <outline text="is_playing" _note="full path:Live.Clip.Clip.is_playing\nGet/Set if this Clip is currently playing. If the Clips trigger modeis set to a quantization value, the Clip will not start playing immediately.If you need to know wether the Clip was triggered, use the is_triggered property." type="label" _label="Property">
                </outline>
                <outline text="is_recording" _note="full path:Live.Clip.Clip.is_recording\nreturns true if the Clip was triggered to record or is recording." type="label" _label="Property">
                </outline>
                <outline text="is_triggered" _note="full path:Live.Clip.Clip.is_triggered\nreturns true if the Clip was triggered or is playing." type="label" _label="Property">
                </outline>
                <outline text="launch_mode" _note="full path:Live.Clip.Clip.launch_mode\nGet/Set access to the launch mode setting of the Clip." type="label" _label="Property">
                </outline>
                <outline text="launch_quantization" _note="full path:Live.Clip.Clip.launch_quantization\nGet/Set access to the launch quantization setting of the Clip." type="label" _label="Property">
                </outline>
                <outline text="legato" _note="full path:Live.Clip.Clip.legato\nGet/Set access to the legato setting of the Clip" type="label" _label="Property">
                </outline>
                <outline text="length" _note="full path:Live.Clip.Clip.length\nGet to the Clips length in beats/seconds (unit depends on warping)." type="label" _label="Property">
                </outline>
                <outline text="loop_end" _note="full path:Live.Clip.Clip.loop_end\nGet/Set the loop end pos of this Clip in beats/seconds (unit depends on warping)." type="label" _label="Property">
                </outline>
                <outline text="loop_start" _note="full path:Live.Clip.Clip.loop_start\nGet/Set the Clips loopstart pos in beats/seconds (unit depends on warping)." type="label" _label="Property">
                </outline>
                <outline text="looping" _note="full path:Live.Clip.Clip.looping\nGet/Set the Clips 'loop is enabled' flag.Only Warped Audio Clips or MIDI Clip can be looped." type="label" _label="Property">
                </outline>
                <outline text="muted" _note="full path:Live.Clip.Clip.muted\nRead/write access to the mute state of the Clip." type="label" _label="Property">
                </outline>
                <outline text="name" _note="full path:Live.Clip.Clip.name\nRead/write access to the name of the Clip." type="label" _label="Property">
                </outline>
                <outline text="pitch_coarse" _note="full path:Live.Clip.Clip.pitch_coarse\nAvailable for AudioClips only.Read/write access to the pitch (in halftones) setting of theAudio Clip, ranging from -48 to 48" type="label" _label="Property">
                </outline>
                <outline text="pitch_fine" _note="full path:Live.Clip.Clip.pitch_fine\nAvailable for AudioClips only.Read/write access to the pitch fine setting of theAudio Clip, ranging from -500 to 500" type="label" _label="Property">
                </outline>
                <outline text="playing_position" _note="full path:Live.Clip.Clip.playing_position\nConstant access to the current playing position of the clip.The returned value is the position in beats for midi and warped audio clips,or in seconds for unwarped audio clips. Stopped clips will return 0." type="label" _label="Property">
                </outline>
                <outline text="position" _note="full path:Live.Clip.Clip.position\nGet/Set the loop position of this Clip in beats/seconds (unit depends on warping)." type="label" _label="Property">
                </outline>
                <outline text="ram_mode" _note="full path:Live.Clip.Clip.ram_mode\nAvailable for AudioClips only.Read/write access to the Ram mode setting of the Audio Clip" type="label" _label="Property">
                </outline>
                <outline text="sample_length" _note="full path:Live.Clip.Clip.sample_length\nAvailable for AudioClips only.Get the sample length in sample time or -1 if there is no sample available." type="label" _label="Property">
                </outline>
                <outline text="signature_denominator" _note="full path:Live.Clip.Clip.signature_denominator\nGet/Set access to the global signature denominator of the Clip." type="label" _label="Property">
                </outline>
                <outline text="signature_numerator" _note="full path:Live.Clip.Clip.signature_numerator\nGet/Set access to the global signature numerator of the Clip." type="label" _label="Property">
                </outline>
                <outline text="start_marker" _note="full path:Live.Clip.Clip.start_marker\nGet/Set the Clips start marker pos in beats/seconds (unit depends on warping)." type="label" _label="Property">
                </outline>
                <outline text="start_time" _note="full path:Live.Clip.Clip.start_time\nGet the clip's start time offset. For Session View clips, this is the time the clip was started. For Arrangement View clips, this is the offset within the arrangement." type="label" _label="Property">
                </outline>
                <outline text="velocity_amount" _note="full path:Live.Clip.Clip.velocity_amount\nGet/Set access to the velocity to volume amount of the Clip." type="label" _label="Property">
                </outline>
                <outline text="view" _note="full path:Live.Clip.Clip.view\nGet the view of the Clip." type="label" _label="Property">
                </outline>
                <outline text="warp_markers" _note="full path:Live.Clip.Clip.warp_markers\nAvailable for AudioClips only.Get the warp markers for this audio clip." type="label" _label="Property">
                </outline>
                <outline text="warp_mode" _note="full path:Live.Clip.Clip.warp_mode\nAvailable for AudioClips only.Get/Set the warp mode for this audio clip." type="label" _label="Property">
                </outline>
                <outline text="warping" _note="full path:Live.Clip.Clip.warping\nAvailable for AudioClips only.Get/Set if this Clip is timestreched." type="label" _label="Property">
                </outline>
                <outline text="will_record_on_start" _note="full path:Live.Clip.Clip.will_record_on_start\nreturns true if the Clip will record on being started." type="label" _label="Property">
                </outline>
            </outline>
            <outline text="Listeners">
                <outline text="add_color_index_listener()" _note="full path:Live.Clip.Clip.add_color_index_listener()\nadd_color_index_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;color_index&quot; has changed. C++ signature :  void add_color_index_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_color_listener()" _note="full path:Live.Clip.Clip.add_color_listener()\nadd_color_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;color&quot; has changed. C++ signature :  void add_color_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_end_marker_listener()" _note="full path:Live.Clip.Clip.add_end_marker_listener()\nadd_end_marker_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;end_marker&quot; has changed. C++ signature :  void add_end_marker_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_end_time_listener()" _note="full path:Live.Clip.Clip.add_end_time_listener()\nadd_end_time_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;end_time&quot; has changed. C++ signature :  void add_end_time_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_file_path_listener()" _note="full path:Live.Clip.Clip.add_file_path_listener()\nadd_file_path_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;file_path&quot; has changed. C++ signature :  void add_file_path_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_gain_listener()" _note="full path:Live.Clip.Clip.add_gain_listener()\nadd_gain_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;gain&quot; has changed. C++ signature :  void add_gain_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_groove_listener()" _note="full path:Live.Clip.Clip.add_groove_listener()\nadd_groove_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;groove&quot; has changed. C++ signature :  void add_groove_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_has_envelopes_listener()" _note="full path:Live.Clip.Clip.add_has_envelopes_listener()\nadd_has_envelopes_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;has_envelopes&quot; has changed. C++ signature :  void add_has_envelopes_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_is_overdubbing_listener()" _note="full path:Live.Clip.Clip.add_is_overdubbing_listener()\nadd_is_overdubbing_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_overdubbing&quot; has changed. C++ signature :  void add_is_overdubbing_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_is_recording_listener()" _note="full path:Live.Clip.Clip.add_is_recording_listener()\nadd_is_recording_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_recording&quot; has changed. C++ signature :  void add_is_recording_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_launch_mode_listener()" _note="full path:Live.Clip.Clip.add_launch_mode_listener()\nadd_launch_mode_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;launch_mode&quot; has changed. C++ signature :  void add_launch_mode_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_launch_quantization_listener()" _note="full path:Live.Clip.Clip.add_launch_quantization_listener()\nadd_launch_quantization_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;launch_quantization&quot; has changed. C++ signature :  void add_launch_quantization_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_legato_listener()" _note="full path:Live.Clip.Clip.add_legato_listener()\nadd_legato_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;legato&quot; has changed. C++ signature :  void add_legato_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_loop_end_listener()" _note="full path:Live.Clip.Clip.add_loop_end_listener()\nadd_loop_end_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;loop_end&quot; has changed. C++ signature :  void add_loop_end_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_loop_jump_listener()" _note="full path:Live.Clip.Clip.add_loop_jump_listener()\nadd_loop_jump_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;loop_jump&quot; has changed. C++ signature :  void add_loop_jump_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_loop_start_listener()" _note="full path:Live.Clip.Clip.add_loop_start_listener()\nadd_loop_start_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;loop_start&quot; has changed. C++ signature :  void add_loop_start_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_looping_listener()" _note="full path:Live.Clip.Clip.add_looping_listener()\nadd_looping_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;looping&quot; has changed. C++ signature :  void add_looping_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_muted_listener()" _note="full path:Live.Clip.Clip.add_muted_listener()\nadd_muted_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;muted&quot; has changed. C++ signature :  void add_muted_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_name_listener()" _note="full path:Live.Clip.Clip.add_name_listener()\nadd_name_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_notes_listener()" _note="full path:Live.Clip.Clip.add_notes_listener()\nadd_notes_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;notes&quot; has changed. C++ signature :  void add_notes_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_pitch_coarse_listener()" _note="full path:Live.Clip.Clip.add_pitch_coarse_listener()\nadd_pitch_coarse_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;pitch_coarse&quot; has changed. C++ signature :  void add_pitch_coarse_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_pitch_fine_listener()" _note="full path:Live.Clip.Clip.add_pitch_fine_listener()\nadd_pitch_fine_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;pitch_fine&quot; has changed. C++ signature :  void add_pitch_fine_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_playing_position_listener()" _note="full path:Live.Clip.Clip.add_playing_position_listener()\nadd_playing_position_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;playing_position&quot; has changed. C++ signature :  void add_playing_position_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_playing_status_listener()" _note="full path:Live.Clip.Clip.add_playing_status_listener()\nadd_playing_status_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;playing_status&quot; has changed. C++ signature :  void add_playing_status_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_position_listener()" _note="full path:Live.Clip.Clip.add_position_listener()\nadd_position_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;position&quot; has changed. C++ signature :  void add_position_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_ram_mode_listener()" _note="full path:Live.Clip.Clip.add_ram_mode_listener()\nadd_ram_mode_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;ram_mode&quot; has changed. C++ signature :  void add_ram_mode_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_signature_denominator_listener()" _note="full path:Live.Clip.Clip.add_signature_denominator_listener()\nadd_signature_denominator_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;signature_denominator&quot; has changed. C++ signature :  void add_signature_denominator_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_signature_numerator_listener()" _note="full path:Live.Clip.Clip.add_signature_numerator_listener()\nadd_signature_numerator_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;signature_numerator&quot; has changed. C++ signature :  void add_signature_numerator_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_start_marker_listener()" _note="full path:Live.Clip.Clip.add_start_marker_listener()\nadd_start_marker_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;start_marker&quot; has changed. C++ signature :  void add_start_marker_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_velocity_amount_listener()" _note="full path:Live.Clip.Clip.add_velocity_amount_listener()\nadd_velocity_amount_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;velocity_amount&quot; has changed. C++ signature :  void add_velocity_amount_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_warp_markers_listener()" _note="full path:Live.Clip.Clip.add_warp_markers_listener()\nadd_warp_markers_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;warp_markers&quot; has changed. C++ signature :  void add_warp_markers_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_warp_mode_listener()" _note="full path:Live.Clip.Clip.add_warp_mode_listener()\nadd_warp_mode_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;warp_mode&quot; has changed. C++ signature :  void add_warp_mode_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_warping_listener()" _note="full path:Live.Clip.Clip.add_warping_listener()\nadd_warping_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;warping&quot; has changed. C++ signature :  void add_warping_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="color_has_listener()" _note="full path:Live.Clip.Clip.color_has_listener()\ncolor_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;color&quot;. C++ signature :  bool color_has_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="color_index_has_listener()" _note="full path:Live.Clip.Clip.color_index_has_listener()\ncolor_index_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;color_index&quot;. C++ signature :  bool color_index_has_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="end_marker_has_listener()" _note="full path:Live.Clip.Clip.end_marker_has_listener()\nend_marker_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;end_marker&quot;. C++ signature :  bool end_marker_has_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="end_time_has_listener()" _note="full path:Live.Clip.Clip.end_time_has_listener()\nend_time_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;end_time&quot;. C++ signature :  bool end_time_has_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="file_path_has_listener()" _note="full path:Live.Clip.Clip.file_path_has_listener()\nfile_path_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;file_path&quot;. C++ signature :  bool file_path_has_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="gain_has_listener()" _note="full path:Live.Clip.Clip.gain_has_listener()\ngain_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;gain&quot;. C++ signature :  bool gain_has_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="groove_has_listener()" _note="full path:Live.Clip.Clip.groove_has_listener()\ngroove_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;groove&quot;. C++ signature :  bool groove_has_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="has_envelopes_has_listener()" _note="full path:Live.Clip.Clip.has_envelopes_has_listener()\nhas_envelopes_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;has_envelopes&quot;. C++ signature :  bool has_envelopes_has_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="is_overdubbing_has_listener()" _note="full path:Live.Clip.Clip.is_overdubbing_has_listener()\nis_overdubbing_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_overdubbing&quot;. C++ signature :  bool is_overdubbing_has_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="is_recording_has_listener()" _note="full path:Live.Clip.Clip.is_recording_has_listener()\nis_recording_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_recording&quot;. C++ signature :  bool is_recording_has_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="launch_mode_has_listener()" _note="full path:Live.Clip.Clip.launch_mode_has_listener()\nlaunch_mode_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;launch_mode&quot;. C++ signature :  bool launch_mode_has_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="launch_quantization_has_listener()" _note="full path:Live.Clip.Clip.launch_quantization_has_listener()\nlaunch_quantization_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;launch_quantization&quot;. C++ signature :  bool launch_quantization_has_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="legato_has_listener()" _note="full path:Live.Clip.Clip.legato_has_listener()\nlegato_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;legato&quot;. C++ signature :  bool legato_has_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="loop_end_has_listener()" _note="full path:Live.Clip.Clip.loop_end_has_listener()\nloop_end_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;loop_end&quot;. C++ signature :  bool loop_end_has_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="loop_jump_has_listener()" _note="full path:Live.Clip.Clip.loop_jump_has_listener()\nloop_jump_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;loop_jump&quot;. C++ signature :  bool loop_jump_has_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="loop_start_has_listener()" _note="full path:Live.Clip.Clip.loop_start_has_listener()\nloop_start_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;loop_start&quot;. C++ signature :  bool loop_start_has_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="looping_has_listener()" _note="full path:Live.Clip.Clip.looping_has_listener()\nlooping_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;looping&quot;. C++ signature :  bool looping_has_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="muted_has_listener()" _note="full path:Live.Clip.Clip.muted_has_listener()\nmuted_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;muted&quot;. C++ signature :  bool muted_has_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="name_has_listener()" _note="full path:Live.Clip.Clip.name_has_listener()\nname_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="notes_has_listener()" _note="full path:Live.Clip.Clip.notes_has_listener()\nnotes_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;notes&quot;. C++ signature :  bool notes_has_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="pitch_coarse_has_listener()" _note="full path:Live.Clip.Clip.pitch_coarse_has_listener()\npitch_coarse_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;pitch_coarse&quot;. C++ signature :  bool pitch_coarse_has_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="pitch_fine_has_listener()" _note="full path:Live.Clip.Clip.pitch_fine_has_listener()\npitch_fine_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;pitch_fine&quot;. C++ signature :  bool pitch_fine_has_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="playing_position_has_listener()" _note="full path:Live.Clip.Clip.playing_position_has_listener()\nplaying_position_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;playing_position&quot;. C++ signature :  bool playing_position_has_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="playing_status_has_listener()" _note="full path:Live.Clip.Clip.playing_status_has_listener()\nplaying_status_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;playing_status&quot;. C++ signature :  bool playing_status_has_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="position_has_listener()" _note="full path:Live.Clip.Clip.position_has_listener()\nposition_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;position&quot;. C++ signature :  bool position_has_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="ram_mode_has_listener()" _note="full path:Live.Clip.Clip.ram_mode_has_listener()\nram_mode_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;ram_mode&quot;. C++ signature :  bool ram_mode_has_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_color_index_listener()" _note="full path:Live.Clip.Clip.remove_color_index_listener()\nremove_color_index_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;color_index&quot;. C++ signature :  void remove_color_index_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_color_listener()" _note="full path:Live.Clip.Clip.remove_color_listener()\nremove_color_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;color&quot;. C++ signature :  void remove_color_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_end_marker_listener()" _note="full path:Live.Clip.Clip.remove_end_marker_listener()\nremove_end_marker_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;end_marker&quot;. C++ signature :  void remove_end_marker_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_end_time_listener()" _note="full path:Live.Clip.Clip.remove_end_time_listener()\nremove_end_time_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;end_time&quot;. C++ signature :  void remove_end_time_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_file_path_listener()" _note="full path:Live.Clip.Clip.remove_file_path_listener()\nremove_file_path_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;file_path&quot;. C++ signature :  void remove_file_path_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_gain_listener()" _note="full path:Live.Clip.Clip.remove_gain_listener()\nremove_gain_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;gain&quot;. C++ signature :  void remove_gain_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_groove_listener()" _note="full path:Live.Clip.Clip.remove_groove_listener()\nremove_groove_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;groove&quot;. C++ signature :  void remove_groove_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_has_envelopes_listener()" _note="full path:Live.Clip.Clip.remove_has_envelopes_listener()\nremove_has_envelopes_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;has_envelopes&quot;. C++ signature :  void remove_has_envelopes_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_is_overdubbing_listener()" _note="full path:Live.Clip.Clip.remove_is_overdubbing_listener()\nremove_is_overdubbing_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_overdubbing&quot;. C++ signature :  void remove_is_overdubbing_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_is_recording_listener()" _note="full path:Live.Clip.Clip.remove_is_recording_listener()\nremove_is_recording_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_recording&quot;. C++ signature :  void remove_is_recording_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_launch_mode_listener()" _note="full path:Live.Clip.Clip.remove_launch_mode_listener()\nremove_launch_mode_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;launch_mode&quot;. C++ signature :  void remove_launch_mode_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_launch_quantization_listener()" _note="full path:Live.Clip.Clip.remove_launch_quantization_listener()\nremove_launch_quantization_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;launch_quantization&quot;. C++ signature :  void remove_launch_quantization_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_legato_listener()" _note="full path:Live.Clip.Clip.remove_legato_listener()\nremove_legato_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;legato&quot;. C++ signature :  void remove_legato_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_loop_end_listener()" _note="full path:Live.Clip.Clip.remove_loop_end_listener()\nremove_loop_end_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;loop_end&quot;. C++ signature :  void remove_loop_end_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_loop_jump_listener()" _note="full path:Live.Clip.Clip.remove_loop_jump_listener()\nremove_loop_jump_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;loop_jump&quot;. C++ signature :  void remove_loop_jump_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_loop_start_listener()" _note="full path:Live.Clip.Clip.remove_loop_start_listener()\nremove_loop_start_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;loop_start&quot;. C++ signature :  void remove_loop_start_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_looping_listener()" _note="full path:Live.Clip.Clip.remove_looping_listener()\nremove_looping_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;looping&quot;. C++ signature :  void remove_looping_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_muted_listener()" _note="full path:Live.Clip.Clip.remove_muted_listener()\nremove_muted_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;muted&quot;. C++ signature :  void remove_muted_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_name_listener()" _note="full path:Live.Clip.Clip.remove_name_listener()\nremove_name_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_notes_listener()" _note="full path:Live.Clip.Clip.remove_notes_listener()\nremove_notes_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;notes&quot;. C++ signature :  void remove_notes_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_pitch_coarse_listener()" _note="full path:Live.Clip.Clip.remove_pitch_coarse_listener()\nremove_pitch_coarse_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;pitch_coarse&quot;. C++ signature :  void remove_pitch_coarse_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_pitch_fine_listener()" _note="full path:Live.Clip.Clip.remove_pitch_fine_listener()\nremove_pitch_fine_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;pitch_fine&quot;. C++ signature :  void remove_pitch_fine_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_playing_position_listener()" _note="full path:Live.Clip.Clip.remove_playing_position_listener()\nremove_playing_position_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;playing_position&quot;. C++ signature :  void remove_playing_position_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_playing_status_listener()" _note="full path:Live.Clip.Clip.remove_playing_status_listener()\nremove_playing_status_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;playing_status&quot;. C++ signature :  void remove_playing_status_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_position_listener()" _note="full path:Live.Clip.Clip.remove_position_listener()\nremove_position_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;position&quot;. C++ signature :  void remove_position_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_ram_mode_listener()" _note="full path:Live.Clip.Clip.remove_ram_mode_listener()\nremove_ram_mode_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;ram_mode&quot;. C++ signature :  void remove_ram_mode_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_signature_denominator_listener()" _note="full path:Live.Clip.Clip.remove_signature_denominator_listener()\nremove_signature_denominator_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;signature_denominator&quot;. C++ signature :  void remove_signature_denominator_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_signature_numerator_listener()" _note="full path:Live.Clip.Clip.remove_signature_numerator_listener()\nremove_signature_numerator_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;signature_numerator&quot;. C++ signature :  void remove_signature_numerator_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_start_marker_listener()" _note="full path:Live.Clip.Clip.remove_start_marker_listener()\nremove_start_marker_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;start_marker&quot;. C++ signature :  void remove_start_marker_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_velocity_amount_listener()" _note="full path:Live.Clip.Clip.remove_velocity_amount_listener()\nremove_velocity_amount_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;velocity_amount&quot;. C++ signature :  void remove_velocity_amount_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_warp_markers_listener()" _note="full path:Live.Clip.Clip.remove_warp_markers_listener()\nremove_warp_markers_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;warp_markers&quot;. C++ signature :  void remove_warp_markers_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_warp_mode_listener()" _note="full path:Live.Clip.Clip.remove_warp_mode_listener()\nremove_warp_mode_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;warp_mode&quot;. C++ signature :  void remove_warp_mode_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_warping_listener()" _note="full path:Live.Clip.Clip.remove_warping_listener()\nremove_warping_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;warping&quot;. C++ signature :  void remove_warping_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="signature_denominator_has_listener()" _note="full path:Live.Clip.Clip.signature_denominator_has_listener()\nsignature_denominator_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;signature_denominator&quot;. C++ signature :  bool signature_denominator_has_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="signature_numerator_has_listener()" _note="full path:Live.Clip.Clip.signature_numerator_has_listener()\nsignature_numerator_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;signature_numerator&quot;. C++ signature :  bool signature_numerator_has_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="start_marker_has_listener()" _note="full path:Live.Clip.Clip.start_marker_has_listener()\nstart_marker_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;start_marker&quot;. C++ signature :  bool start_marker_has_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="velocity_amount_has_listener()" _note="full path:Live.Clip.Clip.velocity_amount_has_listener()\nvelocity_amount_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;velocity_amount&quot;. C++ signature :  bool velocity_amount_has_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="warp_markers_has_listener()" _note="full path:Live.Clip.Clip.warp_markers_has_listener()\nwarp_markers_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;warp_markers&quot;. C++ signature :  bool warp_markers_has_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="warp_mode_has_listener()" _note="full path:Live.Clip.Clip.warp_mode_has_listener()\nwarp_mode_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;warp_mode&quot;. C++ signature :  bool warp_mode_has_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="warping_has_listener()" _note="full path:Live.Clip.Clip.warping_has_listener()\nwarping_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;warping&quot;. C++ signature :  bool warping_has_listener(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
            </outline>
            <outline text="Methods">
                <outline text="add_new_notes()" _note="full path:Live.Clip.Clip.add_new_notes()\nadd_new_notes( (Clip)arg1, (object)arg2) -> None : Expects a Python iterable holding a number of Live.Clip.MidiNoteSpecification objects. The objects will be used to construct new notes in the clip. C++ signature :  void add_new_notes(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="Method">
                </outline>
                <outline text="apply_note_modifications()" _note="full path:Live.Clip.Clip.apply_note_modifications()\napply_note_modifications( (Clip)arg1, (MidiNoteVector)arg2) -> None : Expects a list of notes as returned from get_notes_extended. The content of the list will be used to modify existing notes in the clip, based on matching note IDs. This function should be used when modifying existing notes, e.g. changing the velocity or start time. The function ensures that per-note events attached to the modified notes are preserved. This is NOT the case when replacing notes via a combination of remove_notes_extended and add_new_notes. The given list can be a subset of the notes in the clip, but it must not contain any notes that are not present in the clip.  C++ signature :  void apply_note_modifications(TPyHandle<AClip>,std::__1::vector<NClipApi::TNoteInfo, std::__1::allocator<NClipApi::TNoteInfo> >)" type="label" _label="Method">
                </outline>
                <outline text="automation_envelope()" _note="full path:Live.Clip.Clip.automation_envelope()\nautomation_envelope( (Clip)arg1, (DeviceParameter)arg2) -> AutomationEnvelope : Return the envelope for the given parameter.Returns None if the envelope doesn't exist.Returns None for Arrangement clips.Returns None for parameters from a different track. C++ signature :  TWeakPtr<AAutomation> automation_envelope(TPyHandle<AClip>,TPyHandle<ATimeableValue>)" type="label" _label="Method">
                </outline>
                <outline text="beat_to_sample_time()" _note="full path:Live.Clip.Clip.beat_to_sample_time()\nbeat_to_sample_time( (Clip)self, (float)beat_time) -> float : Available for AudioClips only. Converts the given beat time to sample time. Raises an error if the sample is not warped. C++ signature :  double beat_to_sample_time(TPyHandle<AClip>,double)" type="label" _label="Method">
                </outline>
                <outline text="clear_all_envelopes()" _note="full path:Live.Clip.Clip.clear_all_envelopes()\nclear_all_envelopes( (Clip)arg1) -> None : Clears all envelopes for this clip. C++ signature :  void clear_all_envelopes(TPyHandle<AClip>)" type="label" _label="Method">
                </outline>
                <outline text="clear_envelope()" _note="full path:Live.Clip.Clip.clear_envelope()\nclear_envelope( (Clip)arg1, (DeviceParameter)arg2) -> None : Clears the envelope of this clips given parameter. C++ signature :  void clear_envelope(TPyHandle<AClip>,TPyHandle<ATimeableValue>)" type="label" _label="Method">
                </outline>
                <outline text="create_automation_envelope()" _note="full path:Live.Clip.Clip.create_automation_envelope()\ncreate_automation_envelope( (Clip)arg1, (DeviceParameter)arg2) -> AutomationEnvelope : Creates an envelope for a given parameter and returns it.This should only be used if the envelope doesn't exist.Raises an error if the envelope can't be created. C++ signature :  TWeakPtr<AAutomation> create_automation_envelope(TPyHandle<AClip>,TPyHandle<ATimeableValue>)" type="label" _label="Method">
                </outline>
                <outline text="crop()" _note="full path:Live.Clip.Clip.crop()\ncrop( (Clip)arg1) -> None : Crops the clip. The region that is cropped depends on whether the clip is looped or not. If looped, the region outside of the loop is removed. If not looped, the region outside the start and end markers is removed. C++ signature :  void crop(TPyHandle<AClip>)" type="label" _label="Method">
                </outline>
                <outline text="deselect_all_notes()" _note="full path:Live.Clip.Clip.deselect_all_notes()\ndeselect_all_notes( (Clip)arg1) -> None : De-selects all notes present in the clip. C++ signature :  void deselect_all_notes(TPyHandle<AClip>)" type="label" _label="Method">
                </outline>
                <outline text="duplicate_loop()" _note="full path:Live.Clip.Clip.duplicate_loop()\nduplicate_loop( (Clip)arg1) -> None : Make the loop two times longer and duplicates notes and envelopes. Duplicates the clip start/end range if the clip is not looped. C++ signature :  void duplicate_loop(TPyHandle<AClip>)" type="label" _label="Method">
                </outline>
                <outline text="duplicate_region()" _note="full path:Live.Clip.Clip.duplicate_region()\nduplicate_region( (Clip)self, (float)region_start, (float)region_length, (float)destination_time [, (int)pitch=-1 [, (int)transposition_amount=0]]) -> None : Duplicate the notes in the specified region to the destination_time. Only notes of the specified pitch are duplicated or all if pitch is -1. If the transposition_amount is not 0, the notes in the region will be transposed by the transpose_amount of semitones.Raises an error on audio clips. C++ signature :  void duplicate_region(TPyHandle<AClip>,double,double,double [,int=-1 [,int=0]])" type="label" _label="Method">
                </outline>
                <outline text="fire()" _note="full path:Live.Clip.Clip.fire()\nfire( (Clip)arg1) -> None : (Re)Start playing this Clip. C++ signature :  void fire(TPyHandle<AClip>)" type="label" _label="Method">
                </outline>
                <outline text="get_notes()" _note="full path:Live.Clip.Clip.get_notes()\nget_notes( (Clip)self, (float)from_time, (int)from_pitch, (float)time_span, (int)pitch_span) -> tuple : Returns a tuple of tuples where each inner tuple represents a note starting in the given pitch- and time range. The inner tuple contains pitch, time, duration, velocity, and mute state. C++ signature :  boost::python::tuple get_notes(TPyHandle<AClip>,double,int,double,int)" type="label" _label="Method">
                </outline>
                <outline text="get_notes_by_id()" _note="full path:Live.Clip.Clip.get_notes_by_id()\nget_notes_by_id( (Clip)arg1, (object)arg2) -> MidiNoteVector : Return a list of MIDI notes matching the given note IDs.  C++ signature :  std::__1::vector<NClipApi::TNoteInfo, std::__1::allocator<NClipApi::TNoteInfo> > get_notes_by_id(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="Method">
                </outline>
                <outline text="get_notes_extended()" _note="full path:Live.Clip.Clip.get_notes_extended()\nget_notes_extended( (Clip)arg1, (int)from_pitch, (int)pitch_span, (float)from_time, (float)time_span) -> MidiNoteVector : Returns a list of MIDI notes from the given pitch and time range. Each note is represented by a Live.Clip.MidiNote object. The returned list can be modified freely, but modifications will not be reflected in the MIDI clip until apply_note_modifications is called. C++ signature :  std::__1::vector<NClipApi::TNoteInfo, std::__1::allocator<NClipApi::TNoteInfo> > get_notes_extended(TPyHandle<AClip>,int,int,double,double)" type="label" _label="Method">
                </outline>
                <outline text="get_selected_notes()" _note="full path:Live.Clip.Clip.get_selected_notes()\nget_selected_notes( (Clip)arg1) -> tuple : Returns a tuple of tuples where each inner tuple represents a selected note. The inner tuple contains pitch, time, duration, velocity, and mute state. C++ signature :  boost::python::tuple get_selected_notes(TPyHandle<AClip>)" type="label" _label="Method">
                </outline>
                <outline text="get_selected_notes_extended()" _note="full path:Live.Clip.Clip.get_selected_notes_extended()\nget_selected_notes_extended( (Clip)arg1) -> MidiNoteVector : Returns a list of all MIDI notes from the clip that are currently selected. Each note is represented by a Live.Clip.MidiNote object. The returned list can be modified freely, but modifications will not be reflected in the MIDI clip until apply_note_modifications is called. C++ signature :  std::__1::vector<NClipApi::TNoteInfo, std::__1::allocator<NClipApi::TNoteInfo> > get_selected_notes_extended(TPyHandle<AClip>)" type="label" _label="Method">
                </outline>
                <outline text="move_playing_pos()" _note="full path:Live.Clip.Clip.move_playing_pos()\nmove_playing_pos( (Clip)arg1, (float)arg2) -> None : Jump forward or backward by the specified relative amount in beats. Will do nothing, if the Clip is not playing. C++ signature :  void move_playing_pos(TPyHandle<AClip>,double)" type="label" _label="Method">
                </outline>
                <outline text="quantize()" _note="full path:Live.Clip.Clip.quantize()\nquantize( (Clip)arg1, (int)arg2, (float)arg3) -> None : Quantize all notes in a clip or align warp markers. C++ signature :  void quantize(TPyHandle<AClip>,int,float)" type="label" _label="Method">
                </outline>
                <outline text="quantize_pitch()" _note="full path:Live.Clip.Clip.quantize_pitch()\nquantize_pitch( (Clip)arg1, (int)arg2, (int)arg3, (float)arg4) -> None : Quantize all the notes of a given pitch.  Raises an error on audio clips. C++ signature :  void quantize_pitch(TPyHandle<AClip>,int,int,float)" type="label" _label="Method">
                </outline>
                <outline text="remove_notes()" _note="full path:Live.Clip.Clip.remove_notes()\nremove_notes( (Clip)arg1, (float)arg2, (int)arg3, (float)arg4, (int)arg5) -> None : Delete all notes starting in the given pitch- and time range. C++ signature :  void remove_notes(TPyHandle<AClip>,double,int,double,int)" type="label" _label="Method">
                </outline>
                <outline text="remove_notes_by_id()" _note="full path:Live.Clip.Clip.remove_notes_by_id()\nremove_notes_by_id( (Clip)arg1, (object)arg2) -> None : Delete all notes matching the given note IDs. This function should NOT be used to implement modification of existing notes (i.e. in combination with add_new_notes), as that leads to loss of per-note events. apply_note_modifications must be used instead for modifying existing notes. C++ signature :  void remove_notes_by_id(TPyHandle<AClip>,boost::python::api::object)" type="label" _label="Method">
                </outline>
                <outline text="remove_notes_extended()" _note="full path:Live.Clip.Clip.remove_notes_extended()\nremove_notes_extended( (Clip)arg1, (int)from_pitch, (int)pitch_span, (float)from_time, (float)time_span) -> None : Delete all notes starting in the given pitch and time range. This function should NOT be used to implement modification of existing notes (i.e. in combination with add_new_notes), as that leads to loss of per-note events. apply_note_modifications must be used instead for modifying existing notes. C++ signature :  void remove_notes_extended(TPyHandle<AClip>,int,int,double,double)" type="label" _label="Method">
                </outline>
                <outline text="replace_selected_notes()" _note="full path:Live.Clip.Clip.replace_selected_notes()\nreplace_selected_notes( (Clip)arg1, (tuple)arg2) -> None : Called with a tuple of tuples where each inner tuple represents a note in the same format as returned by get_selected_notes. The notes described that way will then be used to replace the old selection. C++ signature :  void replace_selected_notes(TPyHandle<AClip>,boost::python::tuple)" type="label" _label="Method">
                </outline>
                <outline text="sample_to_beat_time()" _note="full path:Live.Clip.Clip.sample_to_beat_time()\nsample_to_beat_time( (Clip)self, (float)sample_time) -> float : Available for AudioClips only. Converts the given sample time to beat time. Raises an error if the sample is not warped. C++ signature :  double sample_to_beat_time(TPyHandle<AClip>,double)" type="label" _label="Method">
                </outline>
                <outline text="scrub()" _note="full path:Live.Clip.Clip.scrub()\nscrub( (Clip)self, (float)scrub_position) -> None : Scrubs inside a clip. scrub_position defines the position in beats that the scrub will start from. The scrub will continue until stop_scrub is called. Global quantization applies to the scrub's position and length. C++ signature :  void scrub(TPyHandle<AClip>,double)" type="label" _label="Method">
                </outline>
                <outline text="seconds_to_sample_time()" _note="full path:Live.Clip.Clip.seconds_to_sample_time()\nseconds_to_sample_time( (Clip)self, (float)seconds) -> float : Available for AudioClips only. Converts the given seconds to sample time. Raises an error if the sample is warped. C++ signature :  double seconds_to_sample_time(TPyHandle<AClip>,double)" type="label" _label="Method">
                </outline>
                <outline text="select_all_notes()" _note="full path:Live.Clip.Clip.select_all_notes()\nselect_all_notes( (Clip)arg1) -> None : Selects all notes present in the clip. C++ signature :  void select_all_notes(TPyHandle<AClip>)" type="label" _label="Method">
                </outline>
                <outline text="set_fire_button_state()" _note="full path:Live.Clip.Clip.set_fire_button_state()\nset_fire_button_state( (Clip)arg1, (bool)arg2) -> None : Set the clip's fire button state directly. Supports all launch modes. C++ signature :  void set_fire_button_state(TPyHandle<AClip>,bool)" type="label" _label="Method">
                </outline>
                <outline text="set_notes()" _note="full path:Live.Clip.Clip.set_notes()\nset_notes( (Clip)arg1, (tuple)arg2) -> None : Called with a tuple of tuples where each inner tuple represents a note in the same format as returned by get_notes. The notes described that way will then be added to the clip. C++ signature :  void set_notes(TPyHandle<AClip>,boost::python::tuple)" type="label" _label="Method">
                </outline>
                <outline text="stop()" _note="full path:Live.Clip.Clip.stop()\nstop( (Clip)arg1) -> None : Stop playing this Clip. C++ signature :  void stop(TPyHandle<AClip>)" type="label" _label="Method">
                </outline>
                <outline text="stop_scrub()" _note="full path:Live.Clip.Clip.stop_scrub()\nstop_scrub( (Clip)arg1) -> None : Stops the current scrub. C++ signature :  void stop_scrub(TPyHandle<AClip>)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
        <outline text="ClipLaunchQuantization" _note="full path:Live.Clip.ClipLaunchQuantization\n" type="label" _label="Class">
            <outline text="Values">
                <outline text="q_2_bars" _note="full path:Live.Clip.ClipLaunchQuantization.q_2_bars\n" type="label" _label="Value">
                </outline>
                <outline text="q_4_bars" _note="full path:Live.Clip.ClipLaunchQuantization.q_4_bars\n" type="label" _label="Value">
                </outline>
                <outline text="q_8_bars" _note="full path:Live.Clip.ClipLaunchQuantization.q_8_bars\n" type="label" _label="Value">
                </outline>
                <outline text="q_bar" _note="full path:Live.Clip.ClipLaunchQuantization.q_bar\n" type="label" _label="Value">
                </outline>
                <outline text="q_eighth" _note="full path:Live.Clip.ClipLaunchQuantization.q_eighth\n" type="label" _label="Value">
                </outline>
                <outline text="q_eighth_triplet" _note="full path:Live.Clip.ClipLaunchQuantization.q_eighth_triplet\n" type="label" _label="Value">
                </outline>
                <outline text="q_global" _note="full path:Live.Clip.ClipLaunchQuantization.q_global\n" type="label" _label="Value">
                </outline>
                <outline text="q_half" _note="full path:Live.Clip.ClipLaunchQuantization.q_half\n" type="label" _label="Value">
                </outline>
                <outline text="q_half_triplet" _note="full path:Live.Clip.ClipLaunchQuantization.q_half_triplet\n" type="label" _label="Value">
                </outline>
                <outline text="q_none" _note="full path:Live.Clip.ClipLaunchQuantization.q_none\n" type="label" _label="Value">
                </outline>
                <outline text="q_quarter" _note="full path:Live.Clip.ClipLaunchQuantization.q_quarter\n" type="label" _label="Value">
                </outline>
                <outline text="q_quarter_triplet" _note="full path:Live.Clip.ClipLaunchQuantization.q_quarter_triplet\n" type="label" _label="Value">
                </outline>
                <outline text="q_sixteenth" _note="full path:Live.Clip.ClipLaunchQuantization.q_sixteenth\n" type="label" _label="Value">
                </outline>
                <outline text="q_sixteenth_triplet" _note="full path:Live.Clip.ClipLaunchQuantization.q_sixteenth_triplet\n" type="label" _label="Value">
                </outline>
                <outline text="q_thirtysecond" _note="full path:Live.Clip.ClipLaunchQuantization.q_thirtysecond\n" type="label" _label="Value">
                </outline>
            </outline>
        </outline>
        <outline text="GridQuantization" _note="full path:Live.Clip.GridQuantization\n" type="label" _label="Class">
            <outline text="Values">
                <outline text="count" _note="full path:Live.Clip.GridQuantization.count\n" type="label" _label="Value">
                </outline>
                <outline text="g_2_bars" _note="full path:Live.Clip.GridQuantization.g_2_bars\n" type="label" _label="Value">
                </outline>
                <outline text="g_4_bars" _note="full path:Live.Clip.GridQuantization.g_4_bars\n" type="label" _label="Value">
                </outline>
                <outline text="g_8_bars" _note="full path:Live.Clip.GridQuantization.g_8_bars\n" type="label" _label="Value">
                </outline>
                <outline text="g_bar" _note="full path:Live.Clip.GridQuantization.g_bar\n" type="label" _label="Value">
                </outline>
                <outline text="g_eighth" _note="full path:Live.Clip.GridQuantization.g_eighth\n" type="label" _label="Value">
                </outline>
                <outline text="g_half" _note="full path:Live.Clip.GridQuantization.g_half\n" type="label" _label="Value">
                </outline>
                <outline text="g_quarter" _note="full path:Live.Clip.GridQuantization.g_quarter\n" type="label" _label="Value">
                </outline>
                <outline text="g_sixteenth" _note="full path:Live.Clip.GridQuantization.g_sixteenth\n" type="label" _label="Value">
                </outline>
                <outline text="g_thirtysecond" _note="full path:Live.Clip.GridQuantization.g_thirtysecond\n" type="label" _label="Value">
                </outline>
                <outline text="no_grid" _note="full path:Live.Clip.GridQuantization.no_grid\n" type="label" _label="Value">
                </outline>
            </outline>
        </outline>
        <outline text="LaunchMode" _note="full path:Live.Clip.LaunchMode\n" type="label" _label="Class">
            <outline text="Values">
                <outline text="gate" _note="full path:Live.Clip.LaunchMode.gate\n" type="label" _label="Value">
                </outline>
                <outline text="repeat" _note="full path:Live.Clip.LaunchMode.repeat\n" type="label" _label="Value">
                </outline>
                <outline text="toggle" _note="full path:Live.Clip.LaunchMode.toggle\n" type="label" _label="Value">
                </outline>
                <outline text="trigger" _note="full path:Live.Clip.LaunchMode.trigger\n" type="label" _label="Value">
                </outline>
            </outline>
        </outline>
        <outline text="MidiNote" _note="full path:Live.Clip.MidiNote\nAn object representing a MIDI Note" type="label" _label="Class">
            <outline text="Properties">
                <outline text="duration" _note="full path:Live.Clip.MidiNote.duration\n" type="label" _label="Property">
                </outline>
                <outline text="mute" _note="full path:Live.Clip.MidiNote.mute\n" type="label" _label="Property">
                </outline>
                <outline text="note_id" _note="full path:Live.Clip.MidiNote.note_id\nA numerical ID that's unique within the originating clip of the note. Not to beused directly, but important for other API calls, namely apply_note_modifications." type="label" _label="Property">
                </outline>
                <outline text="pitch" _note="full path:Live.Clip.MidiNote.pitch\n" type="label" _label="Property">
                </outline>
                <outline text="probability" _note="full path:Live.Clip.MidiNote.probability\n" type="label" _label="Property">
                </outline>
                <outline text="release_velocity" _note="full path:Live.Clip.MidiNote.release_velocity\n" type="label" _label="Property">
                </outline>
                <outline text="start_time" _note="full path:Live.Clip.MidiNote.start_time\n" type="label" _label="Property">
                </outline>
                <outline text="velocity" _note="full path:Live.Clip.MidiNote.velocity\n" type="label" _label="Property">
                </outline>
                <outline text="velocity_deviation" _note="full path:Live.Clip.MidiNote.velocity_deviation\n" type="label" _label="Property">
                </outline>
            </outline>
        </outline>
        <outline text="MidiNoteSpecification" _note="full path:Live.Clip.MidiNoteSpecification\nAn object specifying the data for creating a MIDI note. To be used with the add_new_notes function." type="label" _label="Class">
        </outline>
        <outline text="MidiNoteVector" _note="full path:Live.Clip.MidiNoteVector\nA container for holding MIDI notes from Live." type="label" _label="Class">
            <outline text="Methods">
                <outline text="append()" _note="full path:Live.Clip.MidiNoteVector.append()\nappend( (MidiNoteVector)arg1, (object)arg2) -> None : C++ signature :  void append(std::__1::vector<NClipApi::TNoteInfo, std::__1::allocator<NClipApi::TNoteInfo> > {lvalue},boost::python::api::object)" type="label" _label="Method">
                </outline>
                <outline text="extend()" _note="full path:Live.Clip.MidiNoteVector.extend()\nextend( (MidiNoteVector)arg1, (object)arg2) -> None : C++ signature :  void extend(std::__1::vector<NClipApi::TNoteInfo, std::__1::allocator<NClipApi::TNoteInfo> > {lvalue},boost::python::api::object)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
        <outline text="WarpMarker" _note="full path:Live.Clip.WarpMarker\nThis class represents a WarpMarker type." type="label" _label="Class">
            <outline text="Properties">
                <outline text="beat_time" _note="full path:Live.Clip.WarpMarker.beat_time\nA WarpMarker's beat time." type="label" _label="Property">
                </outline>
                <outline text="sample_time" _note="full path:Live.Clip.WarpMarker.sample_time\nA WarpMarker's sample time." type="label" _label="Property">
                </outline>
            </outline>
        </outline>
        <outline text="WarpMarkerVector" _note="full path:Live.Clip.WarpMarkerVector\nA container for returning warp markers from Live." type="label" _label="Class">
            <outline text="Methods">
                <outline text="append()" _note="full path:Live.Clip.WarpMarkerVector.append()\nappend( (WarpMarkerVector)arg1, (object)arg2) -> None : C++ signature :  void append(std::__1::vector<NApiHelpers::TWarpMarker, std::__1::allocator<NApiHelpers::TWarpMarker> > {lvalue},boost::python::api::object)" type="label" _label="Method">
                </outline>
                <outline text="extend()" _note="full path:Live.Clip.WarpMarkerVector.extend()\nextend( (WarpMarkerVector)arg1, (object)arg2) -> None : C++ signature :  void extend(std::__1::vector<NApiHelpers::TWarpMarker, std::__1::allocator<NApiHelpers::TWarpMarker> > {lvalue},boost::python::api::object)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
        <outline text="WarpMode" _note="full path:Live.Clip.WarpMode\n" type="label" _label="Class">
            <outline text="Values">
                <outline text="beats" _note="full path:Live.Clip.WarpMode.beats\n" type="label" _label="Value">
                </outline>
                <outline text="complex" _note="full path:Live.Clip.WarpMode.complex\n" type="label" _label="Value">
                </outline>
                <outline text="complex_pro" _note="full path:Live.Clip.WarpMode.complex_pro\n" type="label" _label="Value">
                </outline>
                <outline text="count" _note="full path:Live.Clip.WarpMode.count\n" type="label" _label="Value">
                </outline>
                <outline text="repitch" _note="full path:Live.Clip.WarpMode.repitch\n" type="label" _label="Value">
                </outline>
                <outline text="rex" _note="full path:Live.Clip.WarpMode.rex\n" type="label" _label="Value">
                </outline>
                <outline text="texture" _note="full path:Live.Clip.WarpMode.texture\n" type="label" _label="Value">
                </outline>
                <outline text="tones" _note="full path:Live.Clip.WarpMode.tones\n" type="label" _label="Value">
                </outline>
            </outline>
        </outline>
    </outline>
    <outline text="ClipSlot" _note="full path:Live.ClipSlot\n" type="label" _label="Module">
        <outline text="ClipSlot" _note="full path:Live.ClipSlot.ClipSlot\nThis class represents an entry in Lives Session view matrix." type="label" _label="Class">
            <outline text="Properties">
                <outline text="_live_ptr" _note="full path:Live.ClipSlot.ClipSlot._live_ptr\n" type="label" _label="Property">
                </outline>
                <outline text="canonical_parent" _note="full path:Live.ClipSlot.ClipSlot.canonical_parent\nGet the canonical parent of the ClipSlot." type="label" _label="Property">
                </outline>
                <outline text="clip" _note="full path:Live.ClipSlot.ClipSlot.clip\nReturns the Clip which this clipslots currently owns. Might be None." type="label" _label="Property">
                </outline>
                <outline text="color" _note="full path:Live.ClipSlot.ClipSlot.color\nReturns the canonical color for the clip slot or None if it does not exist." type="label" _label="Property">
                </outline>
                <outline text="color_index" _note="full path:Live.ClipSlot.ClipSlot.color_index\nReturns the canonical color index for the clip slot or None if it does not exist." type="label" _label="Property">
                </outline>
                <outline text="controls_other_clips" _note="full path:Live.ClipSlot.ClipSlot.controls_other_clips\nReturns true if firing this slot will fire clips in other slots.Can only be true for slots in group tracks." type="label" _label="Property">
                </outline>
                <outline text="has_clip" _note="full path:Live.ClipSlot.ClipSlot.has_clip\nReturns true if this Clipslot owns a Clip." type="label" _label="Property">
                </outline>
                <outline text="has_stop_button" _note="full path:Live.ClipSlot.ClipSlot.has_stop_button\nGet/Set if this Clip has a stop button, which will, if fired, stop anyother Clip that is currently playing the Track we do belong to." type="label" _label="Property">
                </outline>
                <outline text="is_group_slot" _note="full path:Live.ClipSlot.ClipSlot.is_group_slot\nReturns whether this clip slot is a group track slot (group slot)." type="label" _label="Property">
                </outline>
                <outline text="is_playing" _note="full path:Live.ClipSlot.ClipSlot.is_playing\nReturns whether the clip associated with the slot is playing." type="label" _label="Property">
                </outline>
                <outline text="is_recording" _note="full path:Live.ClipSlot.ClipSlot.is_recording\nReturns whether the clip associated with the slot is recording." type="label" _label="Property">
                </outline>
                <outline text="is_triggered" _note="full path:Live.ClipSlot.ClipSlot.is_triggered\nConst access to the triggering state of the clip slot." type="label" _label="Property">
                </outline>
                <outline text="playing_status" _note="full path:Live.ClipSlot.ClipSlot.playing_status\nConst access to the playing state of the clip slot.Can be either stopped, playing, or recording." type="label" _label="Property">
                </outline>
                <outline text="will_record_on_start" _note="full path:Live.ClipSlot.ClipSlot.will_record_on_start\nreturns true if the clip slot will record on being fired." type="label" _label="Property">
                </outline>
            </outline>
            <outline text="Listeners">
                <outline text="add_color_index_listener()" _note="full path:Live.ClipSlot.ClipSlot.add_color_index_listener()\nadd_color_index_listener( (ClipSlot)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;color_index&quot; has changed. C++ signature :  void add_color_index_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_color_listener()" _note="full path:Live.ClipSlot.ClipSlot.add_color_listener()\nadd_color_listener( (ClipSlot)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;color&quot; has changed. C++ signature :  void add_color_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_controls_other_clips_listener()" _note="full path:Live.ClipSlot.ClipSlot.add_controls_other_clips_listener()\nadd_controls_other_clips_listener( (ClipSlot)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;controls_other_clips&quot; has changed. C++ signature :  void add_controls_other_clips_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_has_clip_listener()" _note="full path:Live.ClipSlot.ClipSlot.add_has_clip_listener()\nadd_has_clip_listener( (ClipSlot)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;has_clip&quot; has changed. C++ signature :  void add_has_clip_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_has_stop_button_listener()" _note="full path:Live.ClipSlot.ClipSlot.add_has_stop_button_listener()\nadd_has_stop_button_listener( (ClipSlot)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;has_stop_button&quot; has changed. C++ signature :  void add_has_stop_button_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_is_triggered_listener()" _note="full path:Live.ClipSlot.ClipSlot.add_is_triggered_listener()\nadd_is_triggered_listener( (ClipSlot)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_triggered&quot; has changed. C++ signature :  void add_is_triggered_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_playing_status_listener()" _note="full path:Live.ClipSlot.ClipSlot.add_playing_status_listener()\nadd_playing_status_listener( (ClipSlot)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;playing_status&quot; has changed. C++ signature :  void add_playing_status_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="color_has_listener()" _note="full path:Live.ClipSlot.ClipSlot.color_has_listener()\ncolor_has_listener( (ClipSlot)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;color&quot;. C++ signature :  bool color_has_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="color_index_has_listener()" _note="full path:Live.ClipSlot.ClipSlot.color_index_has_listener()\ncolor_index_has_listener( (ClipSlot)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;color_index&quot;. C++ signature :  bool color_index_has_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="controls_other_clips_has_listener()" _note="full path:Live.ClipSlot.ClipSlot.controls_other_clips_has_listener()\ncontrols_other_clips_has_listener( (ClipSlot)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;controls_other_clips&quot;. C++ signature :  bool controls_other_clips_has_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="has_clip_has_listener()" _note="full path:Live.ClipSlot.ClipSlot.has_clip_has_listener()\nhas_clip_has_listener( (ClipSlot)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;has_clip&quot;. C++ signature :  bool has_clip_has_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="has_stop_button_has_listener()" _note="full path:Live.ClipSlot.ClipSlot.has_stop_button_has_listener()\nhas_stop_button_has_listener( (ClipSlot)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;has_stop_button&quot;. C++ signature :  bool has_stop_button_has_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="is_triggered_has_listener()" _note="full path:Live.ClipSlot.ClipSlot.is_triggered_has_listener()\nis_triggered_has_listener( (ClipSlot)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_triggered&quot;. C++ signature :  bool is_triggered_has_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="playing_status_has_listener()" _note="full path:Live.ClipSlot.ClipSlot.playing_status_has_listener()\nplaying_status_has_listener( (ClipSlot)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;playing_status&quot;. C++ signature :  bool playing_status_has_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_color_index_listener()" _note="full path:Live.ClipSlot.ClipSlot.remove_color_index_listener()\nremove_color_index_listener( (ClipSlot)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;color_index&quot;. C++ signature :  void remove_color_index_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_color_listener()" _note="full path:Live.ClipSlot.ClipSlot.remove_color_listener()\nremove_color_listener( (ClipSlot)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;color&quot;. C++ signature :  void remove_color_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_controls_other_clips_listener()" _note="full path:Live.ClipSlot.ClipSlot.remove_controls_other_clips_listener()\nremove_controls_other_clips_listener( (ClipSlot)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;controls_other_clips&quot;. C++ signature :  void remove_controls_other_clips_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_has_clip_listener()" _note="full path:Live.ClipSlot.ClipSlot.remove_has_clip_listener()\nremove_has_clip_listener( (ClipSlot)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;has_clip&quot;. C++ signature :  void remove_has_clip_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_has_stop_button_listener()" _note="full path:Live.ClipSlot.ClipSlot.remove_has_stop_button_listener()\nremove_has_stop_button_listener( (ClipSlot)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;has_stop_button&quot;. C++ signature :  void remove_has_stop_button_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_is_triggered_listener()" _note="full path:Live.ClipSlot.ClipSlot.remove_is_triggered_listener()\nremove_is_triggered_listener( (ClipSlot)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_triggered&quot;. C++ signature :  void remove_is_triggered_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_playing_status_listener()" _note="full path:Live.ClipSlot.ClipSlot.remove_playing_status_listener()\nremove_playing_status_listener( (ClipSlot)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;playing_status&quot;. C++ signature :  void remove_playing_status_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
            </outline>
            <outline text="Methods">
                <outline text="create_clip()" _note="full path:Live.ClipSlot.ClipSlot.create_clip()\ncreate_clip( (ClipSlot)arg1, (float)arg2) -> None : Creates an empty clip with the given length in the slot. Throws an error when called on non-empty slots or slots in non-MIDI tracks. C++ signature :  void create_clip(TPyHandle<AGroupAndClipSlotBase>,double)" type="label" _label="Method">
                </outline>
                <outline text="delete_clip()" _note="full path:Live.ClipSlot.ClipSlot.delete_clip()\ndelete_clip( (ClipSlot)arg1) -> None : Removes the clip contained in the slot. Raises an exception if the slot was empty. C++ signature :  void delete_clip(TPyHandle<AGroupAndClipSlotBase>)" type="label" _label="Method">
                </outline>
                <outline text="duplicate_clip_to()" _note="full path:Live.ClipSlot.ClipSlot.duplicate_clip_to()\nduplicate_clip_to( (ClipSlot)arg1, (ClipSlot)arg2) -> None : Duplicates the slot's clip to the passed in target slot. Overrides the target's clip if it's not empty. Raises an exception if the (source) slot itself is empty, or if source and target have different track types (audio vs. MIDI). Also raises if the source or target slot is in a group track (so called group slot). C++ signature :  void duplicate_clip_to(TPyHandle<AGroupAndClipSlotBase>,TPyHandle<AGroupAndClipSlotBase>)" type="label" _label="Method">
                </outline>
                <outline text="fire()" _note="full path:Live.ClipSlot.ClipSlot.fire()\nfire( (ClipSlot)arg1) -> None : Fire a Clip if this Clipslot owns one, else trigger the stop button, if we have one. C++ signature :  void fire(TPyHandle<AGroupAndClipSlotBase>)fire( (ClipSlot)self [, (float)record_length=1.7976931348623157e+308 [, (int)launch_quantization=-2147483648 [, (bool)force_legato=False]]]) -> None : If 'record_length' is passed, the clip will be refired after the given recording length.  Raises an error if the slot owns a clip. 'launch_quantization' determines the quantization of global transport that is applied overriding the value in the song. 'force_legato' will make the clip play inmediatelly. The playhead will be moved to keep the clip synchronized. C++ signature :  void fire(TPyHandle<AGroupAndClipSlotBase> [,double=1.7976931348623157e+308 [,int=-2147483648 [,bool=False]]])" type="label" _label="Method">
                </outline>
                <outline text="set_fire_button_state()" _note="full path:Live.ClipSlot.ClipSlot.set_fire_button_state()\nset_fire_button_state( (ClipSlot)arg1, (bool)arg2) -> None : Set the clipslot's fire button state directly. Supports all launch modes. C++ signature :  void set_fire_button_state(TPyHandle<AGroupAndClipSlotBase>,bool)" type="label" _label="Method">
                </outline>
                <outline text="stop()" _note="full path:Live.ClipSlot.ClipSlot.stop()\nstop( (ClipSlot)arg1) -> None : Stop playing the contained Clip, if there is a Clip and its currently playing. C++ signature :  void stop(TPyHandle<AGroupAndClipSlotBase>)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
        <outline text="ClipSlotPlayingState" _note="full path:Live.ClipSlot.ClipSlotPlayingState\n" type="label" _label="Class">
            <outline text="Values">
                <outline text="recording" _note="full path:Live.ClipSlot.ClipSlotPlayingState.recording\n" type="label" _label="Value">
                </outline>
                <outline text="started" _note="full path:Live.ClipSlot.ClipSlotPlayingState.started\n" type="label" _label="Value">
                </outline>
                <outline text="stopped" _note="full path:Live.ClipSlot.ClipSlotPlayingState.stopped\n" type="label" _label="Value">
                </outline>
            </outline>
        </outline>
    </outline>
    <outline text="CompressorDevice" _note="full path:Live.CompressorDevice\n" type="label" _label="Module">
        <outline text="CompressorDevice" _note="full path:Live.CompressorDevice.CompressorDevice\nThis class represents a Compressor device." type="label" _label="Class">
            <outline text="View" _note="full path:Live.CompressorDevice.CompressorDevice.View\nRepresenting the view aspects of a Compressor device." type="label" _label="Class">
                <outline text="Properties">
                    <outline text="_live_ptr" _note="full path:Live.CompressorDevice.CompressorDevice.View._live_ptr\n" type="label" _label="Property">
                    </outline>
                    <outline text="canonical_parent" _note="full path:Live.CompressorDevice.CompressorDevice.View.canonical_parent\nGet the canonical parent of the View." type="label" _label="Property">
                    </outline>
                    <outline text="is_collapsed" _note="full path:Live.CompressorDevice.CompressorDevice.View.is_collapsed\nGet/Set/Listen if the device is shown collapsed in the device chain." type="label" _label="Property">
                    </outline>
                </outline>
                <outline text="Listeners">
                    <outline text="add_is_collapsed_listener()" _note="full path:Live.CompressorDevice.CompressorDevice.View.add_is_collapsed_listener()\nadd_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_collapsed&quot; has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="is_collapsed_has_listener()" _note="full path:Live.CompressorDevice.CompressorDevice.View.is_collapsed_has_listener()\nis_collapsed_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_collapsed&quot;. C++ signature :  bool is_collapsed_has_listener(TPyViewData<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_is_collapsed_listener()" _note="full path:Live.CompressorDevice.CompressorDevice.View.remove_is_collapsed_listener()\nremove_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_collapsed&quot;. C++ signature :  void remove_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                </outline>
            </outline>
            <outline text="Properties">
                <outline text="_live_ptr" _note="full path:Live.CompressorDevice.CompressorDevice._live_ptr\n" type="label" _label="Property">
                </outline>
                <outline text="available_input_routing_channels" _note="full path:Live.CompressorDevice.CompressorDevice.available_input_routing_channels\nReturn a list of source channels for input routing in the sidechain." type="label" _label="Property">
                </outline>
                <outline text="available_input_routing_types" _note="full path:Live.CompressorDevice.CompressorDevice.available_input_routing_types\nReturn a list of source types for input routing in the sidechain." type="label" _label="Property">
                </outline>
                <outline text="can_have_chains" _note="full path:Live.CompressorDevice.CompressorDevice.can_have_chains\nReturns true if the device is a rack." type="label" _label="Property">
                </outline>
                <outline text="can_have_drum_pads" _note="full path:Live.CompressorDevice.CompressorDevice.can_have_drum_pads\nReturns true if the device is a drum rack." type="label" _label="Property">
                </outline>
                <outline text="canonical_parent" _note="full path:Live.CompressorDevice.CompressorDevice.canonical_parent\nGet the canonical parent of the Device." type="label" _label="Property">
                </outline>
                <outline text="class_display_name" _note="full path:Live.CompressorDevice.CompressorDevice.class_display_name\nReturn const access to the name of the device's class name as displayed in Live's browser and device chain" type="label" _label="Property">
                </outline>
                <outline text="class_name" _note="full path:Live.CompressorDevice.CompressorDevice.class_name\nReturn const access to the name of the device's class." type="label" _label="Property">
                </outline>
                <outline text="input_routing_channel" _note="full path:Live.CompressorDevice.CompressorDevice.input_routing_channel\nGet and set the current source channel for input routing in the sidechain.Raises ValueError if the channel isn't one of the current values inavailable_input_routing_channels." type="label" _label="Property">
                </outline>
                <outline text="input_routing_type" _note="full path:Live.CompressorDevice.CompressorDevice.input_routing_type\nGet and set the current source type for input routing in the sidechain.Raises ValueError if the type isn't one of the current values inavailable_input_routing_types." type="label" _label="Property">
                </outline>
                <outline text="is_active" _note="full path:Live.CompressorDevice.CompressorDevice.is_active\nReturn const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off." type="label" _label="Property">
                </outline>
                <outline text="name" _note="full path:Live.CompressorDevice.CompressorDevice.name\nReturn access to the name of the device." type="label" _label="Property">
                </outline>
                <outline text="parameters" _note="full path:Live.CompressorDevice.CompressorDevice.parameters\nConst access to the list of available automatable parameters for this device." type="label" _label="Property">
                </outline>
                <outline text="type" _note="full path:Live.CompressorDevice.CompressorDevice.type\nReturn the type of the device." type="label" _label="Property">
                </outline>
                <outline text="view" _note="full path:Live.CompressorDevice.CompressorDevice.view\nRepresenting the view aspects of a device." type="label" _label="Property">
                </outline>
            </outline>
            <outline text="Listeners">
                <outline text="add_available_input_routing_channels_listener()" _note="full path:Live.CompressorDevice.CompressorDevice.add_available_input_routing_channels_listener()\nadd_available_input_routing_channels_listener( (CompressorDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;available_input_routing_channels&quot; has changed. C++ signature :  void add_available_input_routing_channels_listener(TCompressorDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_available_input_routing_types_listener()" _note="full path:Live.CompressorDevice.CompressorDevice.add_available_input_routing_types_listener()\nadd_available_input_routing_types_listener( (CompressorDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;available_input_routing_types&quot; has changed. C++ signature :  void add_available_input_routing_types_listener(TCompressorDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_input_routing_channel_listener()" _note="full path:Live.CompressorDevice.CompressorDevice.add_input_routing_channel_listener()\nadd_input_routing_channel_listener( (CompressorDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;input_routing_channel&quot; has changed. C++ signature :  void add_input_routing_channel_listener(TCompressorDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_input_routing_type_listener()" _note="full path:Live.CompressorDevice.CompressorDevice.add_input_routing_type_listener()\nadd_input_routing_type_listener( (CompressorDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;input_routing_type&quot; has changed. C++ signature :  void add_input_routing_type_listener(TCompressorDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_is_active_listener()" _note="full path:Live.CompressorDevice.CompressorDevice.add_is_active_listener()\nadd_is_active_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_active&quot; has changed. C++ signature :  void add_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_name_listener()" _note="full path:Live.CompressorDevice.CompressorDevice.add_name_listener()\nadd_name_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_parameters_listener()" _note="full path:Live.CompressorDevice.CompressorDevice.add_parameters_listener()\nadd_parameters_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;parameters&quot; has changed. C++ signature :  void add_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="available_input_routing_channels_has_listener()" _note="full path:Live.CompressorDevice.CompressorDevice.available_input_routing_channels_has_listener()\navailable_input_routing_channels_has_listener( (CompressorDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;available_input_routing_channels&quot;. C++ signature :  bool available_input_routing_channels_has_listener(TCompressorDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="available_input_routing_types_has_listener()" _note="full path:Live.CompressorDevice.CompressorDevice.available_input_routing_types_has_listener()\navailable_input_routing_types_has_listener( (CompressorDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;available_input_routing_types&quot;. C++ signature :  bool available_input_routing_types_has_listener(TCompressorDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="input_routing_channel_has_listener()" _note="full path:Live.CompressorDevice.CompressorDevice.input_routing_channel_has_listener()\ninput_routing_channel_has_listener( (CompressorDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;input_routing_channel&quot;. C++ signature :  bool input_routing_channel_has_listener(TCompressorDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="input_routing_type_has_listener()" _note="full path:Live.CompressorDevice.CompressorDevice.input_routing_type_has_listener()\ninput_routing_type_has_listener( (CompressorDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;input_routing_type&quot;. C++ signature :  bool input_routing_type_has_listener(TCompressorDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="is_active_has_listener()" _note="full path:Live.CompressorDevice.CompressorDevice.is_active_has_listener()\nis_active_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_active&quot;. C++ signature :  bool is_active_has_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="name_has_listener()" _note="full path:Live.CompressorDevice.CompressorDevice.name_has_listener()\nname_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="parameters_has_listener()" _note="full path:Live.CompressorDevice.CompressorDevice.parameters_has_listener()\nparameters_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;parameters&quot;. C++ signature :  bool parameters_has_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_available_input_routing_channels_listener()" _note="full path:Live.CompressorDevice.CompressorDevice.remove_available_input_routing_channels_listener()\nremove_available_input_routing_channels_listener( (CompressorDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;available_input_routing_channels&quot;. C++ signature :  void remove_available_input_routing_channels_listener(TCompressorDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_available_input_routing_types_listener()" _note="full path:Live.CompressorDevice.CompressorDevice.remove_available_input_routing_types_listener()\nremove_available_input_routing_types_listener( (CompressorDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;available_input_routing_types&quot;. C++ signature :  void remove_available_input_routing_types_listener(TCompressorDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_input_routing_channel_listener()" _note="full path:Live.CompressorDevice.CompressorDevice.remove_input_routing_channel_listener()\nremove_input_routing_channel_listener( (CompressorDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;input_routing_channel&quot;. C++ signature :  void remove_input_routing_channel_listener(TCompressorDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_input_routing_type_listener()" _note="full path:Live.CompressorDevice.CompressorDevice.remove_input_routing_type_listener()\nremove_input_routing_type_listener( (CompressorDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;input_routing_type&quot;. C++ signature :  void remove_input_routing_type_listener(TCompressorDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_is_active_listener()" _note="full path:Live.CompressorDevice.CompressorDevice.remove_is_active_listener()\nremove_is_active_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_active&quot;. C++ signature :  void remove_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_name_listener()" _note="full path:Live.CompressorDevice.CompressorDevice.remove_name_listener()\nremove_name_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_parameters_listener()" _note="full path:Live.CompressorDevice.CompressorDevice.remove_parameters_listener()\nremove_parameters_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;parameters&quot;. C++ signature :  void remove_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
            </outline>
            <outline text="Methods">
                <outline text="store_chosen_bank()" _note="full path:Live.CompressorDevice.CompressorDevice.store_chosen_bank()\nstore_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -> None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle<ADevice>,int,int)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
    </outline>
    <outline text="Conversions" _note="full path:Live.Conversions\n" type="label" _label="Module">
        <outline text="audio_to_midi_clip()" _note="full path:Live.Conversions.audio_to_midi_clip()\naudio_to_midi_clip( (Song)song, (Clip)audio_clip, (int)audio_to_midi_type) -> None : Creates a MIDI clip in a new MIDI track with the notes extracted from the given audio_clip. The `audio_to_midi_type` decides which algorithm is used in the process. Raises error when called with an inconvertible clip or invalid `audio_to_midi_type`. C++ signature :  void audio_to_midi_clip(TPyHandle<ASong>,TPyHandle<AClip>,int)" type="label" _label="Built-In">
        </outline>
        <outline text="create_drum_rack_from_audio_clip()" _note="full path:Live.Conversions.create_drum_rack_from_audio_clip()\ncreate_drum_rack_from_audio_clip( (Song)song, (Clip)audio_clip) -> None : Creates a new track with a drum rack with a simpler on the first pad with the specified audio clip. C++ signature :  void create_drum_rack_from_audio_clip(TPyHandle<ASong>,TPyHandle<AClip>)" type="label" _label="Built-In">
        </outline>
        <outline text="create_midi_track_from_drum_pad()" _note="full path:Live.Conversions.create_midi_track_from_drum_pad()\ncreate_midi_track_from_drum_pad( (Song)song, (DrumPad)drum_pad) -> None : Creates a new Midi track containing the specified Drum Pad's device chain. C++ signature :  void create_midi_track_from_drum_pad(TPyHandle<ASong>,TPyHandle<ADrumGroupDevicePad>)" type="label" _label="Built-In">
        </outline>
        <outline text="create_midi_track_with_simpler()" _note="full path:Live.Conversions.create_midi_track_with_simpler()\ncreate_midi_track_with_simpler( (Song)song, (Clip)audio_clip) -> None : Creates a new Midi track with a simpler including the specified audio clip. C++ signature :  void create_midi_track_with_simpler(TPyHandle<ASong>,TPyHandle<AClip>)" type="label" _label="Built-In">
        </outline>
        <outline text="is_convertible_to_midi()" _note="full path:Live.Conversions.is_convertible_to_midi()\nis_convertible_to_midi( (Song)song, (Clip)audio_clip) -> bool : Returns whether `audio_clip` can be converted to MIDI. Raises error when called with a MIDI clip C++ signature :  bool is_convertible_to_midi(TPyHandle<ASong>,TPyHandle<AClip>)" type="label" _label="Built-In">
        </outline>
        <outline text="move_devices_on_track_to_new_drum_rack_pad()" _note="full path:Live.Conversions.move_devices_on_track_to_new_drum_rack_pad()\nmove_devices_on_track_to_new_drum_rack_pad( (Song)song, (int)track_index) -> LomObject : Moves the entire device chain of the track according to the track index onto the C1 (note 36) drum pad of a new drum rack in a new track.If the track associated with the track index does not contain any devices nothing changes (i.e. a new track and new drum rack are not created). C++ signature :  TWeakPtr<TPyHandleBase> move_devices_on_track_to_new_drum_rack_pad(TPyHandle<ASong>,int)" type="label" _label="Built-In">
        </outline>
        <outline text="sliced_simpler_to_drum_rack()" _note="full path:Live.Conversions.sliced_simpler_to_drum_rack()\nsliced_simpler_to_drum_rack( (Song)song, (SimplerDevice)simpler) -> None : Converts the Simpler into a Drum Rack, assigning each slice to a drum pad. Calling it on a non-sliced simpler raises an error. C++ signature :  void sliced_simpler_to_drum_rack(TPyHandle<ASong>,TSimplerDevicePyHandle)" type="label" _label="Built-In">
        </outline>
        <outline text="AudioToMidiType" _note="full path:Live.Conversions.AudioToMidiType\n" type="label" _label="Class">
            <outline text="Values">
                <outline text="drums_to_midi" _note="full path:Live.Conversions.AudioToMidiType.drums_to_midi\n" type="label" _label="Value">
                </outline>
                <outline text="harmony_to_midi" _note="full path:Live.Conversions.AudioToMidiType.harmony_to_midi\n" type="label" _label="Value">
                </outline>
                <outline text="melody_to_midi" _note="full path:Live.Conversions.AudioToMidiType.melody_to_midi\n" type="label" _label="Value">
                </outline>
            </outline>
        </outline>
    </outline>
    <outline text="Device" _note="full path:Live.Device\n" type="label" _label="Module">
        <outline text="ATimeableValueVector" _note="full path:Live.Device.ATimeableValueVector\n" type="label" _label="Class">
            <outline text="Methods">
                <outline text="append()" _note="full path:Live.Device.ATimeableValueVector.append()\nappend( (ATimeableValueVector)arg1, (object)arg2) -> None : C++ signature :  void append(std::__1::vector<TWeakPtr<ATimeableValue>, std::__1::allocator<TWeakPtr<ATimeableValue> > > {lvalue},boost::python::api::object)" type="label" _label="Method">
                </outline>
                <outline text="extend()" _note="full path:Live.Device.ATimeableValueVector.extend()\nextend( (ATimeableValueVector)arg1, (object)arg2) -> None : C++ signature :  void extend(std::__1::vector<TWeakPtr<ATimeableValue>, std::__1::allocator<TWeakPtr<ATimeableValue> > > {lvalue},boost::python::api::object)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
        <outline text="Device" _note="full path:Live.Device.Device\nThis class represents a MIDI or Audio DSP-Device in Live." type="label" _label="Class">
            <outline text="View" _note="full path:Live.Device.Device.View\nRepresenting the view aspects of a device." type="label" _label="Class">
                <outline text="Properties">
                    <outline text="_live_ptr" _note="full path:Live.Device.Device.View._live_ptr\n" type="label" _label="Property">
                    </outline>
                    <outline text="canonical_parent" _note="full path:Live.Device.Device.View.canonical_parent\nGet the canonical parent of the View." type="label" _label="Property">
                    </outline>
                    <outline text="is_collapsed" _note="full path:Live.Device.Device.View.is_collapsed\nGet/Set/Listen if the device is shown collapsed in the device chain." type="label" _label="Property">
                    </outline>
                </outline>
                <outline text="Listeners">
                    <outline text="add_is_collapsed_listener()" _note="full path:Live.Device.Device.View.add_is_collapsed_listener()\nadd_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_collapsed&quot; has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="is_collapsed_has_listener()" _note="full path:Live.Device.Device.View.is_collapsed_has_listener()\nis_collapsed_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_collapsed&quot;. C++ signature :  bool is_collapsed_has_listener(TPyViewData<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_is_collapsed_listener()" _note="full path:Live.Device.Device.View.remove_is_collapsed_listener()\nremove_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_collapsed&quot;. C++ signature :  void remove_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                </outline>
            </outline>
            <outline text="Properties">
                <outline text="_live_ptr" _note="full path:Live.Device.Device._live_ptr\n" type="label" _label="Property">
                </outline>
                <outline text="can_have_chains" _note="full path:Live.Device.Device.can_have_chains\nReturns true if the device is a rack." type="label" _label="Property">
                </outline>
                <outline text="can_have_drum_pads" _note="full path:Live.Device.Device.can_have_drum_pads\nReturns true if the device is a drum rack." type="label" _label="Property">
                </outline>
                <outline text="canonical_parent" _note="full path:Live.Device.Device.canonical_parent\nGet the canonical parent of the Device." type="label" _label="Property">
                </outline>
                <outline text="class_display_name" _note="full path:Live.Device.Device.class_display_name\nReturn const access to the name of the device's class name as displayed in Live's browser and device chain" type="label" _label="Property">
                </outline>
                <outline text="class_name" _note="full path:Live.Device.Device.class_name\nReturn const access to the name of the device's class." type="label" _label="Property">
                </outline>
                <outline text="is_active" _note="full path:Live.Device.Device.is_active\nReturn const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off." type="label" _label="Property">
                </outline>
                <outline text="name" _note="full path:Live.Device.Device.name\nReturn access to the name of the device." type="label" _label="Property">
                </outline>
                <outline text="parameters" _note="full path:Live.Device.Device.parameters\nConst access to the list of available automatable parameters for this device." type="label" _label="Property">
                </outline>
                <outline text="type" _note="full path:Live.Device.Device.type\nReturn the type of the device." type="label" _label="Property">
                </outline>
                <outline text="view" _note="full path:Live.Device.Device.view\nRepresenting the view aspects of a device." type="label" _label="Property">
                </outline>
            </outline>
            <outline text="Listeners">
                <outline text="add_is_active_listener()" _note="full path:Live.Device.Device.add_is_active_listener()\nadd_is_active_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_active&quot; has changed. C++ signature :  void add_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_name_listener()" _note="full path:Live.Device.Device.add_name_listener()\nadd_name_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_parameters_listener()" _note="full path:Live.Device.Device.add_parameters_listener()\nadd_parameters_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;parameters&quot; has changed. C++ signature :  void add_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="is_active_has_listener()" _note="full path:Live.Device.Device.is_active_has_listener()\nis_active_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_active&quot;. C++ signature :  bool is_active_has_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="name_has_listener()" _note="full path:Live.Device.Device.name_has_listener()\nname_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="parameters_has_listener()" _note="full path:Live.Device.Device.parameters_has_listener()\nparameters_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;parameters&quot;. C++ signature :  bool parameters_has_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_is_active_listener()" _note="full path:Live.Device.Device.remove_is_active_listener()\nremove_is_active_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_active&quot;. C++ signature :  void remove_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_name_listener()" _note="full path:Live.Device.Device.remove_name_listener()\nremove_name_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_parameters_listener()" _note="full path:Live.Device.Device.remove_parameters_listener()\nremove_parameters_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;parameters&quot;. C++ signature :  void remove_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
            </outline>
            <outline text="Methods">
                <outline text="store_chosen_bank()" _note="full path:Live.Device.Device.store_chosen_bank()\nstore_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -> None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle<ADevice>,int,int)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
        <outline text="DeviceType" _note="full path:Live.Device.DeviceType\nThe type of the device." type="label" _label="Class">
            <outline text="Values">
                <outline text="audio_effect" _note="full path:Live.Device.DeviceType.audio_effect\nThe type of the device." type="label" _label="Value">
                </outline>
                <outline text="instrument" _note="full path:Live.Device.DeviceType.instrument\nThe type of the device." type="label" _label="Value">
                </outline>
                <outline text="midi_effect" _note="full path:Live.Device.DeviceType.midi_effect\nThe type of the device." type="label" _label="Value">
                </outline>
                <outline text="undefined" _note="full path:Live.Device.DeviceType.undefined\nThe type of the device." type="label" _label="Value">
                </outline>
            </outline>
        </outline>
    </outline>
    <outline text="DeviceIO" _note="full path:Live.DeviceIO\n" type="label" _label="Module">
        <outline text="DeviceIO" _note="full path:Live.DeviceIO.DeviceIO\nThis class represents a specific input or output bus of a device." type="label" _label="Class">
            <outline text="Properties">
                <outline text="_live_ptr" _note="full path:Live.DeviceIO.DeviceIO._live_ptr\n" type="label" _label="Property">
                </outline>
                <outline text="available_routing_channels" _note="full path:Live.DeviceIO.DeviceIO.available_routing_channels\nReturn a list of channels for this IO endpoint." type="label" _label="Property">
                </outline>
                <outline text="available_routing_types" _note="full path:Live.DeviceIO.DeviceIO.available_routing_types\nReturn a list of available routing types for this IO endpoint." type="label" _label="Property">
                </outline>
                <outline text="canonical_parent" _note="full path:Live.DeviceIO.DeviceIO.canonical_parent\nGet the canonical parent of the device IO." type="label" _label="Property">
                </outline>
                <outline text="default_external_routing_channel_is_none" _note="full path:Live.DeviceIO.DeviceIO.default_external_routing_channel_is_none\nGet and set whether the default routing channel for External routing types is none." type="label" _label="Property">
                </outline>
                <outline text="routing_channel" _note="full path:Live.DeviceIO.DeviceIO.routing_channel\nGet and set the current routing channel.Raises ValueError if the channel isn't one of the current values inavailable_routing_channels." type="label" _label="Property">
                </outline>
                <outline text="routing_type" _note="full path:Live.DeviceIO.DeviceIO.routing_type\nGet and set the current routing type.Raises ValueError if the type isn't one of the current values inavailable_routing_types." type="label" _label="Property">
                </outline>
            </outline>
            <outline text="Listeners">
                <outline text="add_available_routing_channels_listener()" _note="full path:Live.DeviceIO.DeviceIO.add_available_routing_channels_listener()\nadd_available_routing_channels_listener( (DeviceIO)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;available_routing_channels&quot; has changed. C++ signature :  void add_available_routing_channels_listener(TPyHandle<AMxDRoutable>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_available_routing_types_listener()" _note="full path:Live.DeviceIO.DeviceIO.add_available_routing_types_listener()\nadd_available_routing_types_listener( (DeviceIO)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;available_routing_types&quot; has changed. C++ signature :  void add_available_routing_types_listener(TPyHandle<AMxDRoutable>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_routing_channel_listener()" _note="full path:Live.DeviceIO.DeviceIO.add_routing_channel_listener()\nadd_routing_channel_listener( (DeviceIO)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;routing_channel&quot; has changed. C++ signature :  void add_routing_channel_listener(TPyHandle<AMxDRoutable>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_routing_type_listener()" _note="full path:Live.DeviceIO.DeviceIO.add_routing_type_listener()\nadd_routing_type_listener( (DeviceIO)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;routing_type&quot; has changed. C++ signature :  void add_routing_type_listener(TPyHandle<AMxDRoutable>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="available_routing_channels_has_listener()" _note="full path:Live.DeviceIO.DeviceIO.available_routing_channels_has_listener()\navailable_routing_channels_has_listener( (DeviceIO)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;available_routing_channels&quot;. C++ signature :  bool available_routing_channels_has_listener(TPyHandle<AMxDRoutable>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="available_routing_types_has_listener()" _note="full path:Live.DeviceIO.DeviceIO.available_routing_types_has_listener()\navailable_routing_types_has_listener( (DeviceIO)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;available_routing_types&quot;. C++ signature :  bool available_routing_types_has_listener(TPyHandle<AMxDRoutable>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_available_routing_channels_listener()" _note="full path:Live.DeviceIO.DeviceIO.remove_available_routing_channels_listener()\nremove_available_routing_channels_listener( (DeviceIO)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;available_routing_channels&quot;. C++ signature :  void remove_available_routing_channels_listener(TPyHandle<AMxDRoutable>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_available_routing_types_listener()" _note="full path:Live.DeviceIO.DeviceIO.remove_available_routing_types_listener()\nremove_available_routing_types_listener( (DeviceIO)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;available_routing_types&quot;. C++ signature :  void remove_available_routing_types_listener(TPyHandle<AMxDRoutable>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_routing_channel_listener()" _note="full path:Live.DeviceIO.DeviceIO.remove_routing_channel_listener()\nremove_routing_channel_listener( (DeviceIO)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;routing_channel&quot;. C++ signature :  void remove_routing_channel_listener(TPyHandle<AMxDRoutable>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_routing_type_listener()" _note="full path:Live.DeviceIO.DeviceIO.remove_routing_type_listener()\nremove_routing_type_listener( (DeviceIO)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;routing_type&quot;. C++ signature :  void remove_routing_type_listener(TPyHandle<AMxDRoutable>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="routing_channel_has_listener()" _note="full path:Live.DeviceIO.DeviceIO.routing_channel_has_listener()\nrouting_channel_has_listener( (DeviceIO)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;routing_channel&quot;. C++ signature :  bool routing_channel_has_listener(TPyHandle<AMxDRoutable>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="routing_type_has_listener()" _note="full path:Live.DeviceIO.DeviceIO.routing_type_has_listener()\nrouting_type_has_listener( (DeviceIO)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;routing_type&quot;. C++ signature :  bool routing_type_has_listener(TPyHandle<AMxDRoutable>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
            </outline>
        </outline>
    </outline>
    <outline text="DeviceParameter" _note="full path:Live.DeviceParameter\n" type="label" _label="Module">
        <outline text="AutomationState" _note="full path:Live.DeviceParameter.AutomationState\n" type="label" _label="Class">
            <outline text="Values">
                <outline text="none" _note="full path:Live.DeviceParameter.AutomationState.none\n" type="label" _label="Value">
                </outline>
                <outline text="overridden" _note="full path:Live.DeviceParameter.AutomationState.overridden\n" type="label" _label="Value">
                </outline>
                <outline text="playing" _note="full path:Live.DeviceParameter.AutomationState.playing\n" type="label" _label="Value">
                </outline>
            </outline>
        </outline>
        <outline text="DeviceParameter" _note="full path:Live.DeviceParameter.DeviceParameter\nThis class represents a (automatable) parameter within a MIDI orAudio DSP-Device." type="label" _label="Class">
            <outline text="Properties">
                <outline text="_live_ptr" _note="full path:Live.DeviceParameter.DeviceParameter._live_ptr\n" type="label" _label="Property">
                </outline>
                <outline text="automation_state" _note="full path:Live.DeviceParameter.DeviceParameter.automation_state\nReturns state of type AutomationState." type="label" _label="Property">
                </outline>
                <outline text="canonical_parent" _note="full path:Live.DeviceParameter.DeviceParameter.canonical_parent\nGet the canonical parent of the device parameter." type="label" _label="Property">
                </outline>
                <outline text="default_value" _note="full path:Live.DeviceParameter.DeviceParameter.default_value\nReturn the default value for this parameter.  A Default value is onlyavailable for non-quantized parameter types (see 'is_quantized')." type="label" _label="Property">
                </outline>
                <outline text="is_enabled" _note="full path:Live.DeviceParameter.DeviceParameter.is_enabled\nReturns false if the parameter has been macro mapped or disabled by Max." type="label" _label="Property">
                </outline>
                <outline text="is_quantized" _note="full path:Live.DeviceParameter.DeviceParameter.is_quantized\nReturns True, if this value is a boolean or integer like switch.Non quantized values are continues float values." type="label" _label="Property">
                </outline>
                <outline text="max" _note="full path:Live.DeviceParameter.DeviceParameter.max\nReturns const access to the upper value of the allowed range forthis parameter" type="label" _label="Property">
                </outline>
                <outline text="min" _note="full path:Live.DeviceParameter.DeviceParameter.min\nReturns const access to the lower value of the allowed range forthis parameter" type="label" _label="Property">
                </outline>
                <outline text="name" _note="full path:Live.DeviceParameter.DeviceParameter.name\nReturns const access the name of this parameter, as visible in Livesautomation choosers." type="label" _label="Property">
                </outline>
                <outline text="original_name" _note="full path:Live.DeviceParameter.DeviceParameter.original_name\nReturns const access the original name of this parameter, unaffected ofany renamings." type="label" _label="Property">
                </outline>
                <outline text="state" _note="full path:Live.DeviceParameter.DeviceParameter.state\nReturns the state of the parameter:- enabled - the parameter's value can be changed,- irrelevant - the parameter is enabled, but value changes will not take any effect until it gets enabled,- disabled - the parameter's value cannot be changed." type="label" _label="Property">
                </outline>
                <outline text="value" _note="full path:Live.DeviceParameter.DeviceParameter.value\nGet/Set the current value (as visible in the GUI) this parameter.The value must be inside the min/max properties of this device." type="label" _label="Property">
                </outline>
                <outline text="value_items" _note="full path:Live.DeviceParameter.DeviceParameter.value_items\nReturn the list of possible values for this parameter. Raises an error if 'is_quantized' is False." type="label" _label="Property">
                </outline>
            </outline>
            <outline text="Listeners">
                <outline text="add_automation_state_listener()" _note="full path:Live.DeviceParameter.DeviceParameter.add_automation_state_listener()\nadd_automation_state_listener( (DeviceParameter)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;automation_state&quot; has changed. C++ signature :  void add_automation_state_listener(TPyHandle<ATimeableValue>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_name_listener()" _note="full path:Live.DeviceParameter.DeviceParameter.add_name_listener()\nadd_name_listener( (DeviceParameter)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TPyHandle<ATimeableValue>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_state_listener()" _note="full path:Live.DeviceParameter.DeviceParameter.add_state_listener()\nadd_state_listener( (DeviceParameter)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;state&quot; has changed. C++ signature :  void add_state_listener(TPyHandle<ATimeableValue>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_value_listener()" _note="full path:Live.DeviceParameter.DeviceParameter.add_value_listener()\nadd_value_listener( (DeviceParameter)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;value&quot; has changed. C++ signature :  void add_value_listener(TPyHandle<ATimeableValue>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="automation_state_has_listener()" _note="full path:Live.DeviceParameter.DeviceParameter.automation_state_has_listener()\nautomation_state_has_listener( (DeviceParameter)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;automation_state&quot;. C++ signature :  bool automation_state_has_listener(TPyHandle<ATimeableValue>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="name_has_listener()" _note="full path:Live.DeviceParameter.DeviceParameter.name_has_listener()\nname_has_listener( (DeviceParameter)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TPyHandle<ATimeableValue>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_automation_state_listener()" _note="full path:Live.DeviceParameter.DeviceParameter.remove_automation_state_listener()\nremove_automation_state_listener( (DeviceParameter)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;automation_state&quot;. C++ signature :  void remove_automation_state_listener(TPyHandle<ATimeableValue>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_name_listener()" _note="full path:Live.DeviceParameter.DeviceParameter.remove_name_listener()\nremove_name_listener( (DeviceParameter)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TPyHandle<ATimeableValue>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_state_listener()" _note="full path:Live.DeviceParameter.DeviceParameter.remove_state_listener()\nremove_state_listener( (DeviceParameter)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;state&quot;. C++ signature :  void remove_state_listener(TPyHandle<ATimeableValue>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_value_listener()" _note="full path:Live.DeviceParameter.DeviceParameter.remove_value_listener()\nremove_value_listener( (DeviceParameter)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;value&quot;. C++ signature :  void remove_value_listener(TPyHandle<ATimeableValue>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="state_has_listener()" _note="full path:Live.DeviceParameter.DeviceParameter.state_has_listener()\nstate_has_listener( (DeviceParameter)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;state&quot;. C++ signature :  bool state_has_listener(TPyHandle<ATimeableValue>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="value_has_listener()" _note="full path:Live.DeviceParameter.DeviceParameter.value_has_listener()\nvalue_has_listener( (DeviceParameter)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;value&quot;. C++ signature :  bool value_has_listener(TPyHandle<ATimeableValue>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
            </outline>
            <outline text="Methods">
                <outline text="begin_gesture()" _note="full path:Live.DeviceParameter.DeviceParameter.begin_gesture()\nbegin_gesture( (DeviceParameter)arg1) -> None : Notify the begin of a modification of the parameter, when a sequence of modifications have to be consider a consistent group -- for Sexample, when recording automation. C++ signature :  void begin_gesture(TPyHandle<ATimeableValue>)" type="label" _label="Method">
                </outline>
                <outline text="end_gesture()" _note="full path:Live.DeviceParameter.DeviceParameter.end_gesture()\nend_gesture( (DeviceParameter)arg1) -> None : Notify the end of a modification of the parameter. See begin_gesture. C++ signature :  void end_gesture(TPyHandle<ATimeableValue>)" type="label" _label="Method">
                </outline>
                <outline text="re_enable_automation()" _note="full path:Live.DeviceParameter.DeviceParameter.re_enable_automation()\nre_enable_automation( (DeviceParameter)arg1) -> None : Reenable automation for this parameter. C++ signature :  void re_enable_automation(TPyHandle<ATimeableValue>)" type="label" _label="Method">
                </outline>
                <outline text="str_for_value()" _note="full path:Live.DeviceParameter.DeviceParameter.str_for_value()\nstr_for_value( (DeviceParameter)arg1, (float)arg2) -> unicode : Return a string representation of the given value. To be used for display purposes only.  This value can include characters like 'db' or 'hz', depending on the type of the parameter. C++ signature :  TString str_for_value(TPyHandle<ATimeableValue>,float)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
        <outline text="ParameterState" _note="full path:Live.DeviceParameter.ParameterState\n" type="label" _label="Class">
            <outline text="Values">
                <outline text="disabled" _note="full path:Live.DeviceParameter.ParameterState.disabled\n" type="label" _label="Value">
                </outline>
                <outline text="enabled" _note="full path:Live.DeviceParameter.ParameterState.enabled\n" type="label" _label="Value">
                </outline>
                <outline text="irrelevant" _note="full path:Live.DeviceParameter.ParameterState.irrelevant\n" type="label" _label="Value">
                </outline>
            </outline>
        </outline>
    </outline>
    <outline text="DrumChain" _note="full path:Live.DrumChain\n" type="label" _label="Module">
        <outline text="DrumChain" _note="full path:Live.DrumChain.DrumChain\nThis class represents a drum group device chain in Live." type="label" _label="Class">
            <outline text="Properties">
                <outline text="_live_ptr" _note="full path:Live.DrumChain.DrumChain._live_ptr\n" type="label" _label="Property">
                </outline>
                <outline text="canonical_parent" _note="full path:Live.DrumChain.DrumChain.canonical_parent\nGet the canonical parent of the chain." type="label" _label="Property">
                </outline>
                <outline text="choke_group" _note="full path:Live.DrumChain.DrumChain.choke_group\nAccess to the chain's choke group setting." type="label" _label="Property">
                </outline>
                <outline text="color" _note="full path:Live.DrumChain.DrumChain.color\nAccess the color index of the Chain." type="label" _label="Property">
                </outline>
                <outline text="color_index" _note="full path:Live.DrumChain.DrumChain.color_index\nAccess the color index of the Chain." type="label" _label="Property">
                </outline>
                <outline text="devices" _note="full path:Live.DrumChain.DrumChain.devices\nReturn const access to all available Devices that are present in the chains" type="label" _label="Property">
                </outline>
                <outline text="has_audio_input" _note="full path:Live.DrumChain.DrumChain.has_audio_input\nreturn True, if this Chain can be feed with an Audio signal. This istrue for all Audio Chains." type="label" _label="Property">
                </outline>
                <outline text="has_audio_output" _note="full path:Live.DrumChain.DrumChain.has_audio_output\nreturn True, if this Chain sends out an Audio signal. This istrue for all Audio Chains, and MIDI chains with an Instrument." type="label" _label="Property">
                </outline>
                <outline text="has_midi_input" _note="full path:Live.DrumChain.DrumChain.has_midi_input\nreturn True, if this Chain can be feed with an Audio signal. This istrue for all MIDI Chains." type="label" _label="Property">
                </outline>
                <outline text="has_midi_output" _note="full path:Live.DrumChain.DrumChain.has_midi_output\nreturn True, if this Chain sends out MIDI events. This istrue for all MIDI Chains with no Instruments." type="label" _label="Property">
                </outline>
                <outline text="is_auto_colored" _note="full path:Live.DrumChain.DrumChain.is_auto_colored\nGet/set access to the auto color flag of the Chain.If True, the Chain will always have the same color as the containingTrack or Chain." type="label" _label="Property">
                </outline>
                <outline text="mixer_device" _note="full path:Live.DrumChain.DrumChain.mixer_device\nReturn access to the mixer device that holds the chain's mixer parameters:the Volume, Pan, and Sendamounts." type="label" _label="Property">
                </outline>
                <outline text="mute" _note="full path:Live.DrumChain.DrumChain.mute\nMute/unmute the chain." type="label" _label="Property">
                </outline>
                <outline text="muted_via_solo" _note="full path:Live.DrumChain.DrumChain.muted_via_solo\nReturn const access to whether this chain is muted due to some other chainbeing soloed." type="label" _label="Property">
                </outline>
                <outline text="name" _note="full path:Live.DrumChain.DrumChain.name\nRead/write access to the name of the Chain, as visible in the track header." type="label" _label="Property">
                </outline>
                <outline text="out_note" _note="full path:Live.DrumChain.DrumChain.out_note\nAccess to the MIDI note sent to the devices in the chain." type="label" _label="Property">
                </outline>
                <outline text="solo" _note="full path:Live.DrumChain.DrumChain.solo\nGet/Set the solo status of the chain. Note that this will not disable thesolo state of any other Chain in the same rack. If you want exclusive solo, you have to disable the solo state of the other Chains manually." type="label" _label="Property">
                </outline>
            </outline>
            <outline text="Listeners">
                <outline text="add_choke_group_listener()" _note="full path:Live.DrumChain.DrumChain.add_choke_group_listener()\nadd_choke_group_listener( (DrumChain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;choke_group&quot; has changed. C++ signature :  void add_choke_group_listener(TDrumChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_color_index_listener()" _note="full path:Live.DrumChain.DrumChain.add_color_index_listener()\nadd_color_index_listener( (Chain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;color_index&quot; has changed. C++ signature :  void add_color_index_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_color_listener()" _note="full path:Live.DrumChain.DrumChain.add_color_listener()\nadd_color_listener( (Chain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;color&quot; has changed. C++ signature :  void add_color_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_devices_listener()" _note="full path:Live.DrumChain.DrumChain.add_devices_listener()\nadd_devices_listener( (Chain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;devices&quot; has changed. C++ signature :  void add_devices_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_is_auto_colored_listener()" _note="full path:Live.DrumChain.DrumChain.add_is_auto_colored_listener()\nadd_is_auto_colored_listener( (Chain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_auto_colored&quot; has changed. C++ signature :  void add_is_auto_colored_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_mute_listener()" _note="full path:Live.DrumChain.DrumChain.add_mute_listener()\nadd_mute_listener( (Chain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;mute&quot; has changed. C++ signature :  void add_mute_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_muted_via_solo_listener()" _note="full path:Live.DrumChain.DrumChain.add_muted_via_solo_listener()\nadd_muted_via_solo_listener( (Chain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;muted_via_solo&quot; has changed. C++ signature :  void add_muted_via_solo_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_name_listener()" _note="full path:Live.DrumChain.DrumChain.add_name_listener()\nadd_name_listener( (Chain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_out_note_listener()" _note="full path:Live.DrumChain.DrumChain.add_out_note_listener()\nadd_out_note_listener( (DrumChain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;out_note&quot; has changed. C++ signature :  void add_out_note_listener(TDrumChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_solo_listener()" _note="full path:Live.DrumChain.DrumChain.add_solo_listener()\nadd_solo_listener( (Chain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;solo&quot; has changed. C++ signature :  void add_solo_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="choke_group_has_listener()" _note="full path:Live.DrumChain.DrumChain.choke_group_has_listener()\nchoke_group_has_listener( (DrumChain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;choke_group&quot;. C++ signature :  bool choke_group_has_listener(TDrumChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="color_has_listener()" _note="full path:Live.DrumChain.DrumChain.color_has_listener()\ncolor_has_listener( (Chain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;color&quot;. C++ signature :  bool color_has_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="color_index_has_listener()" _note="full path:Live.DrumChain.DrumChain.color_index_has_listener()\ncolor_index_has_listener( (Chain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;color_index&quot;. C++ signature :  bool color_index_has_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="devices_has_listener()" _note="full path:Live.DrumChain.DrumChain.devices_has_listener()\ndevices_has_listener( (Chain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;devices&quot;. C++ signature :  bool devices_has_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="is_auto_colored_has_listener()" _note="full path:Live.DrumChain.DrumChain.is_auto_colored_has_listener()\nis_auto_colored_has_listener( (Chain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_auto_colored&quot;. C++ signature :  bool is_auto_colored_has_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="mute_has_listener()" _note="full path:Live.DrumChain.DrumChain.mute_has_listener()\nmute_has_listener( (Chain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;mute&quot;. C++ signature :  bool mute_has_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="muted_via_solo_has_listener()" _note="full path:Live.DrumChain.DrumChain.muted_via_solo_has_listener()\nmuted_via_solo_has_listener( (Chain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;muted_via_solo&quot;. C++ signature :  bool muted_via_solo_has_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="name_has_listener()" _note="full path:Live.DrumChain.DrumChain.name_has_listener()\nname_has_listener( (Chain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="out_note_has_listener()" _note="full path:Live.DrumChain.DrumChain.out_note_has_listener()\nout_note_has_listener( (DrumChain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;out_note&quot;. C++ signature :  bool out_note_has_listener(TDrumChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_choke_group_listener()" _note="full path:Live.DrumChain.DrumChain.remove_choke_group_listener()\nremove_choke_group_listener( (DrumChain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;choke_group&quot;. C++ signature :  void remove_choke_group_listener(TDrumChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_color_index_listener()" _note="full path:Live.DrumChain.DrumChain.remove_color_index_listener()\nremove_color_index_listener( (Chain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;color_index&quot;. C++ signature :  void remove_color_index_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_color_listener()" _note="full path:Live.DrumChain.DrumChain.remove_color_listener()\nremove_color_listener( (Chain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;color&quot;. C++ signature :  void remove_color_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_devices_listener()" _note="full path:Live.DrumChain.DrumChain.remove_devices_listener()\nremove_devices_listener( (Chain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;devices&quot;. C++ signature :  void remove_devices_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_is_auto_colored_listener()" _note="full path:Live.DrumChain.DrumChain.remove_is_auto_colored_listener()\nremove_is_auto_colored_listener( (Chain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_auto_colored&quot;. C++ signature :  void remove_is_auto_colored_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_mute_listener()" _note="full path:Live.DrumChain.DrumChain.remove_mute_listener()\nremove_mute_listener( (Chain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;mute&quot;. C++ signature :  void remove_mute_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_muted_via_solo_listener()" _note="full path:Live.DrumChain.DrumChain.remove_muted_via_solo_listener()\nremove_muted_via_solo_listener( (Chain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;muted_via_solo&quot;. C++ signature :  void remove_muted_via_solo_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_name_listener()" _note="full path:Live.DrumChain.DrumChain.remove_name_listener()\nremove_name_listener( (Chain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_out_note_listener()" _note="full path:Live.DrumChain.DrumChain.remove_out_note_listener()\nremove_out_note_listener( (DrumChain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;out_note&quot;. C++ signature :  void remove_out_note_listener(TDrumChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_solo_listener()" _note="full path:Live.DrumChain.DrumChain.remove_solo_listener()\nremove_solo_listener( (Chain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;solo&quot;. C++ signature :  void remove_solo_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="solo_has_listener()" _note="full path:Live.DrumChain.DrumChain.solo_has_listener()\nsolo_has_listener( (Chain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;solo&quot;. C++ signature :  bool solo_has_listener(TChainPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
            </outline>
            <outline text="Methods">
                <outline text="delete_device()" _note="full path:Live.DrumChain.DrumChain.delete_device()\ndelete_device( (Chain)arg1, (int)arg2) -> None : Remove a device identified by its index from the chain. Throws runtime error if bad index.  C++ signature :  void delete_device(TChainPyHandle,int)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
    </outline>
    <outline text="DrumPad" _note="full path:Live.DrumPad\n" type="label" _label="Module">
        <outline text="DrumPad" _note="full path:Live.DrumPad.DrumPad\nThis class represents a drum group device pad in Live." type="label" _label="Class">
            <outline text="Properties">
                <outline text="_live_ptr" _note="full path:Live.DrumPad.DrumPad._live_ptr\n" type="label" _label="Property">
                </outline>
                <outline text="canonical_parent" _note="full path:Live.DrumPad.DrumPad.canonical_parent\nGet the canonical parent of the drum pad." type="label" _label="Property">
                </outline>
                <outline text="chains" _note="full path:Live.DrumPad.DrumPad.chains\nReturn const access to the list of chains in this drum pad." type="label" _label="Property">
                </outline>
                <outline text="mute" _note="full path:Live.DrumPad.DrumPad.mute\nMute/unmute the pad." type="label" _label="Property">
                </outline>
                <outline text="name" _note="full path:Live.DrumPad.DrumPad.name\nReturn const access to the drum pad's name. It depends on the contained chains." type="label" _label="Property">
                </outline>
                <outline text="note" _note="full path:Live.DrumPad.DrumPad.note\nGet the MIDI note of the drum pad." type="label" _label="Property">
                </outline>
                <outline text="solo" _note="full path:Live.DrumPad.DrumPad.solo\nSolo/unsolo the pad." type="label" _label="Property">
                </outline>
            </outline>
            <outline text="Listeners">
                <outline text="add_chains_listener()" _note="full path:Live.DrumPad.DrumPad.add_chains_listener()\nadd_chains_listener( (DrumPad)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;chains&quot; has changed. C++ signature :  void add_chains_listener(TPyHandle<ADrumGroupDevicePad>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_mute_listener()" _note="full path:Live.DrumPad.DrumPad.add_mute_listener()\nadd_mute_listener( (DrumPad)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;mute&quot; has changed. C++ signature :  void add_mute_listener(TPyHandle<ADrumGroupDevicePad>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_name_listener()" _note="full path:Live.DrumPad.DrumPad.add_name_listener()\nadd_name_listener( (DrumPad)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TPyHandle<ADrumGroupDevicePad>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_solo_listener()" _note="full path:Live.DrumPad.DrumPad.add_solo_listener()\nadd_solo_listener( (DrumPad)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;solo&quot; has changed. C++ signature :  void add_solo_listener(TPyHandle<ADrumGroupDevicePad>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="chains_has_listener()" _note="full path:Live.DrumPad.DrumPad.chains_has_listener()\nchains_has_listener( (DrumPad)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;chains&quot;. C++ signature :  bool chains_has_listener(TPyHandle<ADrumGroupDevicePad>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="mute_has_listener()" _note="full path:Live.DrumPad.DrumPad.mute_has_listener()\nmute_has_listener( (DrumPad)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;mute&quot;. C++ signature :  bool mute_has_listener(TPyHandle<ADrumGroupDevicePad>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="name_has_listener()" _note="full path:Live.DrumPad.DrumPad.name_has_listener()\nname_has_listener( (DrumPad)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TPyHandle<ADrumGroupDevicePad>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_chains_listener()" _note="full path:Live.DrumPad.DrumPad.remove_chains_listener()\nremove_chains_listener( (DrumPad)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;chains&quot;. C++ signature :  void remove_chains_listener(TPyHandle<ADrumGroupDevicePad>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_mute_listener()" _note="full path:Live.DrumPad.DrumPad.remove_mute_listener()\nremove_mute_listener( (DrumPad)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;mute&quot;. C++ signature :  void remove_mute_listener(TPyHandle<ADrumGroupDevicePad>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_name_listener()" _note="full path:Live.DrumPad.DrumPad.remove_name_listener()\nremove_name_listener( (DrumPad)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TPyHandle<ADrumGroupDevicePad>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_solo_listener()" _note="full path:Live.DrumPad.DrumPad.remove_solo_listener()\nremove_solo_listener( (DrumPad)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;solo&quot;. C++ signature :  void remove_solo_listener(TPyHandle<ADrumGroupDevicePad>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="solo_has_listener()" _note="full path:Live.DrumPad.DrumPad.solo_has_listener()\nsolo_has_listener( (DrumPad)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;solo&quot;. C++ signature :  bool solo_has_listener(TPyHandle<ADrumGroupDevicePad>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
            </outline>
            <outline text="Methods">
                <outline text="delete_all_chains()" _note="full path:Live.DrumPad.DrumPad.delete_all_chains()\ndelete_all_chains( (DrumPad)arg1) -> None : Deletes all chains associated with a drum pad. This is equivalent to deleting a drum rack pad in Live. C++ signature :  void delete_all_chains(TPyHandle<ADrumGroupDevicePad>)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
    </outline>
    <outline text="Eq8Device" _note="full path:Live.Eq8Device\n" type="label" _label="Module">
        <outline text="EditMode" _note="full path:Live.Eq8Device.EditMode\n" type="label" _label="Class">
            <outline text="Values">
                <outline text="a" _note="full path:Live.Eq8Device.EditMode.a\n" type="label" _label="Value">
                </outline>
                <outline text="b" _note="full path:Live.Eq8Device.EditMode.b\n" type="label" _label="Value">
                </outline>
            </outline>
        </outline>
        <outline text="Eq8Device" _note="full path:Live.Eq8Device.Eq8Device\nThis class represents an Eq8 device." type="label" _label="Class">
            <outline text="View" _note="full path:Live.Eq8Device.Eq8Device.View\nRepresenting the view aspects of an Eq8 device." type="label" _label="Class">
                <outline text="Properties">
                    <outline text="_live_ptr" _note="full path:Live.Eq8Device.Eq8Device.View._live_ptr\n" type="label" _label="Property">
                    </outline>
                    <outline text="canonical_parent" _note="full path:Live.Eq8Device.Eq8Device.View.canonical_parent\nGet the canonical parent of the View." type="label" _label="Property">
                    </outline>
                    <outline text="is_collapsed" _note="full path:Live.Eq8Device.Eq8Device.View.is_collapsed\nGet/Set/Listen if the device is shown collapsed in the device chain." type="label" _label="Property">
                    </outline>
                    <outline text="selected_band" _note="full path:Live.Eq8Device.Eq8Device.View.selected_band\nAccess to the selected filter band." type="label" _label="Property">
                    </outline>
                </outline>
                <outline text="Listeners">
                    <outline text="add_is_collapsed_listener()" _note="full path:Live.Eq8Device.Eq8Device.View.add_is_collapsed_listener()\nadd_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_collapsed&quot; has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="add_selected_band_listener()" _note="full path:Live.Eq8Device.Eq8Device.View.add_selected_band_listener()\nadd_selected_band_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;selected_band&quot; has changed. C++ signature :  void add_selected_band_listener(TEq8DevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="is_collapsed_has_listener()" _note="full path:Live.Eq8Device.Eq8Device.View.is_collapsed_has_listener()\nis_collapsed_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_collapsed&quot;. C++ signature :  bool is_collapsed_has_listener(TPyViewData<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_is_collapsed_listener()" _note="full path:Live.Eq8Device.Eq8Device.View.remove_is_collapsed_listener()\nremove_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_collapsed&quot;. C++ signature :  void remove_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_selected_band_listener()" _note="full path:Live.Eq8Device.Eq8Device.View.remove_selected_band_listener()\nremove_selected_band_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;selected_band&quot;. C++ signature :  void remove_selected_band_listener(TEq8DevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="selected_band_has_listener()" _note="full path:Live.Eq8Device.Eq8Device.View.selected_band_has_listener()\nselected_band_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;selected_band&quot;. C++ signature :  bool selected_band_has_listener(TEq8DevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                </outline>
            </outline>
            <outline text="Properties">
                <outline text="_live_ptr" _note="full path:Live.Eq8Device.Eq8Device._live_ptr\n" type="label" _label="Property">
                </outline>
                <outline text="can_have_chains" _note="full path:Live.Eq8Device.Eq8Device.can_have_chains\nReturns true if the device is a rack." type="label" _label="Property">
                </outline>
                <outline text="can_have_drum_pads" _note="full path:Live.Eq8Device.Eq8Device.can_have_drum_pads\nReturns true if the device is a drum rack." type="label" _label="Property">
                </outline>
                <outline text="canonical_parent" _note="full path:Live.Eq8Device.Eq8Device.canonical_parent\nGet the canonical parent of the Device." type="label" _label="Property">
                </outline>
                <outline text="class_display_name" _note="full path:Live.Eq8Device.Eq8Device.class_display_name\nReturn const access to the name of the device's class name as displayed in Live's browser and device chain" type="label" _label="Property">
                </outline>
                <outline text="class_name" _note="full path:Live.Eq8Device.Eq8Device.class_name\nReturn const access to the name of the device's class." type="label" _label="Property">
                </outline>
                <outline text="edit_mode" _note="full path:Live.Eq8Device.Eq8Device.edit_mode\nAccess to Eq8's edit mode." type="label" _label="Property">
                </outline>
                <outline text="global_mode" _note="full path:Live.Eq8Device.Eq8Device.global_mode\nAccess to Eq8's global mode." type="label" _label="Property">
                </outline>
                <outline text="is_active" _note="full path:Live.Eq8Device.Eq8Device.is_active\nReturn const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off." type="label" _label="Property">
                </outline>
                <outline text="name" _note="full path:Live.Eq8Device.Eq8Device.name\nReturn access to the name of the device." type="label" _label="Property">
                </outline>
                <outline text="oversample" _note="full path:Live.Eq8Device.Eq8Device.oversample\nAccess to Eq8's oversample value." type="label" _label="Property">
                </outline>
                <outline text="parameters" _note="full path:Live.Eq8Device.Eq8Device.parameters\nConst access to the list of available automatable parameters for this device." type="label" _label="Property">
                </outline>
                <outline text="type" _note="full path:Live.Eq8Device.Eq8Device.type\nReturn the type of the device." type="label" _label="Property">
                </outline>
                <outline text="view" _note="full path:Live.Eq8Device.Eq8Device.view\nRepresenting the view aspects of a device." type="label" _label="Property">
                </outline>
            </outline>
            <outline text="Listeners">
                <outline text="add_edit_mode_listener()" _note="full path:Live.Eq8Device.Eq8Device.add_edit_mode_listener()\nadd_edit_mode_listener( (Eq8Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;edit_mode&quot; has changed. C++ signature :  void add_edit_mode_listener(TEq8DevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_global_mode_listener()" _note="full path:Live.Eq8Device.Eq8Device.add_global_mode_listener()\nadd_global_mode_listener( (Eq8Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;global_mode&quot; has changed. C++ signature :  void add_global_mode_listener(TEq8DevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_is_active_listener()" _note="full path:Live.Eq8Device.Eq8Device.add_is_active_listener()\nadd_is_active_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_active&quot; has changed. C++ signature :  void add_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_name_listener()" _note="full path:Live.Eq8Device.Eq8Device.add_name_listener()\nadd_name_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_oversample_listener()" _note="full path:Live.Eq8Device.Eq8Device.add_oversample_listener()\nadd_oversample_listener( (Eq8Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;oversample&quot; has changed. C++ signature :  void add_oversample_listener(TEq8DevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_parameters_listener()" _note="full path:Live.Eq8Device.Eq8Device.add_parameters_listener()\nadd_parameters_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;parameters&quot; has changed. C++ signature :  void add_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="edit_mode_has_listener()" _note="full path:Live.Eq8Device.Eq8Device.edit_mode_has_listener()\nedit_mode_has_listener( (Eq8Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;edit_mode&quot;. C++ signature :  bool edit_mode_has_listener(TEq8DevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="global_mode_has_listener()" _note="full path:Live.Eq8Device.Eq8Device.global_mode_has_listener()\nglobal_mode_has_listener( (Eq8Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;global_mode&quot;. C++ signature :  bool global_mode_has_listener(TEq8DevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="is_active_has_listener()" _note="full path:Live.Eq8Device.Eq8Device.is_active_has_listener()\nis_active_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_active&quot;. C++ signature :  bool is_active_has_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="name_has_listener()" _note="full path:Live.Eq8Device.Eq8Device.name_has_listener()\nname_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="oversample_has_listener()" _note="full path:Live.Eq8Device.Eq8Device.oversample_has_listener()\noversample_has_listener( (Eq8Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;oversample&quot;. C++ signature :  bool oversample_has_listener(TEq8DevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="parameters_has_listener()" _note="full path:Live.Eq8Device.Eq8Device.parameters_has_listener()\nparameters_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;parameters&quot;. C++ signature :  bool parameters_has_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_edit_mode_listener()" _note="full path:Live.Eq8Device.Eq8Device.remove_edit_mode_listener()\nremove_edit_mode_listener( (Eq8Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;edit_mode&quot;. C++ signature :  void remove_edit_mode_listener(TEq8DevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_global_mode_listener()" _note="full path:Live.Eq8Device.Eq8Device.remove_global_mode_listener()\nremove_global_mode_listener( (Eq8Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;global_mode&quot;. C++ signature :  void remove_global_mode_listener(TEq8DevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_is_active_listener()" _note="full path:Live.Eq8Device.Eq8Device.remove_is_active_listener()\nremove_is_active_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_active&quot;. C++ signature :  void remove_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_name_listener()" _note="full path:Live.Eq8Device.Eq8Device.remove_name_listener()\nremove_name_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_oversample_listener()" _note="full path:Live.Eq8Device.Eq8Device.remove_oversample_listener()\nremove_oversample_listener( (Eq8Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;oversample&quot;. C++ signature :  void remove_oversample_listener(TEq8DevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_parameters_listener()" _note="full path:Live.Eq8Device.Eq8Device.remove_parameters_listener()\nremove_parameters_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;parameters&quot;. C++ signature :  void remove_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
            </outline>
            <outline text="Methods">
                <outline text="store_chosen_bank()" _note="full path:Live.Eq8Device.Eq8Device.store_chosen_bank()\nstore_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -> None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle<ADevice>,int,int)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
        <outline text="GlobalMode" _note="full path:Live.Eq8Device.GlobalMode\n" type="label" _label="Class">
            <outline text="Values">
                <outline text="left_right" _note="full path:Live.Eq8Device.GlobalMode.left_right\n" type="label" _label="Value">
                </outline>
                <outline text="mid_side" _note="full path:Live.Eq8Device.GlobalMode.mid_side\n" type="label" _label="Value">
                </outline>
                <outline text="stereo" _note="full path:Live.Eq8Device.GlobalMode.stereo\n" type="label" _label="Value">
                </outline>
            </outline>
        </outline>
    </outline>
    <outline text="Groove" _note="full path:Live.Groove\n" type="label" _label="Module">
        <outline text="Base" _note="full path:Live.Groove.Base\n" type="label" _label="Class">
            <outline text="Values">
                <outline text="count" _note="full path:Live.Groove.Base.count\n" type="label" _label="Value">
                </outline>
                <outline text="gb_eight" _note="full path:Live.Groove.Base.gb_eight\n" type="label" _label="Value">
                </outline>
                <outline text="gb_eight_triplet" _note="full path:Live.Groove.Base.gb_eight_triplet\n" type="label" _label="Value">
                </outline>
                <outline text="gb_four" _note="full path:Live.Groove.Base.gb_four\n" type="label" _label="Value">
                </outline>
                <outline text="gb_sixteen" _note="full path:Live.Groove.Base.gb_sixteen\n" type="label" _label="Value">
                </outline>
                <outline text="gb_sixteen_triplet" _note="full path:Live.Groove.Base.gb_sixteen_triplet\n" type="label" _label="Value">
                </outline>
                <outline text="gb_thirtytwo" _note="full path:Live.Groove.Base.gb_thirtytwo\n" type="label" _label="Value">
                </outline>
            </outline>
        </outline>
        <outline text="Groove" _note="full path:Live.Groove.Groove\nThis class represents a groove in Live." type="label" _label="Class">
            <outline text="Properties">
                <outline text="_live_ptr" _note="full path:Live.Groove.Groove._live_ptr\n" type="label" _label="Property">
                </outline>
                <outline text="base" _note="full path:Live.Groove.Groove.base\nGet/set the groove's base grid." type="label" _label="Property">
                </outline>
                <outline text="name" _note="full path:Live.Groove.Groove.name\nRead/write/listen access to the groove's name" type="label" _label="Property">
                </outline>
                <outline text="quantization_amount" _note="full path:Live.Groove.Groove.quantization_amount\nRead/write/listen access to the groove's quantization amount." type="label" _label="Property">
                </outline>
                <outline text="random_amount" _note="full path:Live.Groove.Groove.random_amount\nRead/write/listen access to the groove's random amount." type="label" _label="Property">
                </outline>
                <outline text="timing_amount" _note="full path:Live.Groove.Groove.timing_amount\nRead/write/listen access to the groove's timing amount." type="label" _label="Property">
                </outline>
                <outline text="velocity_amount" _note="full path:Live.Groove.Groove.velocity_amount\nRead/write/listen access to the groove's velocity amount." type="label" _label="Property">
                </outline>
            </outline>
            <outline text="Listeners">
                <outline text="add_name_listener()" _note="full path:Live.Groove.Groove.add_name_listener()\nadd_name_listener( (Groove)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TPyHandle<AGroove>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_quantization_amount_listener()" _note="full path:Live.Groove.Groove.add_quantization_amount_listener()\nadd_quantization_amount_listener( (Groove)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;quantization_amount&quot; has changed. C++ signature :  void add_quantization_amount_listener(TPyHandle<AGroove>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_random_amount_listener()" _note="full path:Live.Groove.Groove.add_random_amount_listener()\nadd_random_amount_listener( (Groove)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;random_amount&quot; has changed. C++ signature :  void add_random_amount_listener(TPyHandle<AGroove>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_timing_amount_listener()" _note="full path:Live.Groove.Groove.add_timing_amount_listener()\nadd_timing_amount_listener( (Groove)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;timing_amount&quot; has changed. C++ signature :  void add_timing_amount_listener(TPyHandle<AGroove>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_velocity_amount_listener()" _note="full path:Live.Groove.Groove.add_velocity_amount_listener()\nadd_velocity_amount_listener( (Groove)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;velocity_amount&quot; has changed. C++ signature :  void add_velocity_amount_listener(TPyHandle<AGroove>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="name_has_listener()" _note="full path:Live.Groove.Groove.name_has_listener()\nname_has_listener( (Groove)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TPyHandle<AGroove>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="quantization_amount_has_listener()" _note="full path:Live.Groove.Groove.quantization_amount_has_listener()\nquantization_amount_has_listener( (Groove)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;quantization_amount&quot;. C++ signature :  bool quantization_amount_has_listener(TPyHandle<AGroove>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="random_amount_has_listener()" _note="full path:Live.Groove.Groove.random_amount_has_listener()\nrandom_amount_has_listener( (Groove)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;random_amount&quot;. C++ signature :  bool random_amount_has_listener(TPyHandle<AGroove>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_name_listener()" _note="full path:Live.Groove.Groove.remove_name_listener()\nremove_name_listener( (Groove)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TPyHandle<AGroove>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_quantization_amount_listener()" _note="full path:Live.Groove.Groove.remove_quantization_amount_listener()\nremove_quantization_amount_listener( (Groove)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;quantization_amount&quot;. C++ signature :  void remove_quantization_amount_listener(TPyHandle<AGroove>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_random_amount_listener()" _note="full path:Live.Groove.Groove.remove_random_amount_listener()\nremove_random_amount_listener( (Groove)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;random_amount&quot;. C++ signature :  void remove_random_amount_listener(TPyHandle<AGroove>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_timing_amount_listener()" _note="full path:Live.Groove.Groove.remove_timing_amount_listener()\nremove_timing_amount_listener( (Groove)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;timing_amount&quot;. C++ signature :  void remove_timing_amount_listener(TPyHandle<AGroove>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_velocity_amount_listener()" _note="full path:Live.Groove.Groove.remove_velocity_amount_listener()\nremove_velocity_amount_listener( (Groove)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;velocity_amount&quot;. C++ signature :  void remove_velocity_amount_listener(TPyHandle<AGroove>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="timing_amount_has_listener()" _note="full path:Live.Groove.Groove.timing_amount_has_listener()\ntiming_amount_has_listener( (Groove)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;timing_amount&quot;. C++ signature :  bool timing_amount_has_listener(TPyHandle<AGroove>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="velocity_amount_has_listener()" _note="full path:Live.Groove.Groove.velocity_amount_has_listener()\nvelocity_amount_has_listener( (Groove)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;velocity_amount&quot;. C++ signature :  bool velocity_amount_has_listener(TPyHandle<AGroove>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
            </outline>
        </outline>
    </outline>
    <outline text="GroovePool" _note="full path:Live.GroovePool\n" type="label" _label="Module">
        <outline text="GroovePool" _note="full path:Live.GroovePool.GroovePool\nThis class represents the groove pool in Live." type="label" _label="Class">
            <outline text="Properties">
                <outline text="_live_ptr" _note="full path:Live.GroovePool.GroovePool._live_ptr\n" type="label" _label="Property">
                </outline>
                <outline text="grooves" _note="full path:Live.GroovePool.GroovePool.grooves\nAccess to the list of grooves" type="label" _label="Property">
                </outline>
            </outline>
            <outline text="Listeners">
                <outline text="add_grooves_listener()" _note="full path:Live.GroovePool.GroovePool.add_grooves_listener()\nadd_grooves_listener( (GroovePool)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;grooves&quot; has changed. C++ signature :  void add_grooves_listener(TPyHandle<AGroovePool>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="grooves_has_listener()" _note="full path:Live.GroovePool.GroovePool.grooves_has_listener()\ngrooves_has_listener( (GroovePool)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;grooves&quot;. C++ signature :  bool grooves_has_listener(TPyHandle<AGroovePool>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_grooves_listener()" _note="full path:Live.GroovePool.GroovePool.remove_grooves_listener()\nremove_grooves_listener( (GroovePool)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;grooves&quot;. C++ signature :  void remove_grooves_listener(TPyHandle<AGroovePool>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
            </outline>
        </outline>
    </outline>
    <outline text="HybridReverbDevice" _note="full path:Live.HybridReverbDevice\n" type="label" _label="Module">
        <outline text="HybridReverbDevice" _note="full path:Live.HybridReverbDevice.HybridReverbDevice\nThis class represents a Hybrid Reverb device." type="label" _label="Class">
            <outline text="View" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.View\nRepresenting the view aspects of a device." type="label" _label="Class">
                <outline text="Properties">
                    <outline text="_live_ptr" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.View._live_ptr\n" type="label" _label="Property">
                    </outline>
                    <outline text="canonical_parent" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.View.canonical_parent\nGet the canonical parent of the View." type="label" _label="Property">
                    </outline>
                    <outline text="is_collapsed" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.View.is_collapsed\nGet/Set/Listen if the device is shown collapsed in the device chain." type="label" _label="Property">
                    </outline>
                </outline>
                <outline text="Listeners">
                    <outline text="add_is_collapsed_listener()" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.View.add_is_collapsed_listener()\nadd_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_collapsed&quot; has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="is_collapsed_has_listener()" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.View.is_collapsed_has_listener()\nis_collapsed_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_collapsed&quot;. C++ signature :  bool is_collapsed_has_listener(TPyViewData<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_is_collapsed_listener()" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.View.remove_is_collapsed_listener()\nremove_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_collapsed&quot;. C++ signature :  void remove_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                </outline>
            </outline>
            <outline text="Properties">
                <outline text="_live_ptr" _note="full path:Live.HybridReverbDevice.HybridReverbDevice._live_ptr\n" type="label" _label="Property">
                </outline>
                <outline text="can_have_chains" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.can_have_chains\nReturns true if the device is a rack." type="label" _label="Property">
                </outline>
                <outline text="can_have_drum_pads" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.can_have_drum_pads\nReturns true if the device is a drum rack." type="label" _label="Property">
                </outline>
                <outline text="canonical_parent" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.canonical_parent\nGet the canonical parent of the Device." type="label" _label="Property">
                </outline>
                <outline text="class_display_name" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.class_display_name\nReturn const access to the name of the device's class name as displayed in Live's browser and device chain" type="label" _label="Property">
                </outline>
                <outline text="class_name" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.class_name\nReturn const access to the name of the device's class." type="label" _label="Property">
                </outline>
                <outline text="ir_attack_time" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.ir_attack_time\nReturn the current IrAttackTime" type="label" _label="Property">
                </outline>
                <outline text="ir_category_index" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.ir_category_index\nReturn the current IR category index" type="label" _label="Property">
                </outline>
                <outline text="ir_category_list" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.ir_category_list\nReturn the current IR categories list" type="label" _label="Property">
                </outline>
                <outline text="ir_decay_time" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.ir_decay_time\nReturn the current IrDecayTime" type="label" _label="Property">
                </outline>
                <outline text="ir_file_index" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.ir_file_index\nReturn the current IR file index" type="label" _label="Property">
                </outline>
                <outline text="ir_file_list" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.ir_file_list\nReturn the current IR file list" type="label" _label="Property">
                </outline>
                <outline text="ir_size_factor" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.ir_size_factor\nReturn the current IrSizeFactor" type="label" _label="Property">
                </outline>
                <outline text="ir_time_shaping_on" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.ir_time_shaping_on\nReturn the current IrTimeShapingOn" type="label" _label="Property">
                </outline>
                <outline text="is_active" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.is_active\nReturn const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off." type="label" _label="Property">
                </outline>
                <outline text="name" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.name\nReturn access to the name of the device." type="label" _label="Property">
                </outline>
                <outline text="parameters" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.parameters\nConst access to the list of available automatable parameters for this device." type="label" _label="Property">
                </outline>
                <outline text="type" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.type\nReturn the type of the device." type="label" _label="Property">
                </outline>
                <outline text="view" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.view\nRepresenting the view aspects of a device." type="label" _label="Property">
                </outline>
            </outline>
            <outline text="Listeners">
                <outline text="add_ir_attack_time_listener()" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.add_ir_attack_time_listener()\nadd_ir_attack_time_listener( (HybridReverbDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;ir_attack_time&quot; has changed. C++ signature :  void add_ir_attack_time_listener(THybridReverbDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_ir_category_index_listener()" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.add_ir_category_index_listener()\nadd_ir_category_index_listener( (HybridReverbDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;ir_category_index&quot; has changed. C++ signature :  void add_ir_category_index_listener(THybridReverbDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_ir_decay_time_listener()" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.add_ir_decay_time_listener()\nadd_ir_decay_time_listener( (HybridReverbDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;ir_decay_time&quot; has changed. C++ signature :  void add_ir_decay_time_listener(THybridReverbDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_ir_file_index_listener()" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.add_ir_file_index_listener()\nadd_ir_file_index_listener( (HybridReverbDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;ir_file_index&quot; has changed. C++ signature :  void add_ir_file_index_listener(THybridReverbDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_ir_file_list_listener()" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.add_ir_file_list_listener()\nadd_ir_file_list_listener( (HybridReverbDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;ir_file_list&quot; has changed. C++ signature :  void add_ir_file_list_listener(THybridReverbDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_ir_size_factor_listener()" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.add_ir_size_factor_listener()\nadd_ir_size_factor_listener( (HybridReverbDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;ir_size_factor&quot; has changed. C++ signature :  void add_ir_size_factor_listener(THybridReverbDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_ir_time_shaping_on_listener()" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.add_ir_time_shaping_on_listener()\nadd_ir_time_shaping_on_listener( (HybridReverbDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;ir_time_shaping_on&quot; has changed. C++ signature :  void add_ir_time_shaping_on_listener(THybridReverbDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_is_active_listener()" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.add_is_active_listener()\nadd_is_active_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_active&quot; has changed. C++ signature :  void add_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_name_listener()" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.add_name_listener()\nadd_name_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_parameters_listener()" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.add_parameters_listener()\nadd_parameters_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;parameters&quot; has changed. C++ signature :  void add_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="ir_attack_time_has_listener()" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.ir_attack_time_has_listener()\nir_attack_time_has_listener( (HybridReverbDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;ir_attack_time&quot;. C++ signature :  bool ir_attack_time_has_listener(THybridReverbDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="ir_category_index_has_listener()" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.ir_category_index_has_listener()\nir_category_index_has_listener( (HybridReverbDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;ir_category_index&quot;. C++ signature :  bool ir_category_index_has_listener(THybridReverbDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="ir_decay_time_has_listener()" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.ir_decay_time_has_listener()\nir_decay_time_has_listener( (HybridReverbDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;ir_decay_time&quot;. C++ signature :  bool ir_decay_time_has_listener(THybridReverbDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="ir_file_index_has_listener()" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.ir_file_index_has_listener()\nir_file_index_has_listener( (HybridReverbDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;ir_file_index&quot;. C++ signature :  bool ir_file_index_has_listener(THybridReverbDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="ir_file_list_has_listener()" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.ir_file_list_has_listener()\nir_file_list_has_listener( (HybridReverbDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;ir_file_list&quot;. C++ signature :  bool ir_file_list_has_listener(THybridReverbDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="ir_size_factor_has_listener()" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.ir_size_factor_has_listener()\nir_size_factor_has_listener( (HybridReverbDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;ir_size_factor&quot;. C++ signature :  bool ir_size_factor_has_listener(THybridReverbDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="ir_time_shaping_on_has_listener()" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.ir_time_shaping_on_has_listener()\nir_time_shaping_on_has_listener( (HybridReverbDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;ir_time_shaping_on&quot;. C++ signature :  bool ir_time_shaping_on_has_listener(THybridReverbDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="is_active_has_listener()" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.is_active_has_listener()\nis_active_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_active&quot;. C++ signature :  bool is_active_has_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="name_has_listener()" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.name_has_listener()\nname_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="parameters_has_listener()" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.parameters_has_listener()\nparameters_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;parameters&quot;. C++ signature :  bool parameters_has_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_ir_attack_time_listener()" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.remove_ir_attack_time_listener()\nremove_ir_attack_time_listener( (HybridReverbDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;ir_attack_time&quot;. C++ signature :  void remove_ir_attack_time_listener(THybridReverbDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_ir_category_index_listener()" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.remove_ir_category_index_listener()\nremove_ir_category_index_listener( (HybridReverbDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;ir_category_index&quot;. C++ signature :  void remove_ir_category_index_listener(THybridReverbDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_ir_decay_time_listener()" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.remove_ir_decay_time_listener()\nremove_ir_decay_time_listener( (HybridReverbDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;ir_decay_time&quot;. C++ signature :  void remove_ir_decay_time_listener(THybridReverbDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_ir_file_index_listener()" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.remove_ir_file_index_listener()\nremove_ir_file_index_listener( (HybridReverbDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;ir_file_index&quot;. C++ signature :  void remove_ir_file_index_listener(THybridReverbDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_ir_file_list_listener()" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.remove_ir_file_list_listener()\nremove_ir_file_list_listener( (HybridReverbDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;ir_file_list&quot;. C++ signature :  void remove_ir_file_list_listener(THybridReverbDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_ir_size_factor_listener()" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.remove_ir_size_factor_listener()\nremove_ir_size_factor_listener( (HybridReverbDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;ir_size_factor&quot;. C++ signature :  void remove_ir_size_factor_listener(THybridReverbDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_ir_time_shaping_on_listener()" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.remove_ir_time_shaping_on_listener()\nremove_ir_time_shaping_on_listener( (HybridReverbDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;ir_time_shaping_on&quot;. C++ signature :  void remove_ir_time_shaping_on_listener(THybridReverbDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_is_active_listener()" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.remove_is_active_listener()\nremove_is_active_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_active&quot;. C++ signature :  void remove_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_name_listener()" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.remove_name_listener()\nremove_name_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_parameters_listener()" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.remove_parameters_listener()\nremove_parameters_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;parameters&quot;. C++ signature :  void remove_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
            </outline>
            <outline text="Methods">
                <outline text="store_chosen_bank()" _note="full path:Live.HybridReverbDevice.HybridReverbDevice.store_chosen_bank()\nstore_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -> None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle<ADevice>,int,int)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
    </outline>
    <outline text="Listener" _note="full path:Live.Listener\n" type="label" _label="Module">
        <outline text="ListenerHandle" _note="full path:Live.Listener.ListenerHandle\nThis class represents a Python listener when connected to a Live property." type="label" _label="Class">
            <outline text="Properties">
                <outline text="listener_func" _note="full path:Live.Listener.ListenerHandle.listener_func\nReturns the original function" type="label" _label="Property">
                </outline>
                <outline text="listener_self" _note="full path:Live.Listener.ListenerHandle.listener_self\nReturns the weak reference to original self, if it was a bound method" type="label" _label="Property">
                </outline>
                <outline text="name" _note="full path:Live.Listener.ListenerHandle.name\nPrints the name of the property that this listener is connected to" type="label" _label="Property">
                </outline>
            </outline>
            <outline text="Methods">
                <outline text="disconnect()" _note="full path:Live.Listener.ListenerHandle.disconnect()\ndisconnect( (ListenerHandle)arg1) -> None : Disconnects the listener from its property C++ signature :  void disconnect(LPythonRemote {lvalue})" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
        <outline text="ListenerVector" _note="full path:Live.Listener.ListenerVector\nA read only container for accessing a list of listeners." type="label" _label="Class">
            <outline text="Methods">
                <outline text="append()" _note="full path:Live.Listener.ListenerVector.append()\nappend( (ListenerVector)arg1, (object)arg2) -> None : C++ signature :  void append(std::__1::vector<TWeakPtr<LPythonRemote>, std::__1::allocator<TWeakPtr<LPythonRemote> > > {lvalue},boost::python::api::object)" type="label" _label="Method">
                </outline>
                <outline text="extend()" _note="full path:Live.Listener.ListenerVector.extend()\nextend( (ListenerVector)arg1, (object)arg2) -> None : C++ signature :  void extend(std::__1::vector<TWeakPtr<LPythonRemote>, std::__1::allocator<TWeakPtr<LPythonRemote> > > {lvalue},boost::python::api::object)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
    </outline>
    <outline text="LomObject" _note="full path:Live.LomObject\n" type="label" _label="Module">
        <outline text="LomObject" _note="full path:Live.LomObject.LomObject\nthis is the base class for an object that is accessible via the LOM" type="label" _label="Class">
            <outline text="Properties">
                <outline text="_live_ptr" _note="full path:Live.LomObject.LomObject._live_ptr\n" type="label" _label="Property">
                </outline>
            </outline>
        </outline>
    </outline>
    <outline text="MaxDevice" _note="full path:Live.MaxDevice\n" type="label" _label="Module">
        <outline text="MaxDevice" _note="full path:Live.MaxDevice.MaxDevice\nThis class represents a Max for Live device." type="label" _label="Class">
            <outline text="View" _note="full path:Live.MaxDevice.MaxDevice.View\nRepresenting the view aspects of a device." type="label" _label="Class">
                <outline text="Properties">
                    <outline text="_live_ptr" _note="full path:Live.MaxDevice.MaxDevice.View._live_ptr\n" type="label" _label="Property">
                    </outline>
                    <outline text="canonical_parent" _note="full path:Live.MaxDevice.MaxDevice.View.canonical_parent\nGet the canonical parent of the View." type="label" _label="Property">
                    </outline>
                    <outline text="is_collapsed" _note="full path:Live.MaxDevice.MaxDevice.View.is_collapsed\nGet/Set/Listen if the device is shown collapsed in the device chain." type="label" _label="Property">
                    </outline>
                </outline>
                <outline text="Listeners">
                    <outline text="add_is_collapsed_listener()" _note="full path:Live.MaxDevice.MaxDevice.View.add_is_collapsed_listener()\nadd_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_collapsed&quot; has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="is_collapsed_has_listener()" _note="full path:Live.MaxDevice.MaxDevice.View.is_collapsed_has_listener()\nis_collapsed_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_collapsed&quot;. C++ signature :  bool is_collapsed_has_listener(TPyViewData<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_is_collapsed_listener()" _note="full path:Live.MaxDevice.MaxDevice.View.remove_is_collapsed_listener()\nremove_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_collapsed&quot;. C++ signature :  void remove_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                </outline>
            </outline>
            <outline text="Properties">
                <outline text="_live_ptr" _note="full path:Live.MaxDevice.MaxDevice._live_ptr\n" type="label" _label="Property">
                </outline>
                <outline text="audio_inputs" _note="full path:Live.MaxDevice.MaxDevice.audio_inputs\nConst access to a list of all audio inputs of the device." type="label" _label="Property">
                </outline>
                <outline text="audio_outputs" _note="full path:Live.MaxDevice.MaxDevice.audio_outputs\nConst access to a list of all audio outputs of the device." type="label" _label="Property">
                </outline>
                <outline text="can_have_chains" _note="full path:Live.MaxDevice.MaxDevice.can_have_chains\nReturns true if the device is a rack." type="label" _label="Property">
                </outline>
                <outline text="can_have_drum_pads" _note="full path:Live.MaxDevice.MaxDevice.can_have_drum_pads\nReturns true if the device is a drum rack." type="label" _label="Property">
                </outline>
                <outline text="canonical_parent" _note="full path:Live.MaxDevice.MaxDevice.canonical_parent\nGet the canonical parent of the Device." type="label" _label="Property">
                </outline>
                <outline text="class_display_name" _note="full path:Live.MaxDevice.MaxDevice.class_display_name\nReturn const access to the name of the device's class name as displayed in Live's browser and device chain" type="label" _label="Property">
                </outline>
                <outline text="class_name" _note="full path:Live.MaxDevice.MaxDevice.class_name\nReturn const access to the name of the device's class." type="label" _label="Property">
                </outline>
                <outline text="is_active" _note="full path:Live.MaxDevice.MaxDevice.is_active\nReturn const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off." type="label" _label="Property">
                </outline>
                <outline text="midi_inputs" _note="full path:Live.MaxDevice.MaxDevice.midi_inputs\nConst access to a list of all midi outputs of the device." type="label" _label="Property">
                </outline>
                <outline text="midi_outputs" _note="full path:Live.MaxDevice.MaxDevice.midi_outputs\nConst access to a list of all midi outputs of the device." type="label" _label="Property">
                </outline>
                <outline text="name" _note="full path:Live.MaxDevice.MaxDevice.name\nReturn access to the name of the device." type="label" _label="Property">
                </outline>
                <outline text="parameters" _note="full path:Live.MaxDevice.MaxDevice.parameters\nConst access to the list of available automatable parameters for this device." type="label" _label="Property">
                </outline>
                <outline text="type" _note="full path:Live.MaxDevice.MaxDevice.type\nReturn the type of the device." type="label" _label="Property">
                </outline>
                <outline text="view" _note="full path:Live.MaxDevice.MaxDevice.view\nRepresenting the view aspects of a device." type="label" _label="Property">
                </outline>
            </outline>
            <outline text="Listeners">
                <outline text="add_audio_inputs_listener()" _note="full path:Live.MaxDevice.MaxDevice.add_audio_inputs_listener()\nadd_audio_inputs_listener( (MaxDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;audio_inputs&quot; has changed. C++ signature :  void add_audio_inputs_listener(TMaxDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_audio_outputs_listener()" _note="full path:Live.MaxDevice.MaxDevice.add_audio_outputs_listener()\nadd_audio_outputs_listener( (MaxDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;audio_outputs&quot; has changed. C++ signature :  void add_audio_outputs_listener(TMaxDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_bank_parameters_changed_listener()" _note="full path:Live.MaxDevice.MaxDevice.add_bank_parameters_changed_listener()\nadd_bank_parameters_changed_listener( (MaxDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;bank_parameters_changed&quot; has changed. C++ signature :  void add_bank_parameters_changed_listener(TMaxDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_is_active_listener()" _note="full path:Live.MaxDevice.MaxDevice.add_is_active_listener()\nadd_is_active_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_active&quot; has changed. C++ signature :  void add_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_midi_inputs_listener()" _note="full path:Live.MaxDevice.MaxDevice.add_midi_inputs_listener()\nadd_midi_inputs_listener( (MaxDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;midi_inputs&quot; has changed. C++ signature :  void add_midi_inputs_listener(TMaxDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_midi_outputs_listener()" _note="full path:Live.MaxDevice.MaxDevice.add_midi_outputs_listener()\nadd_midi_outputs_listener( (MaxDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;midi_outputs&quot; has changed. C++ signature :  void add_midi_outputs_listener(TMaxDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_name_listener()" _note="full path:Live.MaxDevice.MaxDevice.add_name_listener()\nadd_name_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_parameters_listener()" _note="full path:Live.MaxDevice.MaxDevice.add_parameters_listener()\nadd_parameters_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;parameters&quot; has changed. C++ signature :  void add_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="audio_inputs_has_listener()" _note="full path:Live.MaxDevice.MaxDevice.audio_inputs_has_listener()\naudio_inputs_has_listener( (MaxDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;audio_inputs&quot;. C++ signature :  bool audio_inputs_has_listener(TMaxDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="audio_outputs_has_listener()" _note="full path:Live.MaxDevice.MaxDevice.audio_outputs_has_listener()\naudio_outputs_has_listener( (MaxDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;audio_outputs&quot;. C++ signature :  bool audio_outputs_has_listener(TMaxDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="bank_parameters_changed_has_listener()" _note="full path:Live.MaxDevice.MaxDevice.bank_parameters_changed_has_listener()\nbank_parameters_changed_has_listener( (MaxDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;bank_parameters_changed&quot;. C++ signature :  bool bank_parameters_changed_has_listener(TMaxDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="is_active_has_listener()" _note="full path:Live.MaxDevice.MaxDevice.is_active_has_listener()\nis_active_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_active&quot;. C++ signature :  bool is_active_has_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="midi_inputs_has_listener()" _note="full path:Live.MaxDevice.MaxDevice.midi_inputs_has_listener()\nmidi_inputs_has_listener( (MaxDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;midi_inputs&quot;. C++ signature :  bool midi_inputs_has_listener(TMaxDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="midi_outputs_has_listener()" _note="full path:Live.MaxDevice.MaxDevice.midi_outputs_has_listener()\nmidi_outputs_has_listener( (MaxDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;midi_outputs&quot;. C++ signature :  bool midi_outputs_has_listener(TMaxDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="name_has_listener()" _note="full path:Live.MaxDevice.MaxDevice.name_has_listener()\nname_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="parameters_has_listener()" _note="full path:Live.MaxDevice.MaxDevice.parameters_has_listener()\nparameters_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;parameters&quot;. C++ signature :  bool parameters_has_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_audio_inputs_listener()" _note="full path:Live.MaxDevice.MaxDevice.remove_audio_inputs_listener()\nremove_audio_inputs_listener( (MaxDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;audio_inputs&quot;. C++ signature :  void remove_audio_inputs_listener(TMaxDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_audio_outputs_listener()" _note="full path:Live.MaxDevice.MaxDevice.remove_audio_outputs_listener()\nremove_audio_outputs_listener( (MaxDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;audio_outputs&quot;. C++ signature :  void remove_audio_outputs_listener(TMaxDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_bank_parameters_changed_listener()" _note="full path:Live.MaxDevice.MaxDevice.remove_bank_parameters_changed_listener()\nremove_bank_parameters_changed_listener( (MaxDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;bank_parameters_changed&quot;. C++ signature :  void remove_bank_parameters_changed_listener(TMaxDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_is_active_listener()" _note="full path:Live.MaxDevice.MaxDevice.remove_is_active_listener()\nremove_is_active_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_active&quot;. C++ signature :  void remove_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_midi_inputs_listener()" _note="full path:Live.MaxDevice.MaxDevice.remove_midi_inputs_listener()\nremove_midi_inputs_listener( (MaxDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;midi_inputs&quot;. C++ signature :  void remove_midi_inputs_listener(TMaxDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_midi_outputs_listener()" _note="full path:Live.MaxDevice.MaxDevice.remove_midi_outputs_listener()\nremove_midi_outputs_listener( (MaxDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;midi_outputs&quot;. C++ signature :  void remove_midi_outputs_listener(TMaxDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_name_listener()" _note="full path:Live.MaxDevice.MaxDevice.remove_name_listener()\nremove_name_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_parameters_listener()" _note="full path:Live.MaxDevice.MaxDevice.remove_parameters_listener()\nremove_parameters_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;parameters&quot;. C++ signature :  void remove_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
            </outline>
            <outline text="Methods">
                <outline text="get_bank_count()" _note="full path:Live.MaxDevice.MaxDevice.get_bank_count()\nget_bank_count( (MaxDevice)arg1) -> int : Get the number of parameter banks. This is related to hardware control surfaces. C++ signature :  int get_bank_count(TMaxDevicePyHandle)" type="label" _label="Method">
                </outline>
                <outline text="get_bank_name()" _note="full path:Live.MaxDevice.MaxDevice.get_bank_name()\nget_bank_name( (MaxDevice)arg1, (int)arg2) -> unicode : Get the name of a parameter bank given by index. This is related to hardware control surfaces. C++ signature :  TString get_bank_name(TMaxDevicePyHandle,int)" type="label" _label="Method">
                </outline>
                <outline text="get_bank_parameters()" _note="full path:Live.MaxDevice.MaxDevice.get_bank_parameters()\nget_bank_parameters( (MaxDevice)arg1, (int)arg2) -> list : Get the indices of parameters of the given bank index. Empty slots are marked as -1. Bank index -1 refers to the best-of bank. This function is related to hardware control surfaces. C++ signature :  boost::python::list get_bank_parameters(TMaxDevicePyHandle,int)" type="label" _label="Method">
                </outline>
                <outline text="get_value_item_icons()" _note="full path:Live.MaxDevice.MaxDevice.get_value_item_icons()\nget_value_item_icons( (MaxDevice)arg1, (DeviceParameter)arg2) -> list : Get a list of icon identifier strings for a list parameter's values.An empty string is given where no icon should be displayed.An empty list is given when no icons should be displayed.This is related to hardware control surfaces. C++ signature :  boost::python::list get_value_item_icons(TMaxDevicePyHandle,TPyHandle<ATimeableValue>)" type="label" _label="Method">
                </outline>
                <outline text="store_chosen_bank()" _note="full path:Live.MaxDevice.MaxDevice.store_chosen_bank()\nstore_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -> None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle<ADevice>,int,int)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
    </outline>
    <outline text="MidiMap" _note="full path:Live.MidiMap\n" type="label" _label="Module">
        <outline text="forward_midi_cc()" _note="full path:Live.MidiMap.forward_midi_cc()\nforward_midi_cc( (int)arg1, (int)arg2, (int)arg3, (int)arg4 [, (bool)ShouldConsumeEvent=True]) -> bool : C++ signature :  bool forward_midi_cc(unsigned int,unsigned int,int,int [,bool=True])" type="label" _label="Built-In">
        </outline>
        <outline text="forward_midi_note()" _note="full path:Live.MidiMap.forward_midi_note()\nforward_midi_note( (int)arg1, (int)arg2, (int)arg3, (int)arg4 [, (bool)ShouldConsumeEvent=True]) -> bool : C++ signature :  bool forward_midi_note(unsigned int,unsigned int,int,int [,bool=True])" type="label" _label="Built-In">
        </outline>
        <outline text="forward_midi_pitchbend()" _note="full path:Live.MidiMap.forward_midi_pitchbend()\nforward_midi_pitchbend( (int)arg1, (int)arg2, (int)arg3) -> bool : C++ signature :  bool forward_midi_pitchbend(unsigned int,unsigned int,int)" type="label" _label="Built-In">
        </outline>
        <outline text="map_midi_cc()" _note="full path:Live.MidiMap.map_midi_cc()\nmap_midi_cc( (int)midi_map_handle, (DeviceParameter)parameter, (int)midi_channel, (int)controller_number, (MapMode)map_mode, (bool)avoid_takeover [, (float)sensitivity=1.0]) -> bool : C++ signature :  bool map_midi_cc(unsigned int,TPyHandle<ATimeableValue>,int,int,NRemoteMapperTypes::TControllerMapMode,bool [,float=1.0])" type="label" _label="Built-In">
        </outline>
        <outline text="map_midi_cc_with_feedback_map()" _note="full path:Live.MidiMap.map_midi_cc_with_feedback_map()\nmap_midi_cc_with_feedback_map( (int)midi_map_handle, (DeviceParameter)parameter, (int)midi_channel, (int)controller_number, (MapMode)map_mode, (CCFeedbackRule)feedback_rule, (bool)avoid_takeover [, (float)sensitivity=1.0]) -> bool : C++ signature :  bool map_midi_cc_with_feedback_map(unsigned int,TPyHandle<ATimeableValue>,int,int,NRemoteMapperTypes::TControllerMapMode,NPythonMidiMap::TCCFeedbackRule,bool [,float=1.0])" type="label" _label="Built-In">
        </outline>
        <outline text="map_midi_note()" _note="full path:Live.MidiMap.map_midi_note()\nmap_midi_note( (int)arg1, (DeviceParameter)arg2, (int)arg3, (int)arg4) -> bool : C++ signature :  bool map_midi_note(unsigned int,TPyHandle<ATimeableValue>,int,int)" type="label" _label="Built-In">
        </outline>
        <outline text="map_midi_note_with_feedback_map()" _note="full path:Live.MidiMap.map_midi_note_with_feedback_map()\nmap_midi_note_with_feedback_map( (int)arg1, (DeviceParameter)arg2, (int)arg3, (int)arg4, (NoteFeedbackRule)arg5) -> bool : C++ signature :  bool map_midi_note_with_feedback_map(unsigned int,TPyHandle<ATimeableValue>,int,int,NPythonMidiMap::TNoteFeedbackRule)" type="label" _label="Built-In">
        </outline>
        <outline text="map_midi_pitchbend()" _note="full path:Live.MidiMap.map_midi_pitchbend()\nmap_midi_pitchbend( (int)arg1, (DeviceParameter)arg2, (int)arg3, (bool)arg4) -> bool : C++ signature :  bool map_midi_pitchbend(unsigned int,TPyHandle<ATimeableValue>,int,bool)" type="label" _label="Built-In">
        </outline>
        <outline text="map_midi_pitchbend_with_feedback_map()" _note="full path:Live.MidiMap.map_midi_pitchbend_with_feedback_map()\nmap_midi_pitchbend_with_feedback_map( (int)arg1, (DeviceParameter)arg2, (int)arg3, (PitchBendFeedbackRule)arg4, (bool)arg5) -> bool : C++ signature :  bool map_midi_pitchbend_with_feedback_map(unsigned int,TPyHandle<ATimeableValue>,int,NPythonMidiMap::TPitchBendFeedbackRule,bool)" type="label" _label="Built-In">
        </outline>
        <outline text="send_feedback_for_parameter()" _note="full path:Live.MidiMap.send_feedback_for_parameter()\nsend_feedback_for_parameter( (int)arg1, (DeviceParameter)arg2) -> None : C++ signature :  void send_feedback_for_parameter(unsigned int,TPyHandle<ATimeableValue>)" type="label" _label="Built-In">
        </outline>
        <outline text="CCFeedbackRule" _note="full path:Live.MidiMap.CCFeedbackRule\nStructure to define feedback properties of MIDI mappings." type="label" _label="Class">
            <outline text="Properties">
                <outline text="cc_no" _note="full path:Live.MidiMap.CCFeedbackRule.cc_no\n" type="label" _label="Property">
                </outline>
                <outline text="cc_value_map" _note="full path:Live.MidiMap.CCFeedbackRule.cc_value_map\n" type="label" _label="Property">
                </outline>
                <outline text="channel" _note="full path:Live.MidiMap.CCFeedbackRule.channel\n" type="label" _label="Property">
                </outline>
                <outline text="delay_in_ms" _note="full path:Live.MidiMap.CCFeedbackRule.delay_in_ms\n" type="label" _label="Property">
                </outline>
            </outline>
        </outline>
        <outline text="MapMode" _note="full path:Live.MidiMap.MapMode\n" type="label" _label="Class">
            <outline text="Values">
                <outline text="absolute" _note="full path:Live.MidiMap.MapMode.absolute\n" type="label" _label="Value">
                </outline>
                <outline text="absolute_14_bit" _note="full path:Live.MidiMap.MapMode.absolute_14_bit\n" type="label" _label="Value">
                </outline>
                <outline text="relative_binary_offset" _note="full path:Live.MidiMap.MapMode.relative_binary_offset\n" type="label" _label="Value">
                </outline>
                <outline text="relative_signed_bit" _note="full path:Live.MidiMap.MapMode.relative_signed_bit\n" type="label" _label="Value">
                </outline>
                <outline text="relative_signed_bit2" _note="full path:Live.MidiMap.MapMode.relative_signed_bit2\n" type="label" _label="Value">
                </outline>
                <outline text="relative_smooth_binary_offset" _note="full path:Live.MidiMap.MapMode.relative_smooth_binary_offset\n" type="label" _label="Value">
                </outline>
                <outline text="relative_smooth_signed_bit" _note="full path:Live.MidiMap.MapMode.relative_smooth_signed_bit\n" type="label" _label="Value">
                </outline>
                <outline text="relative_smooth_signed_bit2" _note="full path:Live.MidiMap.MapMode.relative_smooth_signed_bit2\n" type="label" _label="Value">
                </outline>
                <outline text="relative_smooth_two_compliment" _note="full path:Live.MidiMap.MapMode.relative_smooth_two_compliment\n" type="label" _label="Value">
                </outline>
                <outline text="relative_two_compliment" _note="full path:Live.MidiMap.MapMode.relative_two_compliment\n" type="label" _label="Value">
                </outline>
            </outline>
        </outline>
        <outline text="NoteFeedbackRule" _note="full path:Live.MidiMap.NoteFeedbackRule\nStructure to define feedback properties of MIDI mappings." type="label" _label="Class">
            <outline text="Properties">
                <outline text="channel" _note="full path:Live.MidiMap.NoteFeedbackRule.channel\n" type="label" _label="Property">
                </outline>
                <outline text="delay_in_ms" _note="full path:Live.MidiMap.NoteFeedbackRule.delay_in_ms\n" type="label" _label="Property">
                </outline>
                <outline text="note_no" _note="full path:Live.MidiMap.NoteFeedbackRule.note_no\n" type="label" _label="Property">
                </outline>
                <outline text="vel_map" _note="full path:Live.MidiMap.NoteFeedbackRule.vel_map\n" type="label" _label="Property">
                </outline>
            </outline>
        </outline>
        <outline text="PitchBendFeedbackRule" _note="full path:Live.MidiMap.PitchBendFeedbackRule\nStructure to define feedback properties of MIDI mappings." type="label" _label="Class">
            <outline text="Properties">
                <outline text="channel" _note="full path:Live.MidiMap.PitchBendFeedbackRule.channel\n" type="label" _label="Property">
                </outline>
                <outline text="delay_in_ms" _note="full path:Live.MidiMap.PitchBendFeedbackRule.delay_in_ms\n" type="label" _label="Property">
                </outline>
                <outline text="value_pair_map" _note="full path:Live.MidiMap.PitchBendFeedbackRule.value_pair_map\n" type="label" _label="Property">
                </outline>
            </outline>
        </outline>
    </outline>
    <outline text="MixerDevice" _note="full path:Live.MixerDevice\n" type="label" _label="Module">
        <outline text="MixerDevice" _note="full path:Live.MixerDevice.MixerDevice\nThis class represents a Mixer Device in Live, which gives youaccess to the Volume and Panning properties of a Track." type="label" _label="Class">
            <outline text="crossfade_assignments" _note="full path:Live.MixerDevice.MixerDevice.crossfade_assignments\n" type="label" _label="Sub-Class">
                <outline text="Values">
                    <outline text="A" _note="full path:Live.MixerDevice.MixerDevice.crossfade_assignments.A\n" type="label" _label="Value">
                    </outline>
                    <outline text="B" _note="full path:Live.MixerDevice.MixerDevice.crossfade_assignments.B\n" type="label" _label="Value">
                    </outline>
                    <outline text="NONE" _note="full path:Live.MixerDevice.MixerDevice.crossfade_assignments.NONE\n" type="label" _label="Value">
                    </outline>
                </outline>
            </outline>
            <outline text="panning_modes" _note="full path:Live.MixerDevice.MixerDevice.panning_modes\n" type="label" _label="Sub-Class">
                <outline text="Values">
                    <outline text="stereo" _note="full path:Live.MixerDevice.MixerDevice.panning_modes.stereo\n" type="label" _label="Value">
                    </outline>
                    <outline text="stereo_split" _note="full path:Live.MixerDevice.MixerDevice.panning_modes.stereo_split\n" type="label" _label="Value">
                    </outline>
                </outline>
            </outline>
            <outline text="Properties">
                <outline text="_live_ptr" _note="full path:Live.MixerDevice.MixerDevice._live_ptr\n" type="label" _label="Property">
                </outline>
                <outline text="canonical_parent" _note="full path:Live.MixerDevice.MixerDevice.canonical_parent\nGet the canonical parent of the mixer device." type="label" _label="Property">
                </outline>
                <outline text="crossfade_assign" _note="full path:Live.MixerDevice.MixerDevice.crossfade_assign\nPlayer- and ReturnTracks only: Access to the Track's Crossfade Assign State." type="label" _label="Property">
                </outline>
                <outline text="crossfader" _note="full path:Live.MixerDevice.MixerDevice.crossfader\nMasterTrack only: Const access to the Crossfader." type="label" _label="Property">
                </outline>
                <outline text="cue_volume" _note="full path:Live.MixerDevice.MixerDevice.cue_volume\nMasterTrack only: Const access to the Cue Volume Parameter." type="label" _label="Property">
                </outline>
                <outline text="left_split_stereo" _note="full path:Live.MixerDevice.MixerDevice.left_split_stereo\nConst access to the Track's Left Split Stereo Panning Device Parameter." type="label" _label="Property">
                </outline>
                <outline text="panning" _note="full path:Live.MixerDevice.MixerDevice.panning\nConst access to the Tracks Panning Device Parameter." type="label" _label="Property">
                </outline>
                <outline text="panning_mode" _note="full path:Live.MixerDevice.MixerDevice.panning_mode\nAccess to the Track's Panning Mode." type="label" _label="Property">
                </outline>
                <outline text="right_split_stereo" _note="full path:Live.MixerDevice.MixerDevice.right_split_stereo\nConst access to the Track's Right Split Stereo Panning Device Parameter." type="label" _label="Property">
                </outline>
                <outline text="sends" _note="full path:Live.MixerDevice.MixerDevice.sends\nConst access to the Tracks list of Send Amount Device Parameters." type="label" _label="Property">
                </outline>
                <outline text="song_tempo" _note="full path:Live.MixerDevice.MixerDevice.song_tempo\nMasterTrack only: Const access to the Song's Tempo." type="label" _label="Property">
                </outline>
                <outline text="track_activator" _note="full path:Live.MixerDevice.MixerDevice.track_activator\nConst access to the Tracks Activator Device Parameter." type="label" _label="Property">
                </outline>
                <outline text="volume" _note="full path:Live.MixerDevice.MixerDevice.volume\nConst access to the Tracks Volume Device Parameter." type="label" _label="Property">
                </outline>
            </outline>
            <outline text="Listeners">
                <outline text="add_crossfade_assign_listener()" _note="full path:Live.MixerDevice.MixerDevice.add_crossfade_assign_listener()\nadd_crossfade_assign_listener( (MixerDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;crossfade_assign&quot; has changed. C++ signature :  void add_crossfade_assign_listener(TPyHandle<ATrackDevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_panning_mode_listener()" _note="full path:Live.MixerDevice.MixerDevice.add_panning_mode_listener()\nadd_panning_mode_listener( (MixerDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;panning_mode&quot; has changed. C++ signature :  void add_panning_mode_listener(TPyHandle<ATrackDevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_sends_listener()" _note="full path:Live.MixerDevice.MixerDevice.add_sends_listener()\nadd_sends_listener( (MixerDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;sends&quot; has changed. C++ signature :  void add_sends_listener(TPyHandle<ATrackDevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="crossfade_assign_has_listener()" _note="full path:Live.MixerDevice.MixerDevice.crossfade_assign_has_listener()\ncrossfade_assign_has_listener( (MixerDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;crossfade_assign&quot;. C++ signature :  bool crossfade_assign_has_listener(TPyHandle<ATrackDevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="panning_mode_has_listener()" _note="full path:Live.MixerDevice.MixerDevice.panning_mode_has_listener()\npanning_mode_has_listener( (MixerDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;panning_mode&quot;. C++ signature :  bool panning_mode_has_listener(TPyHandle<ATrackDevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_crossfade_assign_listener()" _note="full path:Live.MixerDevice.MixerDevice.remove_crossfade_assign_listener()\nremove_crossfade_assign_listener( (MixerDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;crossfade_assign&quot;. C++ signature :  void remove_crossfade_assign_listener(TPyHandle<ATrackDevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_panning_mode_listener()" _note="full path:Live.MixerDevice.MixerDevice.remove_panning_mode_listener()\nremove_panning_mode_listener( (MixerDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;panning_mode&quot;. C++ signature :  void remove_panning_mode_listener(TPyHandle<ATrackDevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_sends_listener()" _note="full path:Live.MixerDevice.MixerDevice.remove_sends_listener()\nremove_sends_listener( (MixerDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;sends&quot;. C++ signature :  void remove_sends_listener(TPyHandle<ATrackDevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="sends_has_listener()" _note="full path:Live.MixerDevice.MixerDevice.sends_has_listener()\nsends_has_listener( (MixerDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;sends&quot;. C++ signature :  bool sends_has_listener(TPyHandle<ATrackDevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
            </outline>
        </outline>
    </outline>
    <outline text="PluginDevice" _note="full path:Live.PluginDevice\n" type="label" _label="Module">
        <outline text="PluginDevice" _note="full path:Live.PluginDevice.PluginDevice\nThis class represents a plugin device." type="label" _label="Class">
            <outline text="View" _note="full path:Live.PluginDevice.PluginDevice.View\nRepresenting the view aspects of a device." type="label" _label="Class">
                <outline text="Properties">
                    <outline text="_live_ptr" _note="full path:Live.PluginDevice.PluginDevice.View._live_ptr\n" type="label" _label="Property">
                    </outline>
                    <outline text="canonical_parent" _note="full path:Live.PluginDevice.PluginDevice.View.canonical_parent\nGet the canonical parent of the View." type="label" _label="Property">
                    </outline>
                    <outline text="is_collapsed" _note="full path:Live.PluginDevice.PluginDevice.View.is_collapsed\nGet/Set/Listen if the device is shown collapsed in the device chain." type="label" _label="Property">
                    </outline>
                </outline>
                <outline text="Listeners">
                    <outline text="add_is_collapsed_listener()" _note="full path:Live.PluginDevice.PluginDevice.View.add_is_collapsed_listener()\nadd_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_collapsed&quot; has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="is_collapsed_has_listener()" _note="full path:Live.PluginDevice.PluginDevice.View.is_collapsed_has_listener()\nis_collapsed_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_collapsed&quot;. C++ signature :  bool is_collapsed_has_listener(TPyViewData<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_is_collapsed_listener()" _note="full path:Live.PluginDevice.PluginDevice.View.remove_is_collapsed_listener()\nremove_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_collapsed&quot;. C++ signature :  void remove_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                </outline>
            </outline>
            <outline text="Properties">
                <outline text="_live_ptr" _note="full path:Live.PluginDevice.PluginDevice._live_ptr\n" type="label" _label="Property">
                </outline>
                <outline text="can_have_chains" _note="full path:Live.PluginDevice.PluginDevice.can_have_chains\nReturns true if the device is a rack." type="label" _label="Property">
                </outline>
                <outline text="can_have_drum_pads" _note="full path:Live.PluginDevice.PluginDevice.can_have_drum_pads\nReturns true if the device is a drum rack." type="label" _label="Property">
                </outline>
                <outline text="canonical_parent" _note="full path:Live.PluginDevice.PluginDevice.canonical_parent\nGet the canonical parent of the Device." type="label" _label="Property">
                </outline>
                <outline text="class_display_name" _note="full path:Live.PluginDevice.PluginDevice.class_display_name\nReturn const access to the name of the device's class name as displayed in Live's browser and device chain" type="label" _label="Property">
                </outline>
                <outline text="class_name" _note="full path:Live.PluginDevice.PluginDevice.class_name\nReturn const access to the name of the device's class." type="label" _label="Property">
                </outline>
                <outline text="is_active" _note="full path:Live.PluginDevice.PluginDevice.is_active\nReturn const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off." type="label" _label="Property">
                </outline>
                <outline text="name" _note="full path:Live.PluginDevice.PluginDevice.name\nReturn access to the name of the device." type="label" _label="Property">
                </outline>
                <outline text="parameters" _note="full path:Live.PluginDevice.PluginDevice.parameters\nConst access to the list of available automatable parameters for this device." type="label" _label="Property">
                </outline>
                <outline text="presets" _note="full path:Live.PluginDevice.PluginDevice.presets\nGet the list of presets the plugin offers." type="label" _label="Property">
                </outline>
                <outline text="selected_preset_index" _note="full path:Live.PluginDevice.PluginDevice.selected_preset_index\nAccess to the index of the currently selected preset." type="label" _label="Property">
                </outline>
                <outline text="type" _note="full path:Live.PluginDevice.PluginDevice.type\nReturn the type of the device." type="label" _label="Property">
                </outline>
                <outline text="view" _note="full path:Live.PluginDevice.PluginDevice.view\nRepresenting the view aspects of a device." type="label" _label="Property">
                </outline>
            </outline>
            <outline text="Listeners">
                <outline text="add_is_active_listener()" _note="full path:Live.PluginDevice.PluginDevice.add_is_active_listener()\nadd_is_active_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_active&quot; has changed. C++ signature :  void add_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_name_listener()" _note="full path:Live.PluginDevice.PluginDevice.add_name_listener()\nadd_name_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_parameters_listener()" _note="full path:Live.PluginDevice.PluginDevice.add_parameters_listener()\nadd_parameters_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;parameters&quot; has changed. C++ signature :  void add_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_presets_listener()" _note="full path:Live.PluginDevice.PluginDevice.add_presets_listener()\nadd_presets_listener( (PluginDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;presets&quot; has changed. C++ signature :  void add_presets_listener(TPluginDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_selected_preset_index_listener()" _note="full path:Live.PluginDevice.PluginDevice.add_selected_preset_index_listener()\nadd_selected_preset_index_listener( (PluginDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;selected_preset_index&quot; has changed. C++ signature :  void add_selected_preset_index_listener(TPluginDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="is_active_has_listener()" _note="full path:Live.PluginDevice.PluginDevice.is_active_has_listener()\nis_active_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_active&quot;. C++ signature :  bool is_active_has_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="name_has_listener()" _note="full path:Live.PluginDevice.PluginDevice.name_has_listener()\nname_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="parameters_has_listener()" _note="full path:Live.PluginDevice.PluginDevice.parameters_has_listener()\nparameters_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;parameters&quot;. C++ signature :  bool parameters_has_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="presets_has_listener()" _note="full path:Live.PluginDevice.PluginDevice.presets_has_listener()\npresets_has_listener( (PluginDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;presets&quot;. C++ signature :  bool presets_has_listener(TPluginDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_is_active_listener()" _note="full path:Live.PluginDevice.PluginDevice.remove_is_active_listener()\nremove_is_active_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_active&quot;. C++ signature :  void remove_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_name_listener()" _note="full path:Live.PluginDevice.PluginDevice.remove_name_listener()\nremove_name_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_parameters_listener()" _note="full path:Live.PluginDevice.PluginDevice.remove_parameters_listener()\nremove_parameters_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;parameters&quot;. C++ signature :  void remove_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_presets_listener()" _note="full path:Live.PluginDevice.PluginDevice.remove_presets_listener()\nremove_presets_listener( (PluginDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;presets&quot;. C++ signature :  void remove_presets_listener(TPluginDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_selected_preset_index_listener()" _note="full path:Live.PluginDevice.PluginDevice.remove_selected_preset_index_listener()\nremove_selected_preset_index_listener( (PluginDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;selected_preset_index&quot;. C++ signature :  void remove_selected_preset_index_listener(TPluginDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="selected_preset_index_has_listener()" _note="full path:Live.PluginDevice.PluginDevice.selected_preset_index_has_listener()\nselected_preset_index_has_listener( (PluginDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;selected_preset_index&quot;. C++ signature :  bool selected_preset_index_has_listener(TPluginDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
            </outline>
            <outline text="Methods">
                <outline text="get_parameter_names()" _note="full path:Live.PluginDevice.PluginDevice.get_parameter_names()\nget_parameter_names( (PluginDevice)arg1 [, (int)begin=0 [, (int)end=-1]]) -> StringVector : Get the range of plugin parameter names, bound by begin and end. If end is smaller than 0 it is interpreted as the parameter count.  C++ signature :  std::__1::vector<TString, std::__1::allocator<TString> > get_parameter_names(TPluginDevicePyHandle [,int=0 [,int=-1]])" type="label" _label="Method">
                </outline>
                <outline text="store_chosen_bank()" _note="full path:Live.PluginDevice.PluginDevice.store_chosen_bank()\nstore_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -> None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle<ADevice>,int,int)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
    </outline>
    <outline text="RackDevice" _note="full path:Live.RackDevice\n" type="label" _label="Module">
        <outline text="RackDevice" _note="full path:Live.RackDevice.RackDevice\nThis class represents a Rack device." type="label" _label="Class">
            <outline text="View" _note="full path:Live.RackDevice.RackDevice.View\nRepresenting the view aspects of a rack device." type="label" _label="Class">
                <outline text="Properties">
                    <outline text="_live_ptr" _note="full path:Live.RackDevice.RackDevice.View._live_ptr\n" type="label" _label="Property">
                    </outline>
                    <outline text="canonical_parent" _note="full path:Live.RackDevice.RackDevice.View.canonical_parent\nGet the canonical parent of the View." type="label" _label="Property">
                    </outline>
                    <outline text="drum_pads_scroll_position" _note="full path:Live.RackDevice.RackDevice.View.drum_pads_scroll_position\nAccess to the index of the lowest visible row of pads. Throws an exception if can_have_drum_pads is false." type="label" _label="Property">
                    </outline>
                    <outline text="is_collapsed" _note="full path:Live.RackDevice.RackDevice.View.is_collapsed\nGet/Set/Listen if the device is shown collapsed in the device chain." type="label" _label="Property">
                    </outline>
                    <outline text="is_showing_chain_devices" _note="full path:Live.RackDevice.RackDevice.View.is_showing_chain_devices\nReturn whether the devices in the currently selected chain are visible. Throws an exception if can_have_chains is false." type="label" _label="Property">
                    </outline>
                    <outline text="selected_chain" _note="full path:Live.RackDevice.RackDevice.View.selected_chain\nReturn access to the currently selected chain." type="label" _label="Property">
                    </outline>
                    <outline text="selected_drum_pad" _note="full path:Live.RackDevice.RackDevice.View.selected_drum_pad\nReturn access to the currently selected drum pad. Throws an exception if can_have_drum_pads is false." type="label" _label="Property">
                    </outline>
                </outline>
                <outline text="Listeners">
                    <outline text="add_drum_pads_scroll_position_listener()" _note="full path:Live.RackDevice.RackDevice.View.add_drum_pads_scroll_position_listener()\nadd_drum_pads_scroll_position_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;drum_pads_scroll_position&quot; has changed. C++ signature :  void add_drum_pads_scroll_position_listener(TRackDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="add_is_collapsed_listener()" _note="full path:Live.RackDevice.RackDevice.View.add_is_collapsed_listener()\nadd_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_collapsed&quot; has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="add_is_showing_chain_devices_listener()" _note="full path:Live.RackDevice.RackDevice.View.add_is_showing_chain_devices_listener()\nadd_is_showing_chain_devices_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_showing_chain_devices&quot; has changed. C++ signature :  void add_is_showing_chain_devices_listener(TRackDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="add_selected_chain_listener()" _note="full path:Live.RackDevice.RackDevice.View.add_selected_chain_listener()\nadd_selected_chain_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;selected_chain&quot; has changed. C++ signature :  void add_selected_chain_listener(TRackDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="add_selected_drum_pad_listener()" _note="full path:Live.RackDevice.RackDevice.View.add_selected_drum_pad_listener()\nadd_selected_drum_pad_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;selected_drum_pad&quot; has changed. C++ signature :  void add_selected_drum_pad_listener(TRackDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="drum_pads_scroll_position_has_listener()" _note="full path:Live.RackDevice.RackDevice.View.drum_pads_scroll_position_has_listener()\ndrum_pads_scroll_position_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;drum_pads_scroll_position&quot;. C++ signature :  bool drum_pads_scroll_position_has_listener(TRackDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="is_collapsed_has_listener()" _note="full path:Live.RackDevice.RackDevice.View.is_collapsed_has_listener()\nis_collapsed_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_collapsed&quot;. C++ signature :  bool is_collapsed_has_listener(TPyViewData<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="is_showing_chain_devices_has_listener()" _note="full path:Live.RackDevice.RackDevice.View.is_showing_chain_devices_has_listener()\nis_showing_chain_devices_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_showing_chain_devices&quot;. C++ signature :  bool is_showing_chain_devices_has_listener(TRackDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_drum_pads_scroll_position_listener()" _note="full path:Live.RackDevice.RackDevice.View.remove_drum_pads_scroll_position_listener()\nremove_drum_pads_scroll_position_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;drum_pads_scroll_position&quot;. C++ signature :  void remove_drum_pads_scroll_position_listener(TRackDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_is_collapsed_listener()" _note="full path:Live.RackDevice.RackDevice.View.remove_is_collapsed_listener()\nremove_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_collapsed&quot;. C++ signature :  void remove_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_is_showing_chain_devices_listener()" _note="full path:Live.RackDevice.RackDevice.View.remove_is_showing_chain_devices_listener()\nremove_is_showing_chain_devices_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_showing_chain_devices&quot;. C++ signature :  void remove_is_showing_chain_devices_listener(TRackDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_selected_chain_listener()" _note="full path:Live.RackDevice.RackDevice.View.remove_selected_chain_listener()\nremove_selected_chain_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;selected_chain&quot;. C++ signature :  void remove_selected_chain_listener(TRackDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_selected_drum_pad_listener()" _note="full path:Live.RackDevice.RackDevice.View.remove_selected_drum_pad_listener()\nremove_selected_drum_pad_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;selected_drum_pad&quot;. C++ signature :  void remove_selected_drum_pad_listener(TRackDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="selected_chain_has_listener()" _note="full path:Live.RackDevice.RackDevice.View.selected_chain_has_listener()\nselected_chain_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;selected_chain&quot;. C++ signature :  bool selected_chain_has_listener(TRackDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="selected_drum_pad_has_listener()" _note="full path:Live.RackDevice.RackDevice.View.selected_drum_pad_has_listener()\nselected_drum_pad_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;selected_drum_pad&quot;. C++ signature :  bool selected_drum_pad_has_listener(TRackDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                </outline>
            </outline>
            <outline text="Properties">
                <outline text="_live_ptr" _note="full path:Live.RackDevice.RackDevice._live_ptr\n" type="label" _label="Property">
                </outline>
                <outline text="can_have_chains" _note="full path:Live.RackDevice.RackDevice.can_have_chains\nReturns true if the device is a rack." type="label" _label="Property">
                </outline>
                <outline text="can_have_drum_pads" _note="full path:Live.RackDevice.RackDevice.can_have_drum_pads\nReturns true if the device is a drum rack." type="label" _label="Property">
                </outline>
                <outline text="can_show_chains" _note="full path:Live.RackDevice.RackDevice.can_show_chains\nreturn True, if this Rack contains a rack instrument device that is capable of showing its chains in session view." type="label" _label="Property">
                </outline>
                <outline text="canonical_parent" _note="full path:Live.RackDevice.RackDevice.canonical_parent\nGet the canonical parent of the Device." type="label" _label="Property">
                </outline>
                <outline text="chains" _note="full path:Live.RackDevice.RackDevice.chains\nReturn const access to the list of chains in this device. Throws an exception if can_have_chains is false." type="label" _label="Property">
                </outline>
                <outline text="class_display_name" _note="full path:Live.RackDevice.RackDevice.class_display_name\nReturn const access to the name of the device's class name as displayed in Live's browser and device chain" type="label" _label="Property">
                </outline>
                <outline text="class_name" _note="full path:Live.RackDevice.RackDevice.class_name\nReturn const access to the name of the device's class." type="label" _label="Property">
                </outline>
                <outline text="drum_pads" _note="full path:Live.RackDevice.RackDevice.drum_pads\nReturn const access to the list of drum pads in this device. Throws an exception if can_have_drum_pads is false." type="label" _label="Property">
                </outline>
                <outline text="has_drum_pads" _note="full path:Live.RackDevice.RackDevice.has_drum_pads\nReturns true if the device is a drum rack which has drum pads. Throws an exception if can_have_drum_pads is false." type="label" _label="Property">
                </outline>
                <outline text="has_macro_mappings" _note="full path:Live.RackDevice.RackDevice.has_macro_mappings\nReturns true if any of the rack's macros are mapped to a parameter." type="label" _label="Property">
                </outline>
                <outline text="is_active" _note="full path:Live.RackDevice.RackDevice.is_active\nReturn const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off." type="label" _label="Property">
                </outline>
                <outline text="is_showing_chains" _note="full path:Live.RackDevice.RackDevice.is_showing_chains\nReturns True, if it is showing chains." type="label" _label="Property">
                </outline>
                <outline text="macros_mapped" _note="full path:Live.RackDevice.RackDevice.macros_mapped\nA list of booleans, one for each macro parameter, which is True iffthat macro is mapped to something" type="label" _label="Property">
                </outline>
                <outline text="name" _note="full path:Live.RackDevice.RackDevice.name\nReturn access to the name of the device." type="label" _label="Property">
                </outline>
                <outline text="parameters" _note="full path:Live.RackDevice.RackDevice.parameters\nConst access to the list of available automatable parameters for this device." type="label" _label="Property">
                </outline>
                <outline text="return_chains" _note="full path:Live.RackDevice.RackDevice.return_chains\nReturn const access to the list of return chains in this device. Throws an exception if can_have_chains is false." type="label" _label="Property">
                </outline>
                <outline text="selected_variation_index" _note="full path:Live.RackDevice.RackDevice.selected_variation_index\nAccess to the index of the currently selected macro variation.Throws an exception if the index is out of range." type="label" _label="Property">
                </outline>
                <outline text="type" _note="full path:Live.RackDevice.RackDevice.type\nReturn the type of the device." type="label" _label="Property">
                </outline>
                <outline text="variation_count" _note="full path:Live.RackDevice.RackDevice.variation_count\nAccess to the number of macro variations currently stored." type="label" _label="Property">
                </outline>
                <outline text="view" _note="full path:Live.RackDevice.RackDevice.view\nRepresenting the view aspects of a device." type="label" _label="Property">
                </outline>
                <outline text="visible_drum_pads" _note="full path:Live.RackDevice.RackDevice.visible_drum_pads\nReturn const access to the list of visible drum pads in this device. Throws an exception if can_have_drum_pads is false." type="label" _label="Property">
                </outline>
            </outline>
            <outline text="Listeners">
                <outline text="add_chains_listener()" _note="full path:Live.RackDevice.RackDevice.add_chains_listener()\nadd_chains_listener( (RackDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;chains&quot; has changed. C++ signature :  void add_chains_listener(TRackDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_drum_pads_listener()" _note="full path:Live.RackDevice.RackDevice.add_drum_pads_listener()\nadd_drum_pads_listener( (RackDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;drum_pads&quot; has changed. C++ signature :  void add_drum_pads_listener(TRackDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_has_drum_pads_listener()" _note="full path:Live.RackDevice.RackDevice.add_has_drum_pads_listener()\nadd_has_drum_pads_listener( (RackDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;has_drum_pads&quot; has changed. C++ signature :  void add_has_drum_pads_listener(TRackDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_has_macro_mappings_listener()" _note="full path:Live.RackDevice.RackDevice.add_has_macro_mappings_listener()\nadd_has_macro_mappings_listener( (RackDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;has_macro_mappings&quot; has changed. C++ signature :  void add_has_macro_mappings_listener(TRackDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_is_active_listener()" _note="full path:Live.RackDevice.RackDevice.add_is_active_listener()\nadd_is_active_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_active&quot; has changed. C++ signature :  void add_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_is_showing_chains_listener()" _note="full path:Live.RackDevice.RackDevice.add_is_showing_chains_listener()\nadd_is_showing_chains_listener( (RackDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_showing_chains&quot; has changed. C++ signature :  void add_is_showing_chains_listener(TRackDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_macros_mapped_listener()" _note="full path:Live.RackDevice.RackDevice.add_macros_mapped_listener()\nadd_macros_mapped_listener( (RackDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;macros_mapped&quot; has changed. C++ signature :  void add_macros_mapped_listener(TRackDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_name_listener()" _note="full path:Live.RackDevice.RackDevice.add_name_listener()\nadd_name_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_parameters_listener()" _note="full path:Live.RackDevice.RackDevice.add_parameters_listener()\nadd_parameters_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;parameters&quot; has changed. C++ signature :  void add_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_return_chains_listener()" _note="full path:Live.RackDevice.RackDevice.add_return_chains_listener()\nadd_return_chains_listener( (RackDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;return_chains&quot; has changed. C++ signature :  void add_return_chains_listener(TRackDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_visible_drum_pads_listener()" _note="full path:Live.RackDevice.RackDevice.add_visible_drum_pads_listener()\nadd_visible_drum_pads_listener( (RackDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;visible_drum_pads&quot; has changed. C++ signature :  void add_visible_drum_pads_listener(TRackDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="chains_has_listener()" _note="full path:Live.RackDevice.RackDevice.chains_has_listener()\nchains_has_listener( (RackDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;chains&quot;. C++ signature :  bool chains_has_listener(TRackDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="drum_pads_has_listener()" _note="full path:Live.RackDevice.RackDevice.drum_pads_has_listener()\ndrum_pads_has_listener( (RackDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;drum_pads&quot;. C++ signature :  bool drum_pads_has_listener(TRackDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="has_drum_pads_has_listener()" _note="full path:Live.RackDevice.RackDevice.has_drum_pads_has_listener()\nhas_drum_pads_has_listener( (RackDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;has_drum_pads&quot;. C++ signature :  bool has_drum_pads_has_listener(TRackDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="has_macro_mappings_has_listener()" _note="full path:Live.RackDevice.RackDevice.has_macro_mappings_has_listener()\nhas_macro_mappings_has_listener( (RackDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;has_macro_mappings&quot;. C++ signature :  bool has_macro_mappings_has_listener(TRackDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="is_active_has_listener()" _note="full path:Live.RackDevice.RackDevice.is_active_has_listener()\nis_active_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_active&quot;. C++ signature :  bool is_active_has_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="is_showing_chains_has_listener()" _note="full path:Live.RackDevice.RackDevice.is_showing_chains_has_listener()\nis_showing_chains_has_listener( (RackDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_showing_chains&quot;. C++ signature :  bool is_showing_chains_has_listener(TRackDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="macros_mapped_has_listener()" _note="full path:Live.RackDevice.RackDevice.macros_mapped_has_listener()\nmacros_mapped_has_listener( (RackDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;macros_mapped&quot;. C++ signature :  bool macros_mapped_has_listener(TRackDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="name_has_listener()" _note="full path:Live.RackDevice.RackDevice.name_has_listener()\nname_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="parameters_has_listener()" _note="full path:Live.RackDevice.RackDevice.parameters_has_listener()\nparameters_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;parameters&quot;. C++ signature :  bool parameters_has_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_chains_listener()" _note="full path:Live.RackDevice.RackDevice.remove_chains_listener()\nremove_chains_listener( (RackDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;chains&quot;. C++ signature :  void remove_chains_listener(TRackDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_drum_pads_listener()" _note="full path:Live.RackDevice.RackDevice.remove_drum_pads_listener()\nremove_drum_pads_listener( (RackDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;drum_pads&quot;. C++ signature :  void remove_drum_pads_listener(TRackDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_has_drum_pads_listener()" _note="full path:Live.RackDevice.RackDevice.remove_has_drum_pads_listener()\nremove_has_drum_pads_listener( (RackDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;has_drum_pads&quot;. C++ signature :  void remove_has_drum_pads_listener(TRackDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_has_macro_mappings_listener()" _note="full path:Live.RackDevice.RackDevice.remove_has_macro_mappings_listener()\nremove_has_macro_mappings_listener( (RackDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;has_macro_mappings&quot;. C++ signature :  void remove_has_macro_mappings_listener(TRackDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_is_active_listener()" _note="full path:Live.RackDevice.RackDevice.remove_is_active_listener()\nremove_is_active_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_active&quot;. C++ signature :  void remove_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_is_showing_chains_listener()" _note="full path:Live.RackDevice.RackDevice.remove_is_showing_chains_listener()\nremove_is_showing_chains_listener( (RackDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_showing_chains&quot;. C++ signature :  void remove_is_showing_chains_listener(TRackDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_macros_mapped_listener()" _note="full path:Live.RackDevice.RackDevice.remove_macros_mapped_listener()\nremove_macros_mapped_listener( (RackDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;macros_mapped&quot;. C++ signature :  void remove_macros_mapped_listener(TRackDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_name_listener()" _note="full path:Live.RackDevice.RackDevice.remove_name_listener()\nremove_name_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_parameters_listener()" _note="full path:Live.RackDevice.RackDevice.remove_parameters_listener()\nremove_parameters_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;parameters&quot;. C++ signature :  void remove_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_return_chains_listener()" _note="full path:Live.RackDevice.RackDevice.remove_return_chains_listener()\nremove_return_chains_listener( (RackDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;return_chains&quot;. C++ signature :  void remove_return_chains_listener(TRackDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_visible_drum_pads_listener()" _note="full path:Live.RackDevice.RackDevice.remove_visible_drum_pads_listener()\nremove_visible_drum_pads_listener( (RackDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;visible_drum_pads&quot;. C++ signature :  void remove_visible_drum_pads_listener(TRackDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="return_chains_has_listener()" _note="full path:Live.RackDevice.RackDevice.return_chains_has_listener()\nreturn_chains_has_listener( (RackDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;return_chains&quot;. C++ signature :  bool return_chains_has_listener(TRackDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="visible_drum_pads_has_listener()" _note="full path:Live.RackDevice.RackDevice.visible_drum_pads_has_listener()\nvisible_drum_pads_has_listener( (RackDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;visible_drum_pads&quot;. C++ signature :  bool visible_drum_pads_has_listener(TRackDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
            </outline>
            <outline text="Methods">
                <outline text="add_macro()" _note="full path:Live.RackDevice.RackDevice.add_macro()\nadd_macro( (RackDevice)arg1) -> None : Increases the number of visible macro controls in the rack. Throws an exception if the maximum number of macro controls is reached. C++ signature :  void add_macro(TRackDevicePyHandle)" type="label" _label="Method">
                </outline>
                <outline text="copy_pad()" _note="full path:Live.RackDevice.RackDevice.copy_pad()\ncopy_pad( (RackDevice)arg1, (int)arg2, (int)arg3) -> None : Copies all contents of a drum pad from a source pad into a destination pad. copy_pad(source_index, destination_index) where source_index and destination_index correspond to the note number/index of the drum pad in a drum rack. Throws an exception when the source pad is empty, or when the source or destination indices are not between 0 - 127. C++ signature :  void copy_pad(TRackDevicePyHandle,int,int)" type="label" _label="Method">
                </outline>
                <outline text="delete_selected_variation()" _note="full path:Live.RackDevice.RackDevice.delete_selected_variation()\ndelete_selected_variation( (Device)arg1) -> None : Deletes the currently selected macro variation.Does nothing if there is no selected variation. C++ signature :  void delete_selected_variation(TPyHandle<ADevice>)" type="label" _label="Method">
                </outline>
                <outline text="randomize_macros()" _note="full path:Live.RackDevice.RackDevice.randomize_macros()\nrandomize_macros( (RackDevice)arg1) -> None : Randomizes the values for all macro controls not excluded from randomization. C++ signature :  void randomize_macros(TRackDevicePyHandle)" type="label" _label="Method">
                </outline>
                <outline text="recall_last_used_variation()" _note="full path:Live.RackDevice.RackDevice.recall_last_used_variation()\nrecall_last_used_variation( (Device)arg1) -> None : Recalls the macro variation that was recalled most recently.Does nothing if no variation has been recalled yet. C++ signature :  void recall_last_used_variation(TPyHandle<ADevice>)" type="label" _label="Method">
                </outline>
                <outline text="recall_selected_variation()" _note="full path:Live.RackDevice.RackDevice.recall_selected_variation()\nrecall_selected_variation( (Device)arg1) -> None : Recalls the currently selected macro variation.Does nothing if there are no variations. C++ signature :  void recall_selected_variation(TPyHandle<ADevice>)" type="label" _label="Method">
                </outline>
                <outline text="remove_macro()" _note="full path:Live.RackDevice.RackDevice.remove_macro()\nremove_macro( (RackDevice)arg1) -> None : Decreases the number of visible macro controls in the rack. Throws an exception if the minimum number of macro controls is reached. C++ signature :  void remove_macro(TRackDevicePyHandle)" type="label" _label="Method">
                </outline>
                <outline text="store_chosen_bank()" _note="full path:Live.RackDevice.RackDevice.store_chosen_bank()\nstore_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -> None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle<ADevice>,int,int)" type="label" _label="Method">
                </outline>
                <outline text="store_variation()" _note="full path:Live.RackDevice.RackDevice.store_variation()\nstore_variation( (Device)arg1) -> None : Stores a new variation of the values of all currently mapped macros C++ signature :  void store_variation(TPyHandle<ADevice>)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
    </outline>
    <outline text="Sample" _note="full path:Live.Sample\n" type="label" _label="Module">
        <outline text="Sample" _note="full path:Live.Sample.Sample\nThis class represents a sample file loaded into a Simpler instance." type="label" _label="Class">
            <outline text="Properties">
                <outline text="_live_ptr" _note="full path:Live.Sample.Sample._live_ptr\n" type="label" _label="Property">
                </outline>
                <outline text="beats_granulation_resolution" _note="full path:Live.Sample.Sample.beats_granulation_resolution\nAccess to the Granulation Resolution parameter in Beats Warp Mode." type="label" _label="Property">
                </outline>
                <outline text="beats_transient_envelope" _note="full path:Live.Sample.Sample.beats_transient_envelope\nAccess to the Transient Envelope parameter in Beats Warp Mode." type="label" _label="Property">
                </outline>
                <outline text="beats_transient_loop_mode" _note="full path:Live.Sample.Sample.beats_transient_loop_mode\nAccess to the Transient Loop Mode parameter in Beats Warp Mode." type="label" _label="Property">
                </outline>
                <outline text="canonical_parent" _note="full path:Live.Sample.Sample.canonical_parent\nAccess to the sample's canonical parent." type="label" _label="Property">
                </outline>
                <outline text="complex_pro_envelope" _note="full path:Live.Sample.Sample.complex_pro_envelope\nAccess to the Envelope parameter in Complex Pro Mode." type="label" _label="Property">
                </outline>
                <outline text="complex_pro_formants" _note="full path:Live.Sample.Sample.complex_pro_formants\nAccess to the Formants parameter in Complex Pro Warp Mode." type="label" _label="Property">
                </outline>
                <outline text="end_marker" _note="full path:Live.Sample.Sample.end_marker\nAccess to the position of the sample's end marker." type="label" _label="Property">
                </outline>
                <outline text="file_path" _note="full path:Live.Sample.Sample.file_path\nGet the path of the sample file." type="label" _label="Property">
                </outline>
                <outline text="gain" _note="full path:Live.Sample.Sample.gain\nAccess to the sample gain." type="label" _label="Property">
                </outline>
                <outline text="length" _note="full path:Live.Sample.Sample.length\nGet the length of the sample file in sample frames." type="label" _label="Property">
                </outline>
                <outline text="sample_rate" _note="full path:Live.Sample.Sample.sample_rate\nAccess to the audio sample rate of the sample." type="label" _label="Property">
                </outline>
                <outline text="slices" _note="full path:Live.Sample.Sample.slices\nAccess to the list of slice points in sample time in the sample." type="label" _label="Property">
                </outline>
                <outline text="slicing_beat_division" _note="full path:Live.Sample.Sample.slicing_beat_division\nAccess to sample's slicing step size." type="label" _label="Property">
                </outline>
                <outline text="slicing_region_count" _note="full path:Live.Sample.Sample.slicing_region_count\nAccess to sample's slicing split count." type="label" _label="Property">
                </outline>
                <outline text="slicing_sensitivity" _note="full path:Live.Sample.Sample.slicing_sensitivity\nAccess to sample's slicing sensitivity whose sensitivity is in between 0.0 and 1.0.The higher the sensitivity, the more slices will be available." type="label" _label="Property">
                </outline>
                <outline text="slicing_style" _note="full path:Live.Sample.Sample.slicing_style\nAccess to sample's slicing style." type="label" _label="Property">
                </outline>
                <outline text="start_marker" _note="full path:Live.Sample.Sample.start_marker\nAccess to the position of the sample's start marker." type="label" _label="Property">
                </outline>
                <outline text="texture_flux" _note="full path:Live.Sample.Sample.texture_flux\nAccess to the Flux parameter in Texture Warp Mode." type="label" _label="Property">
                </outline>
                <outline text="texture_grain_size" _note="full path:Live.Sample.Sample.texture_grain_size\nAccess to the Grain Size parameter in Texture Warp Mode." type="label" _label="Property">
                </outline>
                <outline text="tones_grain_size" _note="full path:Live.Sample.Sample.tones_grain_size\nAccess to the Grain Size parameter in Tones Warp Mode." type="label" _label="Property">
                </outline>
                <outline text="warp_markers" _note="full path:Live.Sample.Sample.warp_markers\nGet the warp markers for this sample." type="label" _label="Property">
                </outline>
                <outline text="warp_mode" _note="full path:Live.Sample.Sample.warp_mode\nAccess to the sample's warp mode." type="label" _label="Property">
                </outline>
                <outline text="warping" _note="full path:Live.Sample.Sample.warping\nAccess to the sample's warping property." type="label" _label="Property">
                </outline>
            </outline>
            <outline text="Listeners">
                <outline text="add_beats_granulation_resolution_listener()" _note="full path:Live.Sample.Sample.add_beats_granulation_resolution_listener()\nadd_beats_granulation_resolution_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;beats_granulation_resolution&quot; has changed. C++ signature :  void add_beats_granulation_resolution_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_beats_transient_envelope_listener()" _note="full path:Live.Sample.Sample.add_beats_transient_envelope_listener()\nadd_beats_transient_envelope_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;beats_transient_envelope&quot; has changed. C++ signature :  void add_beats_transient_envelope_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_beats_transient_loop_mode_listener()" _note="full path:Live.Sample.Sample.add_beats_transient_loop_mode_listener()\nadd_beats_transient_loop_mode_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;beats_transient_loop_mode&quot; has changed. C++ signature :  void add_beats_transient_loop_mode_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_complex_pro_envelope_listener()" _note="full path:Live.Sample.Sample.add_complex_pro_envelope_listener()\nadd_complex_pro_envelope_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;complex_pro_envelope&quot; has changed. C++ signature :  void add_complex_pro_envelope_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_complex_pro_formants_listener()" _note="full path:Live.Sample.Sample.add_complex_pro_formants_listener()\nadd_complex_pro_formants_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;complex_pro_formants&quot; has changed. C++ signature :  void add_complex_pro_formants_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_end_marker_listener()" _note="full path:Live.Sample.Sample.add_end_marker_listener()\nadd_end_marker_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;end_marker&quot; has changed. C++ signature :  void add_end_marker_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_file_path_listener()" _note="full path:Live.Sample.Sample.add_file_path_listener()\nadd_file_path_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;file_path&quot; has changed. C++ signature :  void add_file_path_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_gain_listener()" _note="full path:Live.Sample.Sample.add_gain_listener()\nadd_gain_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;gain&quot; has changed. C++ signature :  void add_gain_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_slices_listener()" _note="full path:Live.Sample.Sample.add_slices_listener()\nadd_slices_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;slices&quot; has changed. C++ signature :  void add_slices_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_slicing_beat_division_listener()" _note="full path:Live.Sample.Sample.add_slicing_beat_division_listener()\nadd_slicing_beat_division_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;slicing_beat_division&quot; has changed. C++ signature :  void add_slicing_beat_division_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_slicing_region_count_listener()" _note="full path:Live.Sample.Sample.add_slicing_region_count_listener()\nadd_slicing_region_count_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;slicing_region_count&quot; has changed. C++ signature :  void add_slicing_region_count_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_slicing_sensitivity_listener()" _note="full path:Live.Sample.Sample.add_slicing_sensitivity_listener()\nadd_slicing_sensitivity_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;slicing_sensitivity&quot; has changed. C++ signature :  void add_slicing_sensitivity_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_slicing_style_listener()" _note="full path:Live.Sample.Sample.add_slicing_style_listener()\nadd_slicing_style_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;slicing_style&quot; has changed. C++ signature :  void add_slicing_style_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_start_marker_listener()" _note="full path:Live.Sample.Sample.add_start_marker_listener()\nadd_start_marker_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;start_marker&quot; has changed. C++ signature :  void add_start_marker_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_texture_flux_listener()" _note="full path:Live.Sample.Sample.add_texture_flux_listener()\nadd_texture_flux_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;texture_flux&quot; has changed. C++ signature :  void add_texture_flux_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_texture_grain_size_listener()" _note="full path:Live.Sample.Sample.add_texture_grain_size_listener()\nadd_texture_grain_size_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;texture_grain_size&quot; has changed. C++ signature :  void add_texture_grain_size_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_tones_grain_size_listener()" _note="full path:Live.Sample.Sample.add_tones_grain_size_listener()\nadd_tones_grain_size_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;tones_grain_size&quot; has changed. C++ signature :  void add_tones_grain_size_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_warp_markers_listener()" _note="full path:Live.Sample.Sample.add_warp_markers_listener()\nadd_warp_markers_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;warp_markers&quot; has changed. C++ signature :  void add_warp_markers_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_warp_mode_listener()" _note="full path:Live.Sample.Sample.add_warp_mode_listener()\nadd_warp_mode_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;warp_mode&quot; has changed. C++ signature :  void add_warp_mode_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_warping_listener()" _note="full path:Live.Sample.Sample.add_warping_listener()\nadd_warping_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;warping&quot; has changed. C++ signature :  void add_warping_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="beats_granulation_resolution_has_listener()" _note="full path:Live.Sample.Sample.beats_granulation_resolution_has_listener()\nbeats_granulation_resolution_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;beats_granulation_resolution&quot;. C++ signature :  bool beats_granulation_resolution_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="beats_transient_envelope_has_listener()" _note="full path:Live.Sample.Sample.beats_transient_envelope_has_listener()\nbeats_transient_envelope_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;beats_transient_envelope&quot;. C++ signature :  bool beats_transient_envelope_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="beats_transient_loop_mode_has_listener()" _note="full path:Live.Sample.Sample.beats_transient_loop_mode_has_listener()\nbeats_transient_loop_mode_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;beats_transient_loop_mode&quot;. C++ signature :  bool beats_transient_loop_mode_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="complex_pro_envelope_has_listener()" _note="full path:Live.Sample.Sample.complex_pro_envelope_has_listener()\ncomplex_pro_envelope_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;complex_pro_envelope&quot;. C++ signature :  bool complex_pro_envelope_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="complex_pro_formants_has_listener()" _note="full path:Live.Sample.Sample.complex_pro_formants_has_listener()\ncomplex_pro_formants_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;complex_pro_formants&quot;. C++ signature :  bool complex_pro_formants_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="end_marker_has_listener()" _note="full path:Live.Sample.Sample.end_marker_has_listener()\nend_marker_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;end_marker&quot;. C++ signature :  bool end_marker_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="file_path_has_listener()" _note="full path:Live.Sample.Sample.file_path_has_listener()\nfile_path_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;file_path&quot;. C++ signature :  bool file_path_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="gain_has_listener()" _note="full path:Live.Sample.Sample.gain_has_listener()\ngain_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;gain&quot;. C++ signature :  bool gain_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_beats_granulation_resolution_listener()" _note="full path:Live.Sample.Sample.remove_beats_granulation_resolution_listener()\nremove_beats_granulation_resolution_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;beats_granulation_resolution&quot;. C++ signature :  void remove_beats_granulation_resolution_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_beats_transient_envelope_listener()" _note="full path:Live.Sample.Sample.remove_beats_transient_envelope_listener()\nremove_beats_transient_envelope_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;beats_transient_envelope&quot;. C++ signature :  void remove_beats_transient_envelope_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_beats_transient_loop_mode_listener()" _note="full path:Live.Sample.Sample.remove_beats_transient_loop_mode_listener()\nremove_beats_transient_loop_mode_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;beats_transient_loop_mode&quot;. C++ signature :  void remove_beats_transient_loop_mode_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_complex_pro_envelope_listener()" _note="full path:Live.Sample.Sample.remove_complex_pro_envelope_listener()\nremove_complex_pro_envelope_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;complex_pro_envelope&quot;. C++ signature :  void remove_complex_pro_envelope_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_complex_pro_formants_listener()" _note="full path:Live.Sample.Sample.remove_complex_pro_formants_listener()\nremove_complex_pro_formants_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;complex_pro_formants&quot;. C++ signature :  void remove_complex_pro_formants_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_end_marker_listener()" _note="full path:Live.Sample.Sample.remove_end_marker_listener()\nremove_end_marker_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;end_marker&quot;. C++ signature :  void remove_end_marker_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_file_path_listener()" _note="full path:Live.Sample.Sample.remove_file_path_listener()\nremove_file_path_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;file_path&quot;. C++ signature :  void remove_file_path_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_gain_listener()" _note="full path:Live.Sample.Sample.remove_gain_listener()\nremove_gain_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;gain&quot;. C++ signature :  void remove_gain_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_slices_listener()" _note="full path:Live.Sample.Sample.remove_slices_listener()\nremove_slices_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;slices&quot;. C++ signature :  void remove_slices_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_slicing_beat_division_listener()" _note="full path:Live.Sample.Sample.remove_slicing_beat_division_listener()\nremove_slicing_beat_division_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;slicing_beat_division&quot;. C++ signature :  void remove_slicing_beat_division_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_slicing_region_count_listener()" _note="full path:Live.Sample.Sample.remove_slicing_region_count_listener()\nremove_slicing_region_count_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;slicing_region_count&quot;. C++ signature :  void remove_slicing_region_count_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_slicing_sensitivity_listener()" _note="full path:Live.Sample.Sample.remove_slicing_sensitivity_listener()\nremove_slicing_sensitivity_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;slicing_sensitivity&quot;. C++ signature :  void remove_slicing_sensitivity_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_slicing_style_listener()" _note="full path:Live.Sample.Sample.remove_slicing_style_listener()\nremove_slicing_style_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;slicing_style&quot;. C++ signature :  void remove_slicing_style_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_start_marker_listener()" _note="full path:Live.Sample.Sample.remove_start_marker_listener()\nremove_start_marker_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;start_marker&quot;. C++ signature :  void remove_start_marker_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_texture_flux_listener()" _note="full path:Live.Sample.Sample.remove_texture_flux_listener()\nremove_texture_flux_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;texture_flux&quot;. C++ signature :  void remove_texture_flux_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_texture_grain_size_listener()" _note="full path:Live.Sample.Sample.remove_texture_grain_size_listener()\nremove_texture_grain_size_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;texture_grain_size&quot;. C++ signature :  void remove_texture_grain_size_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_tones_grain_size_listener()" _note="full path:Live.Sample.Sample.remove_tones_grain_size_listener()\nremove_tones_grain_size_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;tones_grain_size&quot;. C++ signature :  void remove_tones_grain_size_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_warp_markers_listener()" _note="full path:Live.Sample.Sample.remove_warp_markers_listener()\nremove_warp_markers_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;warp_markers&quot;. C++ signature :  void remove_warp_markers_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_warp_mode_listener()" _note="full path:Live.Sample.Sample.remove_warp_mode_listener()\nremove_warp_mode_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;warp_mode&quot;. C++ signature :  void remove_warp_mode_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_warping_listener()" _note="full path:Live.Sample.Sample.remove_warping_listener()\nremove_warping_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;warping&quot;. C++ signature :  void remove_warping_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="slices_has_listener()" _note="full path:Live.Sample.Sample.slices_has_listener()\nslices_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;slices&quot;. C++ signature :  bool slices_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="slicing_beat_division_has_listener()" _note="full path:Live.Sample.Sample.slicing_beat_division_has_listener()\nslicing_beat_division_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;slicing_beat_division&quot;. C++ signature :  bool slicing_beat_division_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="slicing_region_count_has_listener()" _note="full path:Live.Sample.Sample.slicing_region_count_has_listener()\nslicing_region_count_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;slicing_region_count&quot;. C++ signature :  bool slicing_region_count_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="slicing_sensitivity_has_listener()" _note="full path:Live.Sample.Sample.slicing_sensitivity_has_listener()\nslicing_sensitivity_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;slicing_sensitivity&quot;. C++ signature :  bool slicing_sensitivity_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="slicing_style_has_listener()" _note="full path:Live.Sample.Sample.slicing_style_has_listener()\nslicing_style_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;slicing_style&quot;. C++ signature :  bool slicing_style_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="start_marker_has_listener()" _note="full path:Live.Sample.Sample.start_marker_has_listener()\nstart_marker_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;start_marker&quot;. C++ signature :  bool start_marker_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="texture_flux_has_listener()" _note="full path:Live.Sample.Sample.texture_flux_has_listener()\ntexture_flux_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;texture_flux&quot;. C++ signature :  bool texture_flux_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="texture_grain_size_has_listener()" _note="full path:Live.Sample.Sample.texture_grain_size_has_listener()\ntexture_grain_size_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;texture_grain_size&quot;. C++ signature :  bool texture_grain_size_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="tones_grain_size_has_listener()" _note="full path:Live.Sample.Sample.tones_grain_size_has_listener()\ntones_grain_size_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;tones_grain_size&quot;. C++ signature :  bool tones_grain_size_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="warp_markers_has_listener()" _note="full path:Live.Sample.Sample.warp_markers_has_listener()\nwarp_markers_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;warp_markers&quot;. C++ signature :  bool warp_markers_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="warp_mode_has_listener()" _note="full path:Live.Sample.Sample.warp_mode_has_listener()\nwarp_mode_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;warp_mode&quot;. C++ signature :  bool warp_mode_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="warping_has_listener()" _note="full path:Live.Sample.Sample.warping_has_listener()\nwarping_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;warping&quot;. C++ signature :  bool warping_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
            </outline>
            <outline text="Methods">
                <outline text="beat_to_sample_time()" _note="full path:Live.Sample.Sample.beat_to_sample_time()\nbeat_to_sample_time( (Sample)self, (float)beat_time) -> float : Converts the given beat time to sample time. Raises an error if the sample is not warped. C++ signature :  double beat_to_sample_time(TPyHandle<AMultiSamplePart>,double)" type="label" _label="Method">
                </outline>
                <outline text="clear_slices()" _note="full path:Live.Sample.Sample.clear_slices()\nclear_slices( (Sample)self) -> None : Clears all slices created in Simpler's manual mode. C++ signature :  void clear_slices(TPyHandle<AMultiSamplePart>)" type="label" _label="Method">
                </outline>
                <outline text="gain_display_string()" _note="full path:Live.Sample.Sample.gain_display_string()\ngain_display_string( (Sample)self) -> unicode : Get the gain's display value as a string. C++ signature :  TString gain_display_string(TPyHandle<AMultiSamplePart>)" type="label" _label="Method">
                </outline>
                <outline text="insert_slice()" _note="full path:Live.Sample.Sample.insert_slice()\ninsert_slice( (Sample)self, (int)slice_time) -> None : Add a slice point at the provided time if there is none. C++ signature :  void insert_slice(TPyHandle<AMultiSamplePart>,int)" type="label" _label="Method">
                </outline>
                <outline text="move_slice()" _note="full path:Live.Sample.Sample.move_slice()\nmove_slice( (Sample)self, (int)old_time, (int)new_time) -> int : Move the slice point at the provided time. C++ signature :  int move_slice(TPyHandle<AMultiSamplePart>,int,int)" type="label" _label="Method">
                </outline>
                <outline text="remove_slice()" _note="full path:Live.Sample.Sample.remove_slice()\nremove_slice( (Sample)self, (int)slice_time) -> None : Remove the slice point at the provided time if there is one. C++ signature :  void remove_slice(TPyHandle<AMultiSamplePart>,int)" type="label" _label="Method">
                </outline>
                <outline text="reset_slices()" _note="full path:Live.Sample.Sample.reset_slices()\nreset_slices( (Sample)self) -> None : Resets all edited slices to their original positions. C++ signature :  void reset_slices(TPyHandle<AMultiSamplePart>)" type="label" _label="Method">
                </outline>
                <outline text="sample_to_beat_time()" _note="full path:Live.Sample.Sample.sample_to_beat_time()\nsample_to_beat_time( (Sample)self, (float)sample_time) -> float : Converts the given sample time to beat time. Raises an error if the sample is not warped. C++ signature :  double sample_to_beat_time(TPyHandle<AMultiSamplePart>,double)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
        <outline text="SlicingBeatDivision" _note="full path:Live.Sample.SlicingBeatDivision\n" type="label" _label="Class">
            <outline text="Values">
                <outline text="eighth" _note="full path:Live.Sample.SlicingBeatDivision.eighth\n" type="label" _label="Value">
                </outline>
                <outline text="eighth_triplett" _note="full path:Live.Sample.SlicingBeatDivision.eighth_triplett\n" type="label" _label="Value">
                </outline>
                <outline text="four_bars" _note="full path:Live.Sample.SlicingBeatDivision.four_bars\n" type="label" _label="Value">
                </outline>
                <outline text="half" _note="full path:Live.Sample.SlicingBeatDivision.half\n" type="label" _label="Value">
                </outline>
                <outline text="half_triplett" _note="full path:Live.Sample.SlicingBeatDivision.half_triplett\n" type="label" _label="Value">
                </outline>
                <outline text="one_bar" _note="full path:Live.Sample.SlicingBeatDivision.one_bar\n" type="label" _label="Value">
                </outline>
                <outline text="quarter" _note="full path:Live.Sample.SlicingBeatDivision.quarter\n" type="label" _label="Value">
                </outline>
                <outline text="quarter_triplett" _note="full path:Live.Sample.SlicingBeatDivision.quarter_triplett\n" type="label" _label="Value">
                </outline>
                <outline text="sixteenth" _note="full path:Live.Sample.SlicingBeatDivision.sixteenth\n" type="label" _label="Value">
                </outline>
                <outline text="sixteenth_triplett" _note="full path:Live.Sample.SlicingBeatDivision.sixteenth_triplett\n" type="label" _label="Value">
                </outline>
                <outline text="two_bars" _note="full path:Live.Sample.SlicingBeatDivision.two_bars\n" type="label" _label="Value">
                </outline>
            </outline>
        </outline>
        <outline text="SlicingStyle" _note="full path:Live.Sample.SlicingStyle\n" type="label" _label="Class">
            <outline text="Values">
                <outline text="beat" _note="full path:Live.Sample.SlicingStyle.beat\n" type="label" _label="Value">
                </outline>
                <outline text="manual" _note="full path:Live.Sample.SlicingStyle.manual\n" type="label" _label="Value">
                </outline>
                <outline text="region" _note="full path:Live.Sample.SlicingStyle.region\n" type="label" _label="Value">
                </outline>
                <outline text="transient" _note="full path:Live.Sample.SlicingStyle.transient\n" type="label" _label="Value">
                </outline>
            </outline>
        </outline>
        <outline text="TransientLoopMode" _note="full path:Live.Sample.TransientLoopMode\n" type="label" _label="Class">
            <outline text="Values">
                <outline text="alternate" _note="full path:Live.Sample.TransientLoopMode.alternate\n" type="label" _label="Value">
                </outline>
                <outline text="forward" _note="full path:Live.Sample.TransientLoopMode.forward\n" type="label" _label="Value">
                </outline>
                <outline text="off" _note="full path:Live.Sample.TransientLoopMode.off\n" type="label" _label="Value">
                </outline>
            </outline>
        </outline>
    </outline>
    <outline text="Scene" _note="full path:Live.Scene\n" type="label" _label="Module">
        <outline text="Scene" _note="full path:Live.Scene.Scene\nThis class represents an series of ClipSlots in Lives Sessionview matrix." type="label" _label="Class">
            <outline text="Properties">
                <outline text="_live_ptr" _note="full path:Live.Scene.Scene._live_ptr\n" type="label" _label="Property">
                </outline>
                <outline text="canonical_parent" _note="full path:Live.Scene.Scene.canonical_parent\nGet the canonical parent of the scene." type="label" _label="Property">
                </outline>
                <outline text="clip_slots" _note="full path:Live.Scene.Scene.clip_slots\nreturn a list of clipslots (see class AClipSlot) that this scene covers." type="label" _label="Property">
                </outline>
                <outline text="color" _note="full path:Live.Scene.Scene.color\nGet/set access to the color of the Scene (RGB)." type="label" _label="Property">
                </outline>
                <outline text="color_index" _note="full path:Live.Scene.Scene.color_index\nGet/set access to the color index of the Scene. Can be None for no color." type="label" _label="Property">
                </outline>
                <outline text="is_empty" _note="full path:Live.Scene.Scene.is_empty\nReturns True if all clip slots of this scene are empty." type="label" _label="Property">
                </outline>
                <outline text="is_triggered" _note="full path:Live.Scene.Scene.is_triggered\nConst access to the scene's trigger state." type="label" _label="Property">
                </outline>
                <outline text="name" _note="full path:Live.Scene.Scene.name\nGet/Set the name of the scene. Might contain the substring BPM, whichidentifies that the scene will change the tempo when fired. To Get/Setthe temp, use the 'tempo' property of the scene." type="label" _label="Property">
                </outline>
                <outline text="tempo" _note="full path:Live.Scene.Scene.tempo\nGet/Set the tempo value of the scene.The Song will use the Scenes tempo as soon as the Scene is fired.Returns -1 if the Scene has no tempo property." type="label" _label="Property">
                </outline>
            </outline>
            <outline text="Listeners">
                <outline text="add_clip_slots_listener()" _note="full path:Live.Scene.Scene.add_clip_slots_listener()\nadd_clip_slots_listener( (Scene)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;clip_slots&quot; has changed. C++ signature :  void add_clip_slots_listener(TPyHandle<AScene>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_color_index_listener()" _note="full path:Live.Scene.Scene.add_color_index_listener()\nadd_color_index_listener( (Scene)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;color_index&quot; has changed. C++ signature :  void add_color_index_listener(TPyHandle<AScene>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_color_listener()" _note="full path:Live.Scene.Scene.add_color_listener()\nadd_color_listener( (Scene)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;color&quot; has changed. C++ signature :  void add_color_listener(TPyHandle<AScene>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_is_triggered_listener()" _note="full path:Live.Scene.Scene.add_is_triggered_listener()\nadd_is_triggered_listener( (Scene)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_triggered&quot; has changed. C++ signature :  void add_is_triggered_listener(TPyHandle<AScene>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_name_listener()" _note="full path:Live.Scene.Scene.add_name_listener()\nadd_name_listener( (Scene)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TPyHandle<AScene>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="clip_slots_has_listener()" _note="full path:Live.Scene.Scene.clip_slots_has_listener()\nclip_slots_has_listener( (Scene)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;clip_slots&quot;. C++ signature :  bool clip_slots_has_listener(TPyHandle<AScene>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="color_has_listener()" _note="full path:Live.Scene.Scene.color_has_listener()\ncolor_has_listener( (Scene)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;color&quot;. C++ signature :  bool color_has_listener(TPyHandle<AScene>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="color_index_has_listener()" _note="full path:Live.Scene.Scene.color_index_has_listener()\ncolor_index_has_listener( (Scene)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;color_index&quot;. C++ signature :  bool color_index_has_listener(TPyHandle<AScene>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="is_triggered_has_listener()" _note="full path:Live.Scene.Scene.is_triggered_has_listener()\nis_triggered_has_listener( (Scene)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_triggered&quot;. C++ signature :  bool is_triggered_has_listener(TPyHandle<AScene>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="name_has_listener()" _note="full path:Live.Scene.Scene.name_has_listener()\nname_has_listener( (Scene)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TPyHandle<AScene>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_clip_slots_listener()" _note="full path:Live.Scene.Scene.remove_clip_slots_listener()\nremove_clip_slots_listener( (Scene)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;clip_slots&quot;. C++ signature :  void remove_clip_slots_listener(TPyHandle<AScene>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_color_index_listener()" _note="full path:Live.Scene.Scene.remove_color_index_listener()\nremove_color_index_listener( (Scene)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;color_index&quot;. C++ signature :  void remove_color_index_listener(TPyHandle<AScene>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_color_listener()" _note="full path:Live.Scene.Scene.remove_color_listener()\nremove_color_listener( (Scene)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;color&quot;. C++ signature :  void remove_color_listener(TPyHandle<AScene>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_is_triggered_listener()" _note="full path:Live.Scene.Scene.remove_is_triggered_listener()\nremove_is_triggered_listener( (Scene)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_triggered&quot;. C++ signature :  void remove_is_triggered_listener(TPyHandle<AScene>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_name_listener()" _note="full path:Live.Scene.Scene.remove_name_listener()\nremove_name_listener( (Scene)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TPyHandle<AScene>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
            </outline>
            <outline text="Methods">
                <outline text="fire()" _note="full path:Live.Scene.Scene.fire()\nfire( (Scene)arg1 [, (bool)force_legato=False [, (bool)can_select_scene_on_launch=True]]) -> None : Fire the scene directly. Will fire all clipslots that this scene owns and select the scene itself. C++ signature :  void fire(TPyHandle<AScene> [,bool=False [,bool=True]])" type="label" _label="Method">
                </outline>
                <outline text="fire_as_selected()" _note="full path:Live.Scene.Scene.fire_as_selected()\nfire_as_selected( (Scene)arg1 [, (bool)force_legato=False]) -> None : Fire the selected scene. Will fire all clipslots that this scene owns and select the next scene if necessary. C++ signature :  void fire_as_selected(TPyHandle<AScene> [,bool=False])" type="label" _label="Method">
                </outline>
                <outline text="set_fire_button_state()" _note="full path:Live.Scene.Scene.set_fire_button_state()\nset_fire_button_state( (Scene)arg1, (bool)arg2) -> None : Set the scene's fire button state directly. Supports all launch modes. C++ signature :  void set_fire_button_state(TPyHandle<AScene>,bool)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
    </outline>
    <outline text="SimplerDevice" _note="full path:Live.SimplerDevice\n" type="label" _label="Module">
        <outline text="get_available_voice_numbers()" _note="full path:Live.SimplerDevice.get_available_voice_numbers()\nget_available_voice_numbers() -> IntVector : Get a vector of valid Simpler voice numbers. C++ signature :  std::__1::vector<int, std::__1::allocator<int> > get_available_voice_numbers()" type="label" _label="Built-In">
        </outline>
        <outline text="PlaybackMode" _note="full path:Live.SimplerDevice.PlaybackMode\n" type="label" _label="Class">
            <outline text="Values">
                <outline text="classic" _note="full path:Live.SimplerDevice.PlaybackMode.classic\n" type="label" _label="Value">
                </outline>
                <outline text="one_shot" _note="full path:Live.SimplerDevice.PlaybackMode.one_shot\n" type="label" _label="Value">
                </outline>
                <outline text="slicing" _note="full path:Live.SimplerDevice.PlaybackMode.slicing\n" type="label" _label="Value">
                </outline>
            </outline>
        </outline>
        <outline text="SimplerDevice" _note="full path:Live.SimplerDevice.SimplerDevice\nThis class represents a Simpler device." type="label" _label="Class">
            <outline text="View" _note="full path:Live.SimplerDevice.SimplerDevice.View\nRepresenting the view aspects of a simpler device." type="label" _label="Class">
                <outline text="Properties">
                    <outline text="_live_ptr" _note="full path:Live.SimplerDevice.SimplerDevice.View._live_ptr\n" type="label" _label="Property">
                    </outline>
                    <outline text="canonical_parent" _note="full path:Live.SimplerDevice.SimplerDevice.View.canonical_parent\nGet the canonical parent of the View." type="label" _label="Property">
                    </outline>
                    <outline text="is_collapsed" _note="full path:Live.SimplerDevice.SimplerDevice.View.is_collapsed\nGet/Set/Listen if the device is shown collapsed in the device chain." type="label" _label="Property">
                    </outline>
                    <outline text="sample_end" _note="full path:Live.SimplerDevice.SimplerDevice.View.sample_end\nAccess to the modulated samples end position in samples. Returns -1 in case there is no sample loaded." type="label" _label="Property">
                    </outline>
                    <outline text="sample_env_fade_in" _note="full path:Live.SimplerDevice.SimplerDevice.View.sample_env_fade_in\nAccess to the envelope fade-in time in samples. Returned value is only in use when Simpler is in one-shot mode. Returns -1 in case there is no sample loaded." type="label" _label="Property">
                    </outline>
                    <outline text="sample_env_fade_out" _note="full path:Live.SimplerDevice.SimplerDevice.View.sample_env_fade_out\nAccess to the envelope fade-out time in samples. Returned value is only in use when Simpler is in one-shot mode. Returns -1 in case there is no sample loaded." type="label" _label="Property">
                    </outline>
                    <outline text="sample_loop_end" _note="full path:Live.SimplerDevice.SimplerDevice.View.sample_loop_end\nAccess to the modulated samples loop end position in samples. Returns -1 in case there is no sample loaded." type="label" _label="Property">
                    </outline>
                    <outline text="sample_loop_fade" _note="full path:Live.SimplerDevice.SimplerDevice.View.sample_loop_fade\nAccess to the modulated samples loop fade position in samples. Returns -1 in case there is no sample loaded." type="label" _label="Property">
                    </outline>
                    <outline text="sample_loop_start" _note="full path:Live.SimplerDevice.SimplerDevice.View.sample_loop_start\nAccess to the modulated samples loop start position in samples. Returns -1 in case there is no sample loaded." type="label" _label="Property">
                    </outline>
                    <outline text="sample_start" _note="full path:Live.SimplerDevice.SimplerDevice.View.sample_start\nAccess to the modulated samples start position in samples. Returns -1 in case there is no sample loaded." type="label" _label="Property">
                    </outline>
                    <outline text="selected_slice" _note="full path:Live.SimplerDevice.SimplerDevice.View.selected_slice\nAccess to the selected slice." type="label" _label="Property">
                    </outline>
                </outline>
                <outline text="Listeners">
                    <outline text="add_is_collapsed_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.View.add_is_collapsed_listener()\nadd_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_collapsed&quot; has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="add_sample_end_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.View.add_sample_end_listener()\nadd_sample_end_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;sample_end&quot; has changed. C++ signature :  void add_sample_end_listener(TSimplerDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="add_sample_env_fade_in_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.View.add_sample_env_fade_in_listener()\nadd_sample_env_fade_in_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;sample_env_fade_in&quot; has changed. C++ signature :  void add_sample_env_fade_in_listener(TSimplerDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="add_sample_env_fade_out_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.View.add_sample_env_fade_out_listener()\nadd_sample_env_fade_out_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;sample_env_fade_out&quot; has changed. C++ signature :  void add_sample_env_fade_out_listener(TSimplerDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="add_sample_loop_end_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.View.add_sample_loop_end_listener()\nadd_sample_loop_end_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;sample_loop_end&quot; has changed. C++ signature :  void add_sample_loop_end_listener(TSimplerDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="add_sample_loop_fade_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.View.add_sample_loop_fade_listener()\nadd_sample_loop_fade_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;sample_loop_fade&quot; has changed. C++ signature :  void add_sample_loop_fade_listener(TSimplerDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="add_sample_loop_start_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.View.add_sample_loop_start_listener()\nadd_sample_loop_start_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;sample_loop_start&quot; has changed. C++ signature :  void add_sample_loop_start_listener(TSimplerDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="add_sample_start_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.View.add_sample_start_listener()\nadd_sample_start_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;sample_start&quot; has changed. C++ signature :  void add_sample_start_listener(TSimplerDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="add_selected_slice_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.View.add_selected_slice_listener()\nadd_selected_slice_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;selected_slice&quot; has changed. C++ signature :  void add_selected_slice_listener(TSimplerDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="is_collapsed_has_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.View.is_collapsed_has_listener()\nis_collapsed_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_collapsed&quot;. C++ signature :  bool is_collapsed_has_listener(TPyViewData<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_is_collapsed_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.View.remove_is_collapsed_listener()\nremove_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_collapsed&quot;. C++ signature :  void remove_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_sample_end_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.View.remove_sample_end_listener()\nremove_sample_end_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;sample_end&quot;. C++ signature :  void remove_sample_end_listener(TSimplerDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_sample_env_fade_in_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.View.remove_sample_env_fade_in_listener()\nremove_sample_env_fade_in_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;sample_env_fade_in&quot;. C++ signature :  void remove_sample_env_fade_in_listener(TSimplerDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_sample_env_fade_out_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.View.remove_sample_env_fade_out_listener()\nremove_sample_env_fade_out_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;sample_env_fade_out&quot;. C++ signature :  void remove_sample_env_fade_out_listener(TSimplerDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_sample_loop_end_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.View.remove_sample_loop_end_listener()\nremove_sample_loop_end_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;sample_loop_end&quot;. C++ signature :  void remove_sample_loop_end_listener(TSimplerDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_sample_loop_fade_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.View.remove_sample_loop_fade_listener()\nremove_sample_loop_fade_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;sample_loop_fade&quot;. C++ signature :  void remove_sample_loop_fade_listener(TSimplerDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_sample_loop_start_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.View.remove_sample_loop_start_listener()\nremove_sample_loop_start_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;sample_loop_start&quot;. C++ signature :  void remove_sample_loop_start_listener(TSimplerDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_sample_start_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.View.remove_sample_start_listener()\nremove_sample_start_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;sample_start&quot;. C++ signature :  void remove_sample_start_listener(TSimplerDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_selected_slice_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.View.remove_selected_slice_listener()\nremove_selected_slice_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;selected_slice&quot;. C++ signature :  void remove_selected_slice_listener(TSimplerDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="sample_end_has_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.View.sample_end_has_listener()\nsample_end_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;sample_end&quot;. C++ signature :  bool sample_end_has_listener(TSimplerDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="sample_env_fade_in_has_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.View.sample_env_fade_in_has_listener()\nsample_env_fade_in_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;sample_env_fade_in&quot;. C++ signature :  bool sample_env_fade_in_has_listener(TSimplerDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="sample_env_fade_out_has_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.View.sample_env_fade_out_has_listener()\nsample_env_fade_out_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;sample_env_fade_out&quot;. C++ signature :  bool sample_env_fade_out_has_listener(TSimplerDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="sample_loop_end_has_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.View.sample_loop_end_has_listener()\nsample_loop_end_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;sample_loop_end&quot;. C++ signature :  bool sample_loop_end_has_listener(TSimplerDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="sample_loop_fade_has_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.View.sample_loop_fade_has_listener()\nsample_loop_fade_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;sample_loop_fade&quot;. C++ signature :  bool sample_loop_fade_has_listener(TSimplerDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="sample_loop_start_has_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.View.sample_loop_start_has_listener()\nsample_loop_start_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;sample_loop_start&quot;. C++ signature :  bool sample_loop_start_has_listener(TSimplerDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="sample_start_has_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.View.sample_start_has_listener()\nsample_start_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;sample_start&quot;. C++ signature :  bool sample_start_has_listener(TSimplerDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="selected_slice_has_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.View.selected_slice_has_listener()\nselected_slice_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;selected_slice&quot;. C++ signature :  bool selected_slice_has_listener(TSimplerDevicePyViewData,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                </outline>
            </outline>
            <outline text="Properties">
                <outline text="_live_ptr" _note="full path:Live.SimplerDevice.SimplerDevice._live_ptr\n" type="label" _label="Property">
                </outline>
                <outline text="can_have_chains" _note="full path:Live.SimplerDevice.SimplerDevice.can_have_chains\nReturns true if the device is a rack." type="label" _label="Property">
                </outline>
                <outline text="can_have_drum_pads" _note="full path:Live.SimplerDevice.SimplerDevice.can_have_drum_pads\nReturns true if the device is a drum rack." type="label" _label="Property">
                </outline>
                <outline text="can_warp_as" _note="full path:Live.SimplerDevice.SimplerDevice.can_warp_as\nReturns true if warp_as is available." type="label" _label="Property">
                </outline>
                <outline text="can_warp_double" _note="full path:Live.SimplerDevice.SimplerDevice.can_warp_double\nReturns true if warp_double is available." type="label" _label="Property">
                </outline>
                <outline text="can_warp_half" _note="full path:Live.SimplerDevice.SimplerDevice.can_warp_half\nReturns true if warp_half is available." type="label" _label="Property">
                </outline>
                <outline text="canonical_parent" _note="full path:Live.SimplerDevice.SimplerDevice.canonical_parent\nGet the canonical parent of the Device." type="label" _label="Property">
                </outline>
                <outline text="class_display_name" _note="full path:Live.SimplerDevice.SimplerDevice.class_display_name\nReturn const access to the name of the device's class name as displayed in Live's browser and device chain" type="label" _label="Property">
                </outline>
                <outline text="class_name" _note="full path:Live.SimplerDevice.SimplerDevice.class_name\nReturn const access to the name of the device's class." type="label" _label="Property">
                </outline>
                <outline text="is_active" _note="full path:Live.SimplerDevice.SimplerDevice.is_active\nReturn const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off." type="label" _label="Property">
                </outline>
                <outline text="multi_sample_mode" _note="full path:Live.SimplerDevice.SimplerDevice.multi_sample_mode\nReturns whether Simpler is in mulit-sample mode." type="label" _label="Property">
                </outline>
                <outline text="name" _note="full path:Live.SimplerDevice.SimplerDevice.name\nReturn access to the name of the device." type="label" _label="Property">
                </outline>
                <outline text="pad_slicing" _note="full path:Live.SimplerDevice.SimplerDevice.pad_slicing\nWhen set to true, slices can be added in slicing mode by playing notes .that are not assigned to slices, yet." type="label" _label="Property">
                </outline>
                <outline text="parameters" _note="full path:Live.SimplerDevice.SimplerDevice.parameters\nConst access to the list of available automatable parameters for this device." type="label" _label="Property">
                </outline>
                <outline text="playback_mode" _note="full path:Live.SimplerDevice.SimplerDevice.playback_mode\nAccess to Simpler's playback mode." type="label" _label="Property">
                </outline>
                <outline text="playing_position" _note="full path:Live.SimplerDevice.SimplerDevice.playing_position\nConstant access to the current playing position in the sample.The returned value is the normalized position between sample start and end." type="label" _label="Property">
                </outline>
                <outline text="playing_position_enabled" _note="full path:Live.SimplerDevice.SimplerDevice.playing_position_enabled\nReturns whether Simpler is showing the playing position.The returned value is True while the sample is played back" type="label" _label="Property">
                </outline>
                <outline text="retrigger" _note="full path:Live.SimplerDevice.SimplerDevice.retrigger\nAccess to Simpler's retrigger mode." type="label" _label="Property">
                </outline>
                <outline text="sample" _note="full path:Live.SimplerDevice.SimplerDevice.sample\nGet the loaded Sample." type="label" _label="Property">
                </outline>
                <outline text="slicing_playback_mode" _note="full path:Live.SimplerDevice.SimplerDevice.slicing_playback_mode\nAccess to Simpler's slicing playback mode." type="label" _label="Property">
                </outline>
                <outline text="type" _note="full path:Live.SimplerDevice.SimplerDevice.type\nReturn the type of the device." type="label" _label="Property">
                </outline>
                <outline text="view" _note="full path:Live.SimplerDevice.SimplerDevice.view\nRepresenting the view aspects of a device." type="label" _label="Property">
                </outline>
                <outline text="voices" _note="full path:Live.SimplerDevice.SimplerDevice.voices\nAccess to the number of voices in Simpler." type="label" _label="Property">
                </outline>
            </outline>
            <outline text="Listeners">
                <outline text="add_can_warp_as_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.add_can_warp_as_listener()\nadd_can_warp_as_listener( (SimplerDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;can_warp_as&quot; has changed. C++ signature :  void add_can_warp_as_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_can_warp_double_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.add_can_warp_double_listener()\nadd_can_warp_double_listener( (SimplerDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;can_warp_double&quot; has changed. C++ signature :  void add_can_warp_double_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_can_warp_half_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.add_can_warp_half_listener()\nadd_can_warp_half_listener( (SimplerDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;can_warp_half&quot; has changed. C++ signature :  void add_can_warp_half_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_is_active_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.add_is_active_listener()\nadd_is_active_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_active&quot; has changed. C++ signature :  void add_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_multi_sample_mode_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.add_multi_sample_mode_listener()\nadd_multi_sample_mode_listener( (SimplerDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;multi_sample_mode&quot; has changed. C++ signature :  void add_multi_sample_mode_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_name_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.add_name_listener()\nadd_name_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_pad_slicing_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.add_pad_slicing_listener()\nadd_pad_slicing_listener( (SimplerDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;pad_slicing&quot; has changed. C++ signature :  void add_pad_slicing_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_parameters_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.add_parameters_listener()\nadd_parameters_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;parameters&quot; has changed. C++ signature :  void add_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_playback_mode_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.add_playback_mode_listener()\nadd_playback_mode_listener( (SimplerDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;playback_mode&quot; has changed. C++ signature :  void add_playback_mode_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_playing_position_enabled_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.add_playing_position_enabled_listener()\nadd_playing_position_enabled_listener( (SimplerDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;playing_position_enabled&quot; has changed. C++ signature :  void add_playing_position_enabled_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_playing_position_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.add_playing_position_listener()\nadd_playing_position_listener( (SimplerDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;playing_position&quot; has changed. C++ signature :  void add_playing_position_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_retrigger_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.add_retrigger_listener()\nadd_retrigger_listener( (SimplerDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;retrigger&quot; has changed. C++ signature :  void add_retrigger_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_sample_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.add_sample_listener()\nadd_sample_listener( (SimplerDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;sample&quot; has changed. C++ signature :  void add_sample_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_slicing_playback_mode_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.add_slicing_playback_mode_listener()\nadd_slicing_playback_mode_listener( (SimplerDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;slicing_playback_mode&quot; has changed. C++ signature :  void add_slicing_playback_mode_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_voices_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.add_voices_listener()\nadd_voices_listener( (SimplerDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;voices&quot; has changed. C++ signature :  void add_voices_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="can_warp_as_has_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.can_warp_as_has_listener()\ncan_warp_as_has_listener( (SimplerDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;can_warp_as&quot;. C++ signature :  bool can_warp_as_has_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="can_warp_double_has_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.can_warp_double_has_listener()\ncan_warp_double_has_listener( (SimplerDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;can_warp_double&quot;. C++ signature :  bool can_warp_double_has_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="can_warp_half_has_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.can_warp_half_has_listener()\ncan_warp_half_has_listener( (SimplerDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;can_warp_half&quot;. C++ signature :  bool can_warp_half_has_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="is_active_has_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.is_active_has_listener()\nis_active_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_active&quot;. C++ signature :  bool is_active_has_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="multi_sample_mode_has_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.multi_sample_mode_has_listener()\nmulti_sample_mode_has_listener( (SimplerDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;multi_sample_mode&quot;. C++ signature :  bool multi_sample_mode_has_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="name_has_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.name_has_listener()\nname_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="pad_slicing_has_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.pad_slicing_has_listener()\npad_slicing_has_listener( (SimplerDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;pad_slicing&quot;. C++ signature :  bool pad_slicing_has_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="parameters_has_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.parameters_has_listener()\nparameters_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;parameters&quot;. C++ signature :  bool parameters_has_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="playback_mode_has_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.playback_mode_has_listener()\nplayback_mode_has_listener( (SimplerDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;playback_mode&quot;. C++ signature :  bool playback_mode_has_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="playing_position_enabled_has_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.playing_position_enabled_has_listener()\nplaying_position_enabled_has_listener( (SimplerDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;playing_position_enabled&quot;. C++ signature :  bool playing_position_enabled_has_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="playing_position_has_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.playing_position_has_listener()\nplaying_position_has_listener( (SimplerDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;playing_position&quot;. C++ signature :  bool playing_position_has_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_can_warp_as_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.remove_can_warp_as_listener()\nremove_can_warp_as_listener( (SimplerDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;can_warp_as&quot;. C++ signature :  void remove_can_warp_as_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_can_warp_double_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.remove_can_warp_double_listener()\nremove_can_warp_double_listener( (SimplerDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;can_warp_double&quot;. C++ signature :  void remove_can_warp_double_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_can_warp_half_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.remove_can_warp_half_listener()\nremove_can_warp_half_listener( (SimplerDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;can_warp_half&quot;. C++ signature :  void remove_can_warp_half_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_is_active_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.remove_is_active_listener()\nremove_is_active_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_active&quot;. C++ signature :  void remove_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_multi_sample_mode_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.remove_multi_sample_mode_listener()\nremove_multi_sample_mode_listener( (SimplerDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;multi_sample_mode&quot;. C++ signature :  void remove_multi_sample_mode_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_name_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.remove_name_listener()\nremove_name_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_pad_slicing_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.remove_pad_slicing_listener()\nremove_pad_slicing_listener( (SimplerDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;pad_slicing&quot;. C++ signature :  void remove_pad_slicing_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_parameters_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.remove_parameters_listener()\nremove_parameters_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;parameters&quot;. C++ signature :  void remove_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_playback_mode_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.remove_playback_mode_listener()\nremove_playback_mode_listener( (SimplerDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;playback_mode&quot;. C++ signature :  void remove_playback_mode_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_playing_position_enabled_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.remove_playing_position_enabled_listener()\nremove_playing_position_enabled_listener( (SimplerDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;playing_position_enabled&quot;. C++ signature :  void remove_playing_position_enabled_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_playing_position_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.remove_playing_position_listener()\nremove_playing_position_listener( (SimplerDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;playing_position&quot;. C++ signature :  void remove_playing_position_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_retrigger_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.remove_retrigger_listener()\nremove_retrigger_listener( (SimplerDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;retrigger&quot;. C++ signature :  void remove_retrigger_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_sample_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.remove_sample_listener()\nremove_sample_listener( (SimplerDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;sample&quot;. C++ signature :  void remove_sample_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_slicing_playback_mode_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.remove_slicing_playback_mode_listener()\nremove_slicing_playback_mode_listener( (SimplerDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;slicing_playback_mode&quot;. C++ signature :  void remove_slicing_playback_mode_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_voices_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.remove_voices_listener()\nremove_voices_listener( (SimplerDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;voices&quot;. C++ signature :  void remove_voices_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="retrigger_has_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.retrigger_has_listener()\nretrigger_has_listener( (SimplerDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;retrigger&quot;. C++ signature :  bool retrigger_has_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="sample_has_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.sample_has_listener()\nsample_has_listener( (SimplerDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;sample&quot;. C++ signature :  bool sample_has_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="slicing_playback_mode_has_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.slicing_playback_mode_has_listener()\nslicing_playback_mode_has_listener( (SimplerDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;slicing_playback_mode&quot;. C++ signature :  bool slicing_playback_mode_has_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="voices_has_listener()" _note="full path:Live.SimplerDevice.SimplerDevice.voices_has_listener()\nvoices_has_listener( (SimplerDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;voices&quot;. C++ signature :  bool voices_has_listener(TSimplerDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
            </outline>
            <outline text="Methods">
                <outline text="crop()" _note="full path:Live.SimplerDevice.SimplerDevice.crop()\ncrop( (SimplerDevice)self) -> None : Crop the loaded sample to the active area between start- and end marker. Calling this method on an empty simpler raises an error. C++ signature :  void crop(TSimplerDevicePyHandle)" type="label" _label="Method">
                </outline>
                <outline text="guess_playback_length()" _note="full path:Live.SimplerDevice.SimplerDevice.guess_playback_length()\nguess_playback_length( (SimplerDevice)self) -> float : Return an estimated beat time for the playback length between start- and end-marker. Calling this method on an empty simpler raises an error. C++ signature :  double guess_playback_length(TSimplerDevicePyHandle)" type="label" _label="Method">
                </outline>
                <outline text="reverse()" _note="full path:Live.SimplerDevice.SimplerDevice.reverse()\nreverse( (SimplerDevice)self) -> None : Reverse the loaded sample. Calling this method on an empty simpler raises an error. C++ signature :  void reverse(TSimplerDevicePyHandle)" type="label" _label="Method">
                </outline>
                <outline text="store_chosen_bank()" _note="full path:Live.SimplerDevice.SimplerDevice.store_chosen_bank()\nstore_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -> None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle<ADevice>,int,int)" type="label" _label="Method">
                </outline>
                <outline text="warp_as()" _note="full path:Live.SimplerDevice.SimplerDevice.warp_as()\nwarp_as( (SimplerDevice)self, (float)beat_time) -> None : Warp the playback region between start- and end-marker as the given length. Calling this method on an empty simpler raises an error. C++ signature :  void warp_as(TSimplerDevicePyHandle,double)" type="label" _label="Method">
                </outline>
                <outline text="warp_double()" _note="full path:Live.SimplerDevice.SimplerDevice.warp_double()\nwarp_double( (SimplerDevice)self) -> None : Doubles the tempo for region between start- and end-marker. C++ signature :  void warp_double(TSimplerDevicePyHandle)" type="label" _label="Method">
                </outline>
                <outline text="warp_half()" _note="full path:Live.SimplerDevice.SimplerDevice.warp_half()\nwarp_half( (SimplerDevice)self) -> None : Halves the tempo for region between start- and end-marker. C++ signature :  void warp_half(TSimplerDevicePyHandle)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
        <outline text="SlicingPlaybackMode" _note="full path:Live.SimplerDevice.SlicingPlaybackMode\n" type="label" _label="Class">
            <outline text="Values">
                <outline text="mono" _note="full path:Live.SimplerDevice.SlicingPlaybackMode.mono\n" type="label" _label="Value">
                </outline>
                <outline text="poly" _note="full path:Live.SimplerDevice.SlicingPlaybackMode.poly\n" type="label" _label="Value">
                </outline>
                <outline text="thru" _note="full path:Live.SimplerDevice.SlicingPlaybackMode.thru\n" type="label" _label="Value">
                </outline>
            </outline>
        </outline>
    </outline>
    <outline text="Song" _note="full path:Live.Song\n" type="label" _label="Module">
        <outline text="get_all_scales_ordered()" _note="full path:Live.Song.get_all_scales_ordered()\nget_all_scales_ordered() -> tuple : Get an ordered tuple of tuples of all available scale names to intervals. C++ signature :  boost::python::tuple get_all_scales_ordered()" type="label" _label="Built-In">
        </outline>
        <outline text="BeatTime" _note="full path:Live.Song.BeatTime\nRepresents a Time, splitted into Bars, Beats, SubDivision and Ticks." type="label" _label="Class">
            <outline text="Properties">
                <outline text="bars" _note="full path:Live.Song.BeatTime.bars\n" type="label" _label="Property">
                </outline>
                <outline text="beats" _note="full path:Live.Song.BeatTime.beats\n" type="label" _label="Property">
                </outline>
                <outline text="sub_division" _note="full path:Live.Song.BeatTime.sub_division\n" type="label" _label="Property">
                </outline>
                <outline text="ticks" _note="full path:Live.Song.BeatTime.ticks\n" type="label" _label="Property">
                </outline>
            </outline>
        </outline>
        <outline text="CaptureDestination" _note="full path:Live.Song.CaptureDestination\nThe destination for MIDI capture." type="label" _label="Class">
            <outline text="Values">
                <outline text="arrangement" _note="full path:Live.Song.CaptureDestination.arrangement\nThe destination for MIDI capture." type="label" _label="Value">
                </outline>
                <outline text="auto" _note="full path:Live.Song.CaptureDestination.auto\nThe destination for MIDI capture." type="label" _label="Value">
                </outline>
                <outline text="session" _note="full path:Live.Song.CaptureDestination.session\nThe destination for MIDI capture." type="label" _label="Value">
                </outline>
            </outline>
        </outline>
        <outline text="CaptureMode" _note="full path:Live.Song.CaptureMode\nThe capture mode that is used for capture and insert scene." type="label" _label="Class">
            <outline text="Values">
                <outline text="all" _note="full path:Live.Song.CaptureMode.all\nThe capture mode that is used for capture and insert scene." type="label" _label="Value">
                </outline>
                <outline text="all_except_selected" _note="full path:Live.Song.CaptureMode.all_except_selected\nThe capture mode that is used for capture and insert scene." type="label" _label="Value">
                </outline>
            </outline>
        </outline>
        <outline text="CuePoint" _note="full path:Live.Song.CuePoint\nRepresents a 'Marker' in the arrangement." type="label" _label="Class">
            <outline text="Properties">
                <outline text="_live_ptr" _note="full path:Live.Song.CuePoint._live_ptr\n" type="label" _label="Property">
                </outline>
                <outline text="canonical_parent" _note="full path:Live.Song.CuePoint.canonical_parent\nGet the canonical parent of the cue point." type="label" _label="Property">
                </outline>
                <outline text="name" _note="full path:Live.Song.CuePoint.name\nGet/Listen to the name of this CuePoint, as visible in the arranger." type="label" _label="Property">
                </outline>
                <outline text="time" _note="full path:Live.Song.CuePoint.time\nGet/Listen to the CuePoint's time in beats." type="label" _label="Property">
                </outline>
            </outline>
            <outline text="Listeners">
                <outline text="add_name_listener()" _note="full path:Live.Song.CuePoint.add_name_listener()\nadd_name_listener( (CuePoint)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TPyHandle<ACuePoint>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_time_listener()" _note="full path:Live.Song.CuePoint.add_time_listener()\nadd_time_listener( (CuePoint)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;time&quot; has changed. C++ signature :  void add_time_listener(TPyHandle<ACuePoint>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="name_has_listener()" _note="full path:Live.Song.CuePoint.name_has_listener()\nname_has_listener( (CuePoint)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TPyHandle<ACuePoint>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_name_listener()" _note="full path:Live.Song.CuePoint.remove_name_listener()\nremove_name_listener( (CuePoint)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TPyHandle<ACuePoint>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_time_listener()" _note="full path:Live.Song.CuePoint.remove_time_listener()\nremove_time_listener( (CuePoint)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;time&quot;. C++ signature :  void remove_time_listener(TPyHandle<ACuePoint>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="time_has_listener()" _note="full path:Live.Song.CuePoint.time_has_listener()\ntime_has_listener( (CuePoint)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;time&quot;. C++ signature :  bool time_has_listener(TPyHandle<ACuePoint>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
            </outline>
            <outline text="Methods">
                <outline text="jump()" _note="full path:Live.Song.CuePoint.jump()\njump( (CuePoint)arg1) -> None : When the Song is playing, set the playing-position quantized to this Cuepoint's time. When not playing, simply move the start playing position. C++ signature :  void jump(TPyHandle<ACuePoint>)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
        <outline text="Quantization" _note="full path:Live.Song.Quantization\n" type="label" _label="Class">
            <outline text="Values">
                <outline text="q_2_bars" _note="full path:Live.Song.Quantization.q_2_bars\n" type="label" _label="Value">
                </outline>
                <outline text="q_4_bars" _note="full path:Live.Song.Quantization.q_4_bars\n" type="label" _label="Value">
                </outline>
                <outline text="q_8_bars" _note="full path:Live.Song.Quantization.q_8_bars\n" type="label" _label="Value">
                </outline>
                <outline text="q_bar" _note="full path:Live.Song.Quantization.q_bar\n" type="label" _label="Value">
                </outline>
                <outline text="q_eight" _note="full path:Live.Song.Quantization.q_eight\n" type="label" _label="Value">
                </outline>
                <outline text="q_eight_triplet" _note="full path:Live.Song.Quantization.q_eight_triplet\n" type="label" _label="Value">
                </outline>
                <outline text="q_half" _note="full path:Live.Song.Quantization.q_half\n" type="label" _label="Value">
                </outline>
                <outline text="q_half_triplet" _note="full path:Live.Song.Quantization.q_half_triplet\n" type="label" _label="Value">
                </outline>
                <outline text="q_no_q" _note="full path:Live.Song.Quantization.q_no_q\n" type="label" _label="Value">
                </outline>
                <outline text="q_quarter" _note="full path:Live.Song.Quantization.q_quarter\n" type="label" _label="Value">
                </outline>
                <outline text="q_quarter_triplet" _note="full path:Live.Song.Quantization.q_quarter_triplet\n" type="label" _label="Value">
                </outline>
                <outline text="q_sixtenth" _note="full path:Live.Song.Quantization.q_sixtenth\n" type="label" _label="Value">
                </outline>
                <outline text="q_sixtenth_triplet" _note="full path:Live.Song.Quantization.q_sixtenth_triplet\n" type="label" _label="Value">
                </outline>
                <outline text="q_thirtytwoth" _note="full path:Live.Song.Quantization.q_thirtytwoth\n" type="label" _label="Value">
                </outline>
            </outline>
        </outline>
        <outline text="RecordingQuantization" _note="full path:Live.Song.RecordingQuantization\n" type="label" _label="Class">
            <outline text="Values">
                <outline text="rec_q_eight" _note="full path:Live.Song.RecordingQuantization.rec_q_eight\n" type="label" _label="Value">
                </outline>
                <outline text="rec_q_eight_eight_triplet" _note="full path:Live.Song.RecordingQuantization.rec_q_eight_eight_triplet\n" type="label" _label="Value">
                </outline>
                <outline text="rec_q_eight_triplet" _note="full path:Live.Song.RecordingQuantization.rec_q_eight_triplet\n" type="label" _label="Value">
                </outline>
                <outline text="rec_q_no_q" _note="full path:Live.Song.RecordingQuantization.rec_q_no_q\n" type="label" _label="Value">
                </outline>
                <outline text="rec_q_quarter" _note="full path:Live.Song.RecordingQuantization.rec_q_quarter\n" type="label" _label="Value">
                </outline>
                <outline text="rec_q_sixtenth" _note="full path:Live.Song.RecordingQuantization.rec_q_sixtenth\n" type="label" _label="Value">
                </outline>
                <outline text="rec_q_sixtenth_sixtenth_triplet" _note="full path:Live.Song.RecordingQuantization.rec_q_sixtenth_sixtenth_triplet\n" type="label" _label="Value">
                </outline>
                <outline text="rec_q_sixtenth_triplet" _note="full path:Live.Song.RecordingQuantization.rec_q_sixtenth_triplet\n" type="label" _label="Value">
                </outline>
                <outline text="rec_q_thirtysecond" _note="full path:Live.Song.RecordingQuantization.rec_q_thirtysecond\n" type="label" _label="Value">
                </outline>
            </outline>
        </outline>
        <outline text="SessionRecordStatus" _note="full path:Live.Song.SessionRecordStatus\n" type="label" _label="Class">
            <outline text="Values">
                <outline text="off" _note="full path:Live.Song.SessionRecordStatus.off\n" type="label" _label="Value">
                </outline>
                <outline text="on" _note="full path:Live.Song.SessionRecordStatus.on\n" type="label" _label="Value">
                </outline>
                <outline text="transition" _note="full path:Live.Song.SessionRecordStatus.transition\n" type="label" _label="Value">
                </outline>
            </outline>
        </outline>
        <outline text="SmptTime" _note="full path:Live.Song.SmptTime\nRepresents a Time, split into Hours, Minutes, Seconds and Frames.The frame type must be specified when calling a function that returnsa SmptTime." type="label" _label="Class">
            <outline text="Properties">
                <outline text="frames" _note="full path:Live.Song.SmptTime.frames\n" type="label" _label="Property">
                </outline>
                <outline text="hours" _note="full path:Live.Song.SmptTime.hours\n" type="label" _label="Property">
                </outline>
                <outline text="minutes" _note="full path:Live.Song.SmptTime.minutes\n" type="label" _label="Property">
                </outline>
                <outline text="seconds" _note="full path:Live.Song.SmptTime.seconds\n" type="label" _label="Property">
                </outline>
            </outline>
        </outline>
        <outline text="Song" _note="full path:Live.Song.Song\nThis class represents a Live set." type="label" _label="Class">
            <outline text="View" _note="full path:Live.Song.Song.View\nRepresenting the view aspects of a Live document: The Session and Arrangerview." type="label" _label="Class">
                <outline text="Properties">
                    <outline text="_live_ptr" _note="full path:Live.Song.Song.View._live_ptr\n" type="label" _label="Property">
                    </outline>
                    <outline text="canonical_parent" _note="full path:Live.Song.Song.View.canonical_parent\nGet the canonical parent of the song view." type="label" _label="Property">
                    </outline>
                    <outline text="detail_clip" _note="full path:Live.Song.Song.View.detail_clip\nGet/Set the Clip that is currently visible in Lives Detailview." type="label" _label="Property">
                    </outline>
                    <outline text="draw_mode" _note="full path:Live.Song.Song.View.draw_mode\nGet/Set if the Envelope/Note draw mode is enabled." type="label" _label="Property">
                    </outline>
                    <outline text="follow_song" _note="full path:Live.Song.Song.View.follow_song\nGet/Set if the Arrangerview should scroll to show the playmarker." type="label" _label="Property">
                    </outline>
                    <outline text="highlighted_clip_slot" _note="full path:Live.Song.Song.View.highlighted_clip_slot\nGet/Set the clip slot, defined via the highlighted track and scene in the Session.Will be None for Master- and Sendtracks." type="label" _label="Property">
                    </outline>
                    <outline text="selected_chain" _note="full path:Live.Song.Song.View.selected_chain\nGet the highlighted chain if available." type="label" _label="Property">
                    </outline>
                    <outline text="selected_parameter" _note="full path:Live.Song.Song.View.selected_parameter\nGet the currently selected device parameter." type="label" _label="Property">
                    </outline>
                    <outline text="selected_scene" _note="full path:Live.Song.Song.View.selected_scene\nGet/Set the current selected scene in Lives Sessionview." type="label" _label="Property">
                    </outline>
                    <outline text="selected_track" _note="full path:Live.Song.Song.View.selected_track\nGet/Set the current selected Track in Lives Session or Arrangerview." type="label" _label="Property">
                    </outline>
                </outline>
                <outline text="Listeners">
                    <outline text="add_detail_clip_listener()" _note="full path:Live.Song.Song.View.add_detail_clip_listener()\nadd_detail_clip_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;detail_clip&quot; has changed. C++ signature :  void add_detail_clip_listener(TPyViewData<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="add_draw_mode_listener()" _note="full path:Live.Song.Song.View.add_draw_mode_listener()\nadd_draw_mode_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;draw_mode&quot; has changed. C++ signature :  void add_draw_mode_listener(TPyViewData<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="add_follow_song_listener()" _note="full path:Live.Song.Song.View.add_follow_song_listener()\nadd_follow_song_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;follow_song&quot; has changed. C++ signature :  void add_follow_song_listener(TPyViewData<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="add_selected_chain_listener()" _note="full path:Live.Song.Song.View.add_selected_chain_listener()\nadd_selected_chain_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;selected_chain&quot; has changed. C++ signature :  void add_selected_chain_listener(TPyViewData<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="add_selected_parameter_listener()" _note="full path:Live.Song.Song.View.add_selected_parameter_listener()\nadd_selected_parameter_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;selected_parameter&quot; has changed. C++ signature :  void add_selected_parameter_listener(TPyViewData<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="add_selected_scene_listener()" _note="full path:Live.Song.Song.View.add_selected_scene_listener()\nadd_selected_scene_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;selected_scene&quot; has changed. C++ signature :  void add_selected_scene_listener(TPyViewData<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="add_selected_track_listener()" _note="full path:Live.Song.Song.View.add_selected_track_listener()\nadd_selected_track_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;selected_track&quot; has changed. C++ signature :  void add_selected_track_listener(TPyViewData<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="detail_clip_has_listener()" _note="full path:Live.Song.Song.View.detail_clip_has_listener()\ndetail_clip_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;detail_clip&quot;. C++ signature :  bool detail_clip_has_listener(TPyViewData<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="draw_mode_has_listener()" _note="full path:Live.Song.Song.View.draw_mode_has_listener()\ndraw_mode_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;draw_mode&quot;. C++ signature :  bool draw_mode_has_listener(TPyViewData<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="follow_song_has_listener()" _note="full path:Live.Song.Song.View.follow_song_has_listener()\nfollow_song_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;follow_song&quot;. C++ signature :  bool follow_song_has_listener(TPyViewData<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_detail_clip_listener()" _note="full path:Live.Song.Song.View.remove_detail_clip_listener()\nremove_detail_clip_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;detail_clip&quot;. C++ signature :  void remove_detail_clip_listener(TPyViewData<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_draw_mode_listener()" _note="full path:Live.Song.Song.View.remove_draw_mode_listener()\nremove_draw_mode_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;draw_mode&quot;. C++ signature :  void remove_draw_mode_listener(TPyViewData<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_follow_song_listener()" _note="full path:Live.Song.Song.View.remove_follow_song_listener()\nremove_follow_song_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;follow_song&quot;. C++ signature :  void remove_follow_song_listener(TPyViewData<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_selected_chain_listener()" _note="full path:Live.Song.Song.View.remove_selected_chain_listener()\nremove_selected_chain_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;selected_chain&quot;. C++ signature :  void remove_selected_chain_listener(TPyViewData<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_selected_parameter_listener()" _note="full path:Live.Song.Song.View.remove_selected_parameter_listener()\nremove_selected_parameter_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;selected_parameter&quot;. C++ signature :  void remove_selected_parameter_listener(TPyViewData<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_selected_scene_listener()" _note="full path:Live.Song.Song.View.remove_selected_scene_listener()\nremove_selected_scene_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;selected_scene&quot;. C++ signature :  void remove_selected_scene_listener(TPyViewData<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_selected_track_listener()" _note="full path:Live.Song.Song.View.remove_selected_track_listener()\nremove_selected_track_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;selected_track&quot;. C++ signature :  void remove_selected_track_listener(TPyViewData<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="selected_chain_has_listener()" _note="full path:Live.Song.Song.View.selected_chain_has_listener()\nselected_chain_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;selected_chain&quot;. C++ signature :  bool selected_chain_has_listener(TPyViewData<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="selected_parameter_has_listener()" _note="full path:Live.Song.Song.View.selected_parameter_has_listener()\nselected_parameter_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;selected_parameter&quot;. C++ signature :  bool selected_parameter_has_listener(TPyViewData<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="selected_scene_has_listener()" _note="full path:Live.Song.Song.View.selected_scene_has_listener()\nselected_scene_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;selected_scene&quot;. C++ signature :  bool selected_scene_has_listener(TPyViewData<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="selected_track_has_listener()" _note="full path:Live.Song.Song.View.selected_track_has_listener()\nselected_track_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;selected_track&quot;. C++ signature :  bool selected_track_has_listener(TPyViewData<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                </outline>
                <outline text="Methods">
                    <outline text="select_device()" _note="full path:Live.Song.Song.View.select_device()\nselect_device( (View)arg1, (Device)arg2 [, (bool)ShouldAppointDevice=True]) -> None : Select the given device. C++ signature :  void select_device(TPyViewData<ASong>,TPyHandle<ADevice> [,bool=True])" type="label" _label="Method">
                    </outline>
                </outline>
            </outline>
            <outline text="Properties">
                <outline text="_live_ptr" _note="full path:Live.Song.Song._live_ptr\n" type="label" _label="Property">
                </outline>
                <outline text="appointed_device" _note="full path:Live.Song.Song.appointed_device\nRead, write, and listen access to the appointed Device" type="label" _label="Property">
                </outline>
                <outline text="arrangement_overdub" _note="full path:Live.Song.Song.arrangement_overdub\nGet/Set the global arrangement overdub state." type="label" _label="Property">
                </outline>
                <outline text="back_to_arranger" _note="full path:Live.Song.Song.back_to_arranger\nGet/Set if triggering a Clip in the Session, disabled the playback ofClips in the Arranger." type="label" _label="Property">
                </outline>
                <outline text="can_capture_midi" _note="full path:Live.Song.Song.can_capture_midi\nGet whether there currently is material to be captured on any tracks." type="label" _label="Property">
                </outline>
                <outline text="can_jump_to_next_cue" _note="full path:Live.Song.Song.can_jump_to_next_cue\nReturns true when there is a cue marker right to the playing pos thatwe could jump to." type="label" _label="Property">
                </outline>
                <outline text="can_jump_to_prev_cue" _note="full path:Live.Song.Song.can_jump_to_prev_cue\nReturns true when there is a cue marker left to the playing pos thatwe could jump to." type="label" _label="Property">
                </outline>
                <outline text="can_redo" _note="full path:Live.Song.Song.can_redo\nReturns true if there is an undone action that we can redo." type="label" _label="Property">
                </outline>
                <outline text="can_undo" _note="full path:Live.Song.Song.can_undo\nReturns true if there is an action that we can restore." type="label" _label="Property">
                </outline>
                <outline text="canonical_parent" _note="full path:Live.Song.Song.canonical_parent\nGet the canonical parent of the song." type="label" _label="Property">
                </outline>
                <outline text="clip_trigger_quantization" _note="full path:Live.Song.Song.clip_trigger_quantization\nGet/Set access to the quantization settings that are used to fireClips in the Session." type="label" _label="Property">
                </outline>
                <outline text="count_in_duration" _note="full path:Live.Song.Song.count_in_duration\nGet the count in duration. Returns an index, mapped as follows: 0 - None, 1 - 1 Bar, 2 - 2 Bars, 3 - 4 Bars." type="label" _label="Property">
                </outline>
                <outline text="cue_points" _note="full path:Live.Song.Song.cue_points\nConst access to a list of all cue points of the Live Song." type="label" _label="Property">
                </outline>
                <outline text="current_song_time" _note="full path:Live.Song.Song.current_song_time\nGet/Set access to the songs current playing position in ms." type="label" _label="Property">
                </outline>
                <outline text="exclusive_arm" _note="full path:Live.Song.Song.exclusive_arm\nGet if Tracks should be armed exclusively by default." type="label" _label="Property">
                </outline>
                <outline text="exclusive_solo" _note="full path:Live.Song.Song.exclusive_solo\nGet if Tracks should be soloed exclusively by default." type="label" _label="Property">
                </outline>
                <outline text="groove_amount" _note="full path:Live.Song.Song.groove_amount\nGet/Set the global groove amount, that adjust all setup groovesin all clips." type="label" _label="Property">
                </outline>
                <outline text="groove_pool" _note="full path:Live.Song.Song.groove_pool\nGet the groove pool." type="label" _label="Property">
                </outline>
                <outline text="is_counting_in" _note="full path:Live.Song.Song.is_counting_in\nGet whether currently counting in." type="label" _label="Property">
                </outline>
                <outline text="is_playing" _note="full path:Live.Song.Song.is_playing\nReturns true if the Song is currently playing." type="label" _label="Property">
                </outline>
                <outline text="last_event_time" _note="full path:Live.Song.Song.last_event_time\nReturn the time of the last set event in the song. In contrary tosong_length, this will not add some extra beats that are mostly neededfor Display purposes in the Arrangerview." type="label" _label="Property">
                </outline>
                <outline text="loop" _note="full path:Live.Song.Song.loop\nGet/Set the looping flag that en/disables the usage of the globalloop markers in the song." type="label" _label="Property">
                </outline>
                <outline text="loop_length" _note="full path:Live.Song.Song.loop_length\nGet/Set the length of the global loop marker position in beats." type="label" _label="Property">
                </outline>
                <outline text="loop_start" _note="full path:Live.Song.Song.loop_start\nGet/Set the start of the global loop marker position in beats." type="label" _label="Property">
                </outline>
                <outline text="master_track" _note="full path:Live.Song.Song.master_track\nAccess to the Master Track (always available)" type="label" _label="Property">
                </outline>
                <outline text="metronome" _note="full path:Live.Song.Song.metronome\nGet/Set if the metronom is audible." type="label" _label="Property">
                </outline>
                <outline text="midi_recording_quantization" _note="full path:Live.Song.Song.midi_recording_quantization\nGet/Set access to the settings that are used to quantizeMIDI recordings." type="label" _label="Property">
                </outline>
                <outline text="nudge_down" _note="full path:Live.Song.Song.nudge_down\nGet/Set the status of the nudge down button." type="label" _label="Property">
                </outline>
                <outline text="nudge_up" _note="full path:Live.Song.Song.nudge_up\nGet/Set the status of the nudge up button." type="label" _label="Property">
                </outline>
                <outline text="overdub" _note="full path:Live.Song.Song.overdub\nLegacy hook for Live 8 overdub state. Now hooks tosession record, but never starts playback." type="label" _label="Property">
                </outline>
                <outline text="punch_in" _note="full path:Live.Song.Song.punch_in\nGet/Set the flag that will enable recording as soon as the Song playsand hits the global loop start region." type="label" _label="Property">
                </outline>
                <outline text="punch_out" _note="full path:Live.Song.Song.punch_out\nGet/Set the flag that will disable recording as soon as the Song playsand hits the global loop end region." type="label" _label="Property">
                </outline>
                <outline text="re_enable_automation_enabled" _note="full path:Live.Song.Song.re_enable_automation_enabled\nReturns true if some automated parameter has been overriden" type="label" _label="Property">
                </outline>
                <outline text="record_mode" _note="full path:Live.Song.Song.record_mode\nGet/Set the state of the global recording flag." type="label" _label="Property">
                </outline>
                <outline text="return_tracks" _note="full path:Live.Song.Song.return_tracks\nConst access to the list of available Return Tracks." type="label" _label="Property">
                </outline>
                <outline text="root_note" _note="full path:Live.Song.Song.root_note\nSet and access the root note (i.e. key) of the song used for control surfaces. The root note can be a number between 0 and 11, with 0 corresponding to C and 11 corresponding to B." type="label" _label="Property">
                </outline>
                <outline text="scale_intervals" _note="full path:Live.Song.Song.scale_intervals\nReports the current scale's intervals as a list of integers, starting with the root note and representing the number of halfsteps (e.g. Major -> 0, 2, 4, 5, 7, 9, 11)" type="label" _label="Property">
                </outline>
                <outline text="scale_name" _note="full path:Live.Song.Song.scale_name\nSet and access the last used scale name for control surfaces. The default scale names that can be saved with a set and recalled are'Major', 'Minor', 'Dorian', 'Mixolydian' ,'Lydian' ,'Phrygian' ,'Locrian', 'Whole Tone', 'Half-whole Dim.', 'Whole-half Dim.', 'Minor Blues', 'Minor Pentatonic', 'Major Pentatonic', 'Harmonic Minor', 'Harmonic Major', 'Dorian #4', 'Phrygian Dominant', 'Melodic Minor', 'Lydian Augmented', 'Lydian Dominant', 'Super Locrian', 'Bhairav', 'Hungarian Minor', '8-Tone Spanish', 'Hirajoshi', 'In-Sen', 'Iwato', 'Kumoi', 'Pelog Selisir', 'Pelog Tembung', 'Messaien 3', 'Messaien 4', 'Messaien 5', 'Messaien 6', 'Messaien 7'" type="label" _label="Property">
                </outline>
                <outline text="scenes" _note="full path:Live.Song.Song.scenes\nConst access to a list of all Scenes in the Live Song." type="label" _label="Property">
                </outline>
                <outline text="select_on_launch" _note="full path:Live.Song.Song.select_on_launch\nGet if Scenes and Clips should be selected when fired." type="label" _label="Property">
                </outline>
                <outline text="session_automation_record" _note="full path:Live.Song.Song.session_automation_record\nReturns true if automation recording is enabled." type="label" _label="Property">
                </outline>
                <outline text="session_record" _note="full path:Live.Song.Song.session_record\nGet/Set the session record state." type="label" _label="Property">
                </outline>
                <outline text="session_record_status" _note="full path:Live.Song.Song.session_record_status\nGet the session slot-recording state." type="label" _label="Property">
                </outline>
                <outline text="signature_denominator" _note="full path:Live.Song.Song.signature_denominator\nGet/Set access to the global signature denominator of the Song." type="label" _label="Property">
                </outline>
                <outline text="signature_numerator" _note="full path:Live.Song.Song.signature_numerator\nGet/Set access to the global signature numerator of the Song." type="label" _label="Property">
                </outline>
                <outline text="song_length" _note="full path:Live.Song.Song.song_length\nReturn the time of the last set event in the song, plus som extra beatsthat are usually added for better navigation in the arrangerview." type="label" _label="Property">
                </outline>
                <outline text="swing_amount" _note="full path:Live.Song.Song.swing_amount\nGet/Set access to the amount of swing that is applied when adding or quantizing notes to MIDI clips" type="label" _label="Property">
                </outline>
                <outline text="tempo" _note="full path:Live.Song.Song.tempo\nGet/Set the global project tempo." type="label" _label="Property">
                </outline>
                <outline text="tracks" _note="full path:Live.Song.Song.tracks\nConst access to a list of all Player Tracks in the Live Song, exludingthe return and Master Track (see also Song.send_tracks and Song.master_track).At least one MIDI or Audio Track is always available." type="label" _label="Property">
                </outline>
                <outline text="view" _note="full path:Live.Song.Song.view\nRepresenting the view aspects of a Live document: The Session and Arrangerview." type="label" _label="Property">
                </outline>
                <outline text="visible_tracks" _note="full path:Live.Song.Song.visible_tracks\nConst access to a list of all visible Player Tracks in the Live Song, exludingthe return and Master Track (see also Song.send_tracks and Song.master_track).At least one MIDI or Audio Track is always available." type="label" _label="Property">
                </outline>
            </outline>
            <outline text="Listeners">
                <outline text="add_appointed_device_listener()" _note="full path:Live.Song.Song.add_appointed_device_listener()\nadd_appointed_device_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;appointed_device&quot; has changed. C++ signature :  void add_appointed_device_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_arrangement_overdub_listener()" _note="full path:Live.Song.Song.add_arrangement_overdub_listener()\nadd_arrangement_overdub_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;arrangement_overdub&quot; has changed. C++ signature :  void add_arrangement_overdub_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_back_to_arranger_listener()" _note="full path:Live.Song.Song.add_back_to_arranger_listener()\nadd_back_to_arranger_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;back_to_arranger&quot; has changed. C++ signature :  void add_back_to_arranger_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_can_capture_midi_listener()" _note="full path:Live.Song.Song.add_can_capture_midi_listener()\nadd_can_capture_midi_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;can_capture_midi&quot; has changed. C++ signature :  void add_can_capture_midi_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_can_jump_to_next_cue_listener()" _note="full path:Live.Song.Song.add_can_jump_to_next_cue_listener()\nadd_can_jump_to_next_cue_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;can_jump_to_next_cue&quot; has changed. C++ signature :  void add_can_jump_to_next_cue_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_can_jump_to_prev_cue_listener()" _note="full path:Live.Song.Song.add_can_jump_to_prev_cue_listener()\nadd_can_jump_to_prev_cue_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;can_jump_to_prev_cue&quot; has changed. C++ signature :  void add_can_jump_to_prev_cue_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_clip_trigger_quantization_listener()" _note="full path:Live.Song.Song.add_clip_trigger_quantization_listener()\nadd_clip_trigger_quantization_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;clip_trigger_quantization&quot; has changed. C++ signature :  void add_clip_trigger_quantization_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_count_in_duration_listener()" _note="full path:Live.Song.Song.add_count_in_duration_listener()\nadd_count_in_duration_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;count_in_duration&quot; has changed. C++ signature :  void add_count_in_duration_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_cue_points_listener()" _note="full path:Live.Song.Song.add_cue_points_listener()\nadd_cue_points_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;cue_points&quot; has changed. C++ signature :  void add_cue_points_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_current_song_time_listener()" _note="full path:Live.Song.Song.add_current_song_time_listener()\nadd_current_song_time_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;current_song_time&quot; has changed. C++ signature :  void add_current_song_time_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_data_listener()" _note="full path:Live.Song.Song.add_data_listener()\nadd_data_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;data&quot; has changed. C++ signature :  void add_data_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_exclusive_arm_listener()" _note="full path:Live.Song.Song.add_exclusive_arm_listener()\nadd_exclusive_arm_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;exclusive_arm&quot; has changed. C++ signature :  void add_exclusive_arm_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_groove_amount_listener()" _note="full path:Live.Song.Song.add_groove_amount_listener()\nadd_groove_amount_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;groove_amount&quot; has changed. C++ signature :  void add_groove_amount_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_is_counting_in_listener()" _note="full path:Live.Song.Song.add_is_counting_in_listener()\nadd_is_counting_in_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_counting_in&quot; has changed. C++ signature :  void add_is_counting_in_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_is_playing_listener()" _note="full path:Live.Song.Song.add_is_playing_listener()\nadd_is_playing_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_playing&quot; has changed. C++ signature :  void add_is_playing_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_loop_length_listener()" _note="full path:Live.Song.Song.add_loop_length_listener()\nadd_loop_length_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;loop_length&quot; has changed. C++ signature :  void add_loop_length_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_loop_listener()" _note="full path:Live.Song.Song.add_loop_listener()\nadd_loop_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;loop&quot; has changed. C++ signature :  void add_loop_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_loop_start_listener()" _note="full path:Live.Song.Song.add_loop_start_listener()\nadd_loop_start_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;loop_start&quot; has changed. C++ signature :  void add_loop_start_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_metronome_listener()" _note="full path:Live.Song.Song.add_metronome_listener()\nadd_metronome_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;metronome&quot; has changed. C++ signature :  void add_metronome_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_midi_recording_quantization_listener()" _note="full path:Live.Song.Song.add_midi_recording_quantization_listener()\nadd_midi_recording_quantization_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;midi_recording_quantization&quot; has changed. C++ signature :  void add_midi_recording_quantization_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_nudge_down_listener()" _note="full path:Live.Song.Song.add_nudge_down_listener()\nadd_nudge_down_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;nudge_down&quot; has changed. C++ signature :  void add_nudge_down_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_nudge_up_listener()" _note="full path:Live.Song.Song.add_nudge_up_listener()\nadd_nudge_up_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;nudge_up&quot; has changed. C++ signature :  void add_nudge_up_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_overdub_listener()" _note="full path:Live.Song.Song.add_overdub_listener()\nadd_overdub_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;overdub&quot; has changed. C++ signature :  void add_overdub_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_punch_in_listener()" _note="full path:Live.Song.Song.add_punch_in_listener()\nadd_punch_in_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;punch_in&quot; has changed. C++ signature :  void add_punch_in_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_punch_out_listener()" _note="full path:Live.Song.Song.add_punch_out_listener()\nadd_punch_out_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;punch_out&quot; has changed. C++ signature :  void add_punch_out_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_re_enable_automation_enabled_listener()" _note="full path:Live.Song.Song.add_re_enable_automation_enabled_listener()\nadd_re_enable_automation_enabled_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;re_enable_automation_enabled&quot; has changed. C++ signature :  void add_re_enable_automation_enabled_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_record_mode_listener()" _note="full path:Live.Song.Song.add_record_mode_listener()\nadd_record_mode_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;record_mode&quot; has changed. C++ signature :  void add_record_mode_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_return_tracks_listener()" _note="full path:Live.Song.Song.add_return_tracks_listener()\nadd_return_tracks_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;return_tracks&quot; has changed. C++ signature :  void add_return_tracks_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_root_note_listener()" _note="full path:Live.Song.Song.add_root_note_listener()\nadd_root_note_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;root_note&quot; has changed. C++ signature :  void add_root_note_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_scale_intervals_listener()" _note="full path:Live.Song.Song.add_scale_intervals_listener()\nadd_scale_intervals_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;scale_intervals&quot; has changed. C++ signature :  void add_scale_intervals_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_scale_name_listener()" _note="full path:Live.Song.Song.add_scale_name_listener()\nadd_scale_name_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;scale_name&quot; has changed. C++ signature :  void add_scale_name_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_scenes_listener()" _note="full path:Live.Song.Song.add_scenes_listener()\nadd_scenes_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;scenes&quot; has changed. C++ signature :  void add_scenes_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_session_automation_record_listener()" _note="full path:Live.Song.Song.add_session_automation_record_listener()\nadd_session_automation_record_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;session_automation_record&quot; has changed. C++ signature :  void add_session_automation_record_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_session_record_listener()" _note="full path:Live.Song.Song.add_session_record_listener()\nadd_session_record_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;session_record&quot; has changed. C++ signature :  void add_session_record_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_session_record_status_listener()" _note="full path:Live.Song.Song.add_session_record_status_listener()\nadd_session_record_status_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;session_record_status&quot; has changed. C++ signature :  void add_session_record_status_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_signature_denominator_listener()" _note="full path:Live.Song.Song.add_signature_denominator_listener()\nadd_signature_denominator_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;signature_denominator&quot; has changed. C++ signature :  void add_signature_denominator_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_signature_numerator_listener()" _note="full path:Live.Song.Song.add_signature_numerator_listener()\nadd_signature_numerator_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;signature_numerator&quot; has changed. C++ signature :  void add_signature_numerator_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_song_length_listener()" _note="full path:Live.Song.Song.add_song_length_listener()\nadd_song_length_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;song_length&quot; has changed. C++ signature :  void add_song_length_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_swing_amount_listener()" _note="full path:Live.Song.Song.add_swing_amount_listener()\nadd_swing_amount_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;swing_amount&quot; has changed. C++ signature :  void add_swing_amount_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_tempo_listener()" _note="full path:Live.Song.Song.add_tempo_listener()\nadd_tempo_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;tempo&quot; has changed. C++ signature :  void add_tempo_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_tracks_listener()" _note="full path:Live.Song.Song.add_tracks_listener()\nadd_tracks_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;tracks&quot; has changed. C++ signature :  void add_tracks_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_visible_tracks_listener()" _note="full path:Live.Song.Song.add_visible_tracks_listener()\nadd_visible_tracks_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;visible_tracks&quot; has changed. C++ signature :  void add_visible_tracks_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="appointed_device_has_listener()" _note="full path:Live.Song.Song.appointed_device_has_listener()\nappointed_device_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;appointed_device&quot;. C++ signature :  bool appointed_device_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="arrangement_overdub_has_listener()" _note="full path:Live.Song.Song.arrangement_overdub_has_listener()\narrangement_overdub_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;arrangement_overdub&quot;. C++ signature :  bool arrangement_overdub_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="back_to_arranger_has_listener()" _note="full path:Live.Song.Song.back_to_arranger_has_listener()\nback_to_arranger_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;back_to_arranger&quot;. C++ signature :  bool back_to_arranger_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="can_capture_midi_has_listener()" _note="full path:Live.Song.Song.can_capture_midi_has_listener()\ncan_capture_midi_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;can_capture_midi&quot;. C++ signature :  bool can_capture_midi_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="can_jump_to_next_cue_has_listener()" _note="full path:Live.Song.Song.can_jump_to_next_cue_has_listener()\ncan_jump_to_next_cue_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;can_jump_to_next_cue&quot;. C++ signature :  bool can_jump_to_next_cue_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="can_jump_to_prev_cue_has_listener()" _note="full path:Live.Song.Song.can_jump_to_prev_cue_has_listener()\ncan_jump_to_prev_cue_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;can_jump_to_prev_cue&quot;. C++ signature :  bool can_jump_to_prev_cue_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="clip_trigger_quantization_has_listener()" _note="full path:Live.Song.Song.clip_trigger_quantization_has_listener()\nclip_trigger_quantization_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;clip_trigger_quantization&quot;. C++ signature :  bool clip_trigger_quantization_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="count_in_duration_has_listener()" _note="full path:Live.Song.Song.count_in_duration_has_listener()\ncount_in_duration_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;count_in_duration&quot;. C++ signature :  bool count_in_duration_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="cue_points_has_listener()" _note="full path:Live.Song.Song.cue_points_has_listener()\ncue_points_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;cue_points&quot;. C++ signature :  bool cue_points_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="current_song_time_has_listener()" _note="full path:Live.Song.Song.current_song_time_has_listener()\ncurrent_song_time_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;current_song_time&quot;. C++ signature :  bool current_song_time_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="data_has_listener()" _note="full path:Live.Song.Song.data_has_listener()\ndata_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;data&quot;. C++ signature :  bool data_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="exclusive_arm_has_listener()" _note="full path:Live.Song.Song.exclusive_arm_has_listener()\nexclusive_arm_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;exclusive_arm&quot;. C++ signature :  bool exclusive_arm_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="groove_amount_has_listener()" _note="full path:Live.Song.Song.groove_amount_has_listener()\ngroove_amount_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;groove_amount&quot;. C++ signature :  bool groove_amount_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="is_counting_in_has_listener()" _note="full path:Live.Song.Song.is_counting_in_has_listener()\nis_counting_in_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_counting_in&quot;. C++ signature :  bool is_counting_in_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="is_playing_has_listener()" _note="full path:Live.Song.Song.is_playing_has_listener()\nis_playing_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_playing&quot;. C++ signature :  bool is_playing_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="loop_has_listener()" _note="full path:Live.Song.Song.loop_has_listener()\nloop_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;loop&quot;. C++ signature :  bool loop_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="loop_length_has_listener()" _note="full path:Live.Song.Song.loop_length_has_listener()\nloop_length_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;loop_length&quot;. C++ signature :  bool loop_length_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="loop_start_has_listener()" _note="full path:Live.Song.Song.loop_start_has_listener()\nloop_start_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;loop_start&quot;. C++ signature :  bool loop_start_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="metronome_has_listener()" _note="full path:Live.Song.Song.metronome_has_listener()\nmetronome_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;metronome&quot;. C++ signature :  bool metronome_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="midi_recording_quantization_has_listener()" _note="full path:Live.Song.Song.midi_recording_quantization_has_listener()\nmidi_recording_quantization_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;midi_recording_quantization&quot;. C++ signature :  bool midi_recording_quantization_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="nudge_down_has_listener()" _note="full path:Live.Song.Song.nudge_down_has_listener()\nnudge_down_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;nudge_down&quot;. C++ signature :  bool nudge_down_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="nudge_up_has_listener()" _note="full path:Live.Song.Song.nudge_up_has_listener()\nnudge_up_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;nudge_up&quot;. C++ signature :  bool nudge_up_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="overdub_has_listener()" _note="full path:Live.Song.Song.overdub_has_listener()\noverdub_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;overdub&quot;. C++ signature :  bool overdub_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="punch_in_has_listener()" _note="full path:Live.Song.Song.punch_in_has_listener()\npunch_in_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;punch_in&quot;. C++ signature :  bool punch_in_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="punch_out_has_listener()" _note="full path:Live.Song.Song.punch_out_has_listener()\npunch_out_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;punch_out&quot;. C++ signature :  bool punch_out_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="re_enable_automation_enabled_has_listener()" _note="full path:Live.Song.Song.re_enable_automation_enabled_has_listener()\nre_enable_automation_enabled_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;re_enable_automation_enabled&quot;. C++ signature :  bool re_enable_automation_enabled_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="record_mode_has_listener()" _note="full path:Live.Song.Song.record_mode_has_listener()\nrecord_mode_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;record_mode&quot;. C++ signature :  bool record_mode_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_appointed_device_listener()" _note="full path:Live.Song.Song.remove_appointed_device_listener()\nremove_appointed_device_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;appointed_device&quot;. C++ signature :  void remove_appointed_device_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_arrangement_overdub_listener()" _note="full path:Live.Song.Song.remove_arrangement_overdub_listener()\nremove_arrangement_overdub_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;arrangement_overdub&quot;. C++ signature :  void remove_arrangement_overdub_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_back_to_arranger_listener()" _note="full path:Live.Song.Song.remove_back_to_arranger_listener()\nremove_back_to_arranger_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;back_to_arranger&quot;. C++ signature :  void remove_back_to_arranger_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_can_capture_midi_listener()" _note="full path:Live.Song.Song.remove_can_capture_midi_listener()\nremove_can_capture_midi_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;can_capture_midi&quot;. C++ signature :  void remove_can_capture_midi_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_can_jump_to_next_cue_listener()" _note="full path:Live.Song.Song.remove_can_jump_to_next_cue_listener()\nremove_can_jump_to_next_cue_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;can_jump_to_next_cue&quot;. C++ signature :  void remove_can_jump_to_next_cue_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_can_jump_to_prev_cue_listener()" _note="full path:Live.Song.Song.remove_can_jump_to_prev_cue_listener()\nremove_can_jump_to_prev_cue_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;can_jump_to_prev_cue&quot;. C++ signature :  void remove_can_jump_to_prev_cue_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_clip_trigger_quantization_listener()" _note="full path:Live.Song.Song.remove_clip_trigger_quantization_listener()\nremove_clip_trigger_quantization_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;clip_trigger_quantization&quot;. C++ signature :  void remove_clip_trigger_quantization_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_count_in_duration_listener()" _note="full path:Live.Song.Song.remove_count_in_duration_listener()\nremove_count_in_duration_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;count_in_duration&quot;. C++ signature :  void remove_count_in_duration_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_cue_points_listener()" _note="full path:Live.Song.Song.remove_cue_points_listener()\nremove_cue_points_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;cue_points&quot;. C++ signature :  void remove_cue_points_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_current_song_time_listener()" _note="full path:Live.Song.Song.remove_current_song_time_listener()\nremove_current_song_time_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;current_song_time&quot;. C++ signature :  void remove_current_song_time_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_data_listener()" _note="full path:Live.Song.Song.remove_data_listener()\nremove_data_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;data&quot;. C++ signature :  void remove_data_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_exclusive_arm_listener()" _note="full path:Live.Song.Song.remove_exclusive_arm_listener()\nremove_exclusive_arm_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;exclusive_arm&quot;. C++ signature :  void remove_exclusive_arm_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_groove_amount_listener()" _note="full path:Live.Song.Song.remove_groove_amount_listener()\nremove_groove_amount_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;groove_amount&quot;. C++ signature :  void remove_groove_amount_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_is_counting_in_listener()" _note="full path:Live.Song.Song.remove_is_counting_in_listener()\nremove_is_counting_in_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_counting_in&quot;. C++ signature :  void remove_is_counting_in_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_is_playing_listener()" _note="full path:Live.Song.Song.remove_is_playing_listener()\nremove_is_playing_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_playing&quot;. C++ signature :  void remove_is_playing_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_loop_length_listener()" _note="full path:Live.Song.Song.remove_loop_length_listener()\nremove_loop_length_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;loop_length&quot;. C++ signature :  void remove_loop_length_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_loop_listener()" _note="full path:Live.Song.Song.remove_loop_listener()\nremove_loop_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;loop&quot;. C++ signature :  void remove_loop_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_loop_start_listener()" _note="full path:Live.Song.Song.remove_loop_start_listener()\nremove_loop_start_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;loop_start&quot;. C++ signature :  void remove_loop_start_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_metronome_listener()" _note="full path:Live.Song.Song.remove_metronome_listener()\nremove_metronome_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;metronome&quot;. C++ signature :  void remove_metronome_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_midi_recording_quantization_listener()" _note="full path:Live.Song.Song.remove_midi_recording_quantization_listener()\nremove_midi_recording_quantization_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;midi_recording_quantization&quot;. C++ signature :  void remove_midi_recording_quantization_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_nudge_down_listener()" _note="full path:Live.Song.Song.remove_nudge_down_listener()\nremove_nudge_down_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;nudge_down&quot;. C++ signature :  void remove_nudge_down_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_nudge_up_listener()" _note="full path:Live.Song.Song.remove_nudge_up_listener()\nremove_nudge_up_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;nudge_up&quot;. C++ signature :  void remove_nudge_up_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_overdub_listener()" _note="full path:Live.Song.Song.remove_overdub_listener()\nremove_overdub_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;overdub&quot;. C++ signature :  void remove_overdub_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_punch_in_listener()" _note="full path:Live.Song.Song.remove_punch_in_listener()\nremove_punch_in_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;punch_in&quot;. C++ signature :  void remove_punch_in_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_punch_out_listener()" _note="full path:Live.Song.Song.remove_punch_out_listener()\nremove_punch_out_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;punch_out&quot;. C++ signature :  void remove_punch_out_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_re_enable_automation_enabled_listener()" _note="full path:Live.Song.Song.remove_re_enable_automation_enabled_listener()\nremove_re_enable_automation_enabled_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;re_enable_automation_enabled&quot;. C++ signature :  void remove_re_enable_automation_enabled_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_record_mode_listener()" _note="full path:Live.Song.Song.remove_record_mode_listener()\nremove_record_mode_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;record_mode&quot;. C++ signature :  void remove_record_mode_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_return_tracks_listener()" _note="full path:Live.Song.Song.remove_return_tracks_listener()\nremove_return_tracks_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;return_tracks&quot;. C++ signature :  void remove_return_tracks_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_root_note_listener()" _note="full path:Live.Song.Song.remove_root_note_listener()\nremove_root_note_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;root_note&quot;. C++ signature :  void remove_root_note_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_scale_intervals_listener()" _note="full path:Live.Song.Song.remove_scale_intervals_listener()\nremove_scale_intervals_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;scale_intervals&quot;. C++ signature :  void remove_scale_intervals_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_scale_name_listener()" _note="full path:Live.Song.Song.remove_scale_name_listener()\nremove_scale_name_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;scale_name&quot;. C++ signature :  void remove_scale_name_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_scenes_listener()" _note="full path:Live.Song.Song.remove_scenes_listener()\nremove_scenes_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;scenes&quot;. C++ signature :  void remove_scenes_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_session_automation_record_listener()" _note="full path:Live.Song.Song.remove_session_automation_record_listener()\nremove_session_automation_record_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;session_automation_record&quot;. C++ signature :  void remove_session_automation_record_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_session_record_listener()" _note="full path:Live.Song.Song.remove_session_record_listener()\nremove_session_record_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;session_record&quot;. C++ signature :  void remove_session_record_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_session_record_status_listener()" _note="full path:Live.Song.Song.remove_session_record_status_listener()\nremove_session_record_status_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;session_record_status&quot;. C++ signature :  void remove_session_record_status_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_signature_denominator_listener()" _note="full path:Live.Song.Song.remove_signature_denominator_listener()\nremove_signature_denominator_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;signature_denominator&quot;. C++ signature :  void remove_signature_denominator_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_signature_numerator_listener()" _note="full path:Live.Song.Song.remove_signature_numerator_listener()\nremove_signature_numerator_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;signature_numerator&quot;. C++ signature :  void remove_signature_numerator_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_song_length_listener()" _note="full path:Live.Song.Song.remove_song_length_listener()\nremove_song_length_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;song_length&quot;. C++ signature :  void remove_song_length_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_swing_amount_listener()" _note="full path:Live.Song.Song.remove_swing_amount_listener()\nremove_swing_amount_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;swing_amount&quot;. C++ signature :  void remove_swing_amount_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_tempo_listener()" _note="full path:Live.Song.Song.remove_tempo_listener()\nremove_tempo_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;tempo&quot;. C++ signature :  void remove_tempo_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_tracks_listener()" _note="full path:Live.Song.Song.remove_tracks_listener()\nremove_tracks_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;tracks&quot;. C++ signature :  void remove_tracks_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_visible_tracks_listener()" _note="full path:Live.Song.Song.remove_visible_tracks_listener()\nremove_visible_tracks_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;visible_tracks&quot;. C++ signature :  void remove_visible_tracks_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="return_tracks_has_listener()" _note="full path:Live.Song.Song.return_tracks_has_listener()\nreturn_tracks_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;return_tracks&quot;. C++ signature :  bool return_tracks_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="root_note_has_listener()" _note="full path:Live.Song.Song.root_note_has_listener()\nroot_note_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;root_note&quot;. C++ signature :  bool root_note_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="scale_intervals_has_listener()" _note="full path:Live.Song.Song.scale_intervals_has_listener()\nscale_intervals_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;scale_intervals&quot;. C++ signature :  bool scale_intervals_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="scale_name_has_listener()" _note="full path:Live.Song.Song.scale_name_has_listener()\nscale_name_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;scale_name&quot;. C++ signature :  bool scale_name_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="scenes_has_listener()" _note="full path:Live.Song.Song.scenes_has_listener()\nscenes_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;scenes&quot;. C++ signature :  bool scenes_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="session_automation_record_has_listener()" _note="full path:Live.Song.Song.session_automation_record_has_listener()\nsession_automation_record_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;session_automation_record&quot;. C++ signature :  bool session_automation_record_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="session_record_has_listener()" _note="full path:Live.Song.Song.session_record_has_listener()\nsession_record_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;session_record&quot;. C++ signature :  bool session_record_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="session_record_status_has_listener()" _note="full path:Live.Song.Song.session_record_status_has_listener()\nsession_record_status_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;session_record_status&quot;. C++ signature :  bool session_record_status_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="signature_denominator_has_listener()" _note="full path:Live.Song.Song.signature_denominator_has_listener()\nsignature_denominator_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;signature_denominator&quot;. C++ signature :  bool signature_denominator_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="signature_numerator_has_listener()" _note="full path:Live.Song.Song.signature_numerator_has_listener()\nsignature_numerator_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;signature_numerator&quot;. C++ signature :  bool signature_numerator_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="song_length_has_listener()" _note="full path:Live.Song.Song.song_length_has_listener()\nsong_length_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;song_length&quot;. C++ signature :  bool song_length_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="swing_amount_has_listener()" _note="full path:Live.Song.Song.swing_amount_has_listener()\nswing_amount_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;swing_amount&quot;. C++ signature :  bool swing_amount_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="tempo_has_listener()" _note="full path:Live.Song.Song.tempo_has_listener()\ntempo_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;tempo&quot;. C++ signature :  bool tempo_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="tracks_has_listener()" _note="full path:Live.Song.Song.tracks_has_listener()\ntracks_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;tracks&quot;. C++ signature :  bool tracks_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="visible_tracks_has_listener()" _note="full path:Live.Song.Song.visible_tracks_has_listener()\nvisible_tracks_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;visible_tracks&quot;. C++ signature :  bool visible_tracks_has_listener(TPyHandle<ASong>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
            </outline>
            <outline text="Methods">
                <outline text="begin_undo_step()" _note="full path:Live.Song.Song.begin_undo_step()\nbegin_undo_step( (Song)arg1) -> None : C++ signature :  void begin_undo_step(TPyHandle<ASong>)" type="label" _label="Method">
                </outline>
                <outline text="capture_and_insert_scene()" _note="full path:Live.Song.Song.capture_and_insert_scene()\ncapture_and_insert_scene( (Song)arg1 [, (int)CaptureMode=Song.CaptureMode.all]) -> None : Capture currently playing clips and insert them as a new scene after the selected scene. Raises a runtime error if creating a new scene would exceed the limitations. C++ signature :  void capture_and_insert_scene(TPyHandle<ASong> [,int=Song.CaptureMode.all])" type="label" _label="Method">
                </outline>
                <outline text="capture_midi()" _note="full path:Live.Song.Song.capture_midi()\ncapture_midi( (Song)arg1 [, (int)Destination=Song.CaptureDestination.auto]) -> None : Capture recently played MIDI material from audible tracks. If no Destination is given or Destination is set to CaptureDestination.auto, the captured material is inserted into the Session or Arrangement depending on which is visible. If Destination is set to CaptureDestination.session or CaptureDestination.arrangement, inserts the material into Session or Arrangement, respectively. Raises a limitation error when capturing into the Session and a new scene would have to be created but can't because it would exceed the limitations. C++ signature :  void capture_midi(TPyHandle<ASong> [,int=Song.CaptureDestination.auto])" type="label" _label="Method">
                </outline>
                <outline text="continue_playing()" _note="full path:Live.Song.Song.continue_playing()\ncontinue_playing( (Song)arg1) -> None : Continue playing the song from the current position C++ signature :  void continue_playing(TPyHandle<ASong>)" type="label" _label="Method">
                </outline>
                <outline text="create_audio_track()" _note="full path:Live.Song.Song.create_audio_track()\ncreate_audio_track( (Song)arg1 [, (object)Index=None]) -> Track : Create a new audio track at the optional given index and return it.If the index is -1, the new track is added at the end. It will create a default audio track if possible. If the index is invalid or the new track would exceed the limitations, a limitation error is raised.If the index is missing, the track is created after the last selected item C++ signature :  TWeakPtr<TTrackPyHandle> create_audio_track(TPyHandle<ASong> [,boost::python::api::object=None])" type="label" _label="Method">
                </outline>
                <outline text="create_midi_track()" _note="full path:Live.Song.Song.create_midi_track()\ncreate_midi_track( (Song)arg1 [, (object)Index=None]) -> Track : Create a new midi track at the optional given index and return it.If the index is -1,  the new track is added at the end.It will create a default midi track if possible. If the index is invalid or the new track would exceed the limitations, a limitation error is raised.If the index is missing, the track is created after the last selected item C++ signature :  TWeakPtr<TTrackPyHandle> create_midi_track(TPyHandle<ASong> [,boost::python::api::object=None])" type="label" _label="Method">
                </outline>
                <outline text="create_return_track()" _note="full path:Live.Song.Song.create_return_track()\ncreate_return_track( (Song)arg1) -> Track : Create a new return track at the end and return it. If the new track would exceed  the limitations, a limitation error is raised.  If the maximum number of return tracks is exceeded, a RuntimeError is raised. C++ signature :  TWeakPtr<TTrackPyHandle> create_return_track(TPyHandle<ASong>)" type="label" _label="Method">
                </outline>
                <outline text="create_scene()" _note="full path:Live.Song.Song.create_scene()\ncreate_scene( (Song)arg1, (int)arg2) -> Scene : Create a new scene at the given index. If the index is -1, the new scene is added at the end. If the index is invalid or the new scene would exceed the limitations, a limitation error is raised. C++ signature :  TWeakPtr<TPyHandle<AScene> > create_scene(TPyHandle<ASong>,int)" type="label" _label="Method">
                </outline>
                <outline text="delete_return_track()" _note="full path:Live.Song.Song.delete_return_track()\ndelete_return_track( (Song)arg1, (int)arg2) -> None : Delete the return track with the given index. If no track with this index exists, an exception will be raised. C++ signature :  void delete_return_track(TPyHandle<ASong>,int)" type="label" _label="Method">
                </outline>
                <outline text="delete_scene()" _note="full path:Live.Song.Song.delete_scene()\ndelete_scene( (Song)arg1, (int)arg2) -> None : Delete the scene with the given index. If no scene with this index exists, an exception will be raised. C++ signature :  void delete_scene(TPyHandle<ASong>,int)" type="label" _label="Method">
                </outline>
                <outline text="delete_track()" _note="full path:Live.Song.Song.delete_track()\ndelete_track( (Song)arg1, (int)arg2) -> None : Delete the track with the given index. If no track with this index exists, an exception will be raised. C++ signature :  void delete_track(TPyHandle<ASong>,int)" type="label" _label="Method">
                </outline>
                <outline text="duplicate_scene()" _note="full path:Live.Song.Song.duplicate_scene()\nduplicate_scene( (Song)arg1, (int)arg2) -> None : Duplicates a scene and selects the new one. Raises a limitation error if creating a new scene would exceed the limitations. C++ signature :  void duplicate_scene(TPyHandle<ASong>,int)" type="label" _label="Method">
                </outline>
                <outline text="duplicate_track()" _note="full path:Live.Song.Song.duplicate_track()\nduplicate_track( (Song)arg1, (int)arg2) -> None : Duplicates a track and selects the new one. If the track is inside a folded group track, the group track is unfolded. Raises a limitation error if creating a new track would exceed the limitations. C++ signature :  void duplicate_track(TPyHandle<ASong>,int)" type="label" _label="Method">
                </outline>
                <outline text="end_undo_step()" _note="full path:Live.Song.Song.end_undo_step()\nend_undo_step( (Song)arg1) -> None : C++ signature :  void end_undo_step(TPyHandle<ASong>)" type="label" _label="Method">
                </outline>
                <outline text="find_device_position()" _note="full path:Live.Song.Song.find_device_position()\nfind_device_position( (Song)arg1, (Device)device, (LomObject)target, (int)target_position) -> int : Returns the closest possible position to the given target, where the device can be inserted. If inserting is not possible at all (i.e. if the device type is wrong), -1 is returned. C++ signature :  int find_device_position(TPyHandle<ASong>,TPyHandle<ADevice>,TPyHandleBase,int)" type="label" _label="Method">
                </outline>
                <outline text="force_link_beat_time()" _note="full path:Live.Song.Song.force_link_beat_time()\nforce_link_beat_time( (Song)arg1) -> None : Force the Link timeline to jump to Lives current beat time. Danger: This can cause beat time discontinuities in other connected apps. C++ signature :  void force_link_beat_time(TPyHandle<ASong>)" type="label" _label="Method">
                </outline>
                <outline text="get_beats_loop_length()" _note="full path:Live.Song.Song.get_beats_loop_length()\nget_beats_loop_length( (Song)arg1) -> BeatTime : Get const access to the songs loop length, using a BeatTime class with the current global set signature. C++ signature :  NSongApi::TBeatTime get_beats_loop_length(TPyHandle<ASong>)" type="label" _label="Method">
                </outline>
                <outline text="get_beats_loop_start()" _note="full path:Live.Song.Song.get_beats_loop_start()\nget_beats_loop_start( (Song)arg1) -> BeatTime : Get const access to the songs loop start, using a BeatTime class with the current global set signature. C++ signature :  NSongApi::TBeatTime get_beats_loop_start(TPyHandle<ASong>)" type="label" _label="Method">
                </outline>
                <outline text="get_current_beats_song_time()" _note="full path:Live.Song.Song.get_current_beats_song_time()\nget_current_beats_song_time( (Song)arg1) -> BeatTime : Get const access to the songs current playing position, using a BeatTime class with the current global set signature. C++ signature :  NSongApi::TBeatTime get_current_beats_song_time(TPyHandle<ASong>)" type="label" _label="Method">
                </outline>
                <outline text="get_current_smpte_song_time()" _note="full path:Live.Song.Song.get_current_smpte_song_time()\nget_current_smpte_song_time( (Song)arg1, (int)arg2) -> SmptTime : Get const access to the songs current playing position, by specifying the SMPTE format in which you would like to receive the time. C++ signature :  NSongApi::TSmptTime get_current_smpte_song_time(TPyHandle<ASong>,int)" type="label" _label="Method">
                </outline>
                <outline text="get_data()" _note="full path:Live.Song.Song.get_data()\nget_data( (Song)arg1, (object)key, (object)default_value) -> object : Get data for the given key, that was previously stored using set_data. C++ signature :  boost::python::api::object get_data(TPyHandle<ASong>,TString,boost::python::api::object)" type="label" _label="Method">
                </outline>
                <outline text="is_cue_point_selected()" _note="full path:Live.Song.Song.is_cue_point_selected()\nis_cue_point_selected( (Song)arg1) -> bool : Return true if the global playing pos is currently on a cue point. C++ signature :  bool is_cue_point_selected(TPyHandle<ASong>)" type="label" _label="Method">
                </outline>
                <outline text="jump_by()" _note="full path:Live.Song.Song.jump_by()\njump_by( (Song)arg1, (float)arg2) -> None : Set a new playing pos, relative to the current one. C++ signature :  void jump_by(TPyHandle<ASong>,double)" type="label" _label="Method">
                </outline>
                <outline text="jump_to_next_cue()" _note="full path:Live.Song.Song.jump_to_next_cue()\njump_to_next_cue( (Song)arg1) -> None : Jump to the next cue (marker) if possible. C++ signature :  void jump_to_next_cue(TPyHandle<ASong>)" type="label" _label="Method">
                </outline>
                <outline text="jump_to_prev_cue()" _note="full path:Live.Song.Song.jump_to_prev_cue()\njump_to_prev_cue( (Song)arg1) -> None : Jump to the prior cue (marker) if possible. C++ signature :  void jump_to_prev_cue(TPyHandle<ASong>)" type="label" _label="Method">
                </outline>
                <outline text="move_device()" _note="full path:Live.Song.Song.move_device()\nmove_device( (Song)arg1, (Device)device, (LomObject)target, (int)target_position) -> int : Move a device into the target at the given position, where 0 moves it before the first device and len(devices) moves it to the end of the device chain.If the device cannot be moved to this position, the nearest possible position is chosen. If the device type is not valid, a runtime error is raised.Returns the index, where the device was moved to. C++ signature :  int move_device(TPyHandle<ASong>,TPyHandle<ADevice>,TPyHandleBase,int)" type="label" _label="Method">
                </outline>
                <outline text="play_selection()" _note="full path:Live.Song.Song.play_selection()\nplay_selection( (Song)arg1) -> None : Start playing the current set selection, or do nothing if no selection is set. C++ signature :  void play_selection(TPyHandle<ASong>)" type="label" _label="Method">
                </outline>
                <outline text="re_enable_automation()" _note="full path:Live.Song.Song.re_enable_automation()\nre_enable_automation( (Song)arg1) -> None : Discards overrides of automated parameters. C++ signature :  void re_enable_automation(TPyHandle<ASong>)" type="label" _label="Method">
                </outline>
                <outline text="redo()" _note="full path:Live.Song.Song.redo()\nredo( (Song)arg1) -> None : Redo the last action that was undone. C++ signature :  void redo(TPyHandle<ASong>)" type="label" _label="Method">
                </outline>
                <outline text="scrub_by()" _note="full path:Live.Song.Song.scrub_by()\nscrub_by( (Song)arg1, (float)arg2) -> None : Same as jump_by, but does not stop playback. C++ signature :  void scrub_by(TPyHandle<ASong>,double)" type="label" _label="Method">
                </outline>
                <outline text="set_data()" _note="full path:Live.Song.Song.set_data()\nset_data( (Song)arg1, (object)key, (object)value) -> None : Store data for the given key in this object. The data is persistent and will be restored when loading the Live Set. C++ signature :  void set_data(TPyHandle<ASong>,TString,boost::python::api::object)" type="label" _label="Method">
                </outline>
                <outline text="set_or_delete_cue()" _note="full path:Live.Song.Song.set_or_delete_cue()\nset_or_delete_cue( (Song)arg1) -> None : When a cue is selected, it gets deleted. If no cue is selected, a new cue is created at the current global songtime. C++ signature :  void set_or_delete_cue(TPyHandle<ASong>)" type="label" _label="Method">
                </outline>
                <outline text="start_playing()" _note="full path:Live.Song.Song.start_playing()\nstart_playing( (Song)arg1) -> None : Start playing from the startmarker C++ signature :  void start_playing(TPyHandle<ASong>)" type="label" _label="Method">
                </outline>
                <outline text="stop_all_clips()" _note="full path:Live.Song.Song.stop_all_clips()\nstop_all_clips( (Song)arg1 [, (bool)Quantized=True]) -> None : Stop all playing Clips (if any) but continue playing the Song. C++ signature :  void stop_all_clips(TPyHandle<ASong> [,bool=True])" type="label" _label="Method">
                </outline>
                <outline text="stop_playing()" _note="full path:Live.Song.Song.stop_playing()\nstop_playing( (Song)arg1) -> None : Stop playing the Song. C++ signature :  void stop_playing(TPyHandle<ASong>)" type="label" _label="Method">
                </outline>
                <outline text="tap_tempo()" _note="full path:Live.Song.Song.tap_tempo()\ntap_tempo( (Song)arg1) -> None : Trigger the tap tempo function. C++ signature :  void tap_tempo(TPyHandle<ASong>)" type="label" _label="Method">
                </outline>
                <outline text="trigger_session_record()" _note="full path:Live.Song.Song.trigger_session_record()\ntrigger_session_record( (Song)self [, (float)record_length=1.7976931348623157e+308]) -> None : Triggers a new session recording. C++ signature :  void trigger_session_record(TPyHandle<ASong> [,double=1.7976931348623157e+308])" type="label" _label="Method">
                </outline>
                <outline text="undo()" _note="full path:Live.Song.Song.undo()\nundo( (Song)arg1) -> None : Undo the last action that was made. C++ signature :  void undo(TPyHandle<ASong>)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
        <outline text="TimeFormat" _note="full path:Live.Song.TimeFormat\n" type="label" _label="Class">
            <outline text="Values">
                <outline text="ms_time" _note="full path:Live.Song.TimeFormat.ms_time\n" type="label" _label="Value">
                </outline>
                <outline text="smpte_24" _note="full path:Live.Song.TimeFormat.smpte_24\n" type="label" _label="Value">
                </outline>
                <outline text="smpte_25" _note="full path:Live.Song.TimeFormat.smpte_25\n" type="label" _label="Value">
                </outline>
                <outline text="smpte_29" _note="full path:Live.Song.TimeFormat.smpte_29\n" type="label" _label="Value">
                </outline>
                <outline text="smpte_30" _note="full path:Live.Song.TimeFormat.smpte_30\n" type="label" _label="Value">
                </outline>
                <outline text="smpte_30_drop" _note="full path:Live.Song.TimeFormat.smpte_30_drop\n" type="label" _label="Value">
                </outline>
            </outline>
        </outline>
    </outline>
    <outline text="Track" _note="full path:Live.Track\n" type="label" _label="Module">
        <outline text="DeviceContainer" _note="full path:Live.Track.DeviceContainer\nThis class is a common super class of Track and Chain" type="label" _label="Class">
            <outline text="Properties">
                <outline text="_live_ptr" _note="full path:Live.Track.DeviceContainer._live_ptr\n" type="label" _label="Property">
                </outline>
            </outline>
        </outline>
        <outline text="DeviceInsertMode" _note="full path:Live.Track.DeviceInsertMode\n" type="label" _label="Class">
            <outline text="Values">
                <outline text="count" _note="full path:Live.Track.DeviceInsertMode.count\n" type="label" _label="Value">
                </outline>
                <outline text="default" _note="full path:Live.Track.DeviceInsertMode.default\n" type="label" _label="Value">
                </outline>
                <outline text="selected_left" _note="full path:Live.Track.DeviceInsertMode.selected_left\n" type="label" _label="Value">
                </outline>
                <outline text="selected_right" _note="full path:Live.Track.DeviceInsertMode.selected_right\n" type="label" _label="Value">
                </outline>
            </outline>
        </outline>
        <outline text="RoutingChannel" _note="full path:Live.Track.RoutingChannel\nThis class represents a routing channel." type="label" _label="Class">
            <outline text="Properties">
                <outline text="display_name" _note="full path:Live.Track.RoutingChannel.display_name\nDisplay name of routing channel." type="label" _label="Property">
                </outline>
                <outline text="layout" _note="full path:Live.Track.RoutingChannel.layout\nThe routing channel's Layout, e.g., mono or stereo." type="label" _label="Property">
                </outline>
            </outline>
        </outline>
        <outline text="RoutingChannelLayout" _note="full path:Live.Track.RoutingChannelLayout\n" type="label" _label="Class">
            <outline text="Values">
                <outline text="midi" _note="full path:Live.Track.RoutingChannelLayout.midi\n" type="label" _label="Value">
                </outline>
                <outline text="mono" _note="full path:Live.Track.RoutingChannelLayout.mono\n" type="label" _label="Value">
                </outline>
                <outline text="stereo" _note="full path:Live.Track.RoutingChannelLayout.stereo\n" type="label" _label="Value">
                </outline>
            </outline>
        </outline>
        <outline text="RoutingChannelVector" _note="full path:Live.Track.RoutingChannelVector\nA container for returning routing channels from Live." type="label" _label="Class">
            <outline text="Methods">
                <outline text="append()" _note="full path:Live.Track.RoutingChannelVector.append()\nappend( (RoutingChannelVector)arg1, (object)arg2) -> None : C++ signature :  void append(std::__1::vector<NRoutingApi::TRoutingChannel, std::__1::allocator<NRoutingApi::TRoutingChannel> > {lvalue},boost::python::api::object)" type="label" _label="Method">
                </outline>
                <outline text="extend()" _note="full path:Live.Track.RoutingChannelVector.extend()\nextend( (RoutingChannelVector)arg1, (object)arg2) -> None : C++ signature :  void extend(std::__1::vector<NRoutingApi::TRoutingChannel, std::__1::allocator<NRoutingApi::TRoutingChannel> > {lvalue},boost::python::api::object)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
        <outline text="RoutingType" _note="full path:Live.Track.RoutingType\nThis class represents a routing type." type="label" _label="Class">
            <outline text="Properties">
                <outline text="attached_object" _note="full path:Live.Track.RoutingType.attached_object\nLive object associated with the routing type." type="label" _label="Property">
                </outline>
                <outline text="category" _note="full path:Live.Track.RoutingType.category\nCategory of the routing type." type="label" _label="Property">
                </outline>
                <outline text="display_name" _note="full path:Live.Track.RoutingType.display_name\nDisplay name of routing type." type="label" _label="Property">
                </outline>
            </outline>
        </outline>
        <outline text="RoutingTypeCategory" _note="full path:Live.Track.RoutingTypeCategory\n" type="label" _label="Class">
            <outline text="Values">
                <outline text="external" _note="full path:Live.Track.RoutingTypeCategory.external\n" type="label" _label="Value">
                </outline>
                <outline text="invalid" _note="full path:Live.Track.RoutingTypeCategory.invalid\n" type="label" _label="Value">
                </outline>
                <outline text="master" _note="full path:Live.Track.RoutingTypeCategory.master\n" type="label" _label="Value">
                </outline>
                <outline text="none" _note="full path:Live.Track.RoutingTypeCategory.none\n" type="label" _label="Value">
                </outline>
                <outline text="parent_group_track" _note="full path:Live.Track.RoutingTypeCategory.parent_group_track\n" type="label" _label="Value">
                </outline>
                <outline text="resampling" _note="full path:Live.Track.RoutingTypeCategory.resampling\n" type="label" _label="Value">
                </outline>
                <outline text="rewire" _note="full path:Live.Track.RoutingTypeCategory.rewire\n" type="label" _label="Value">
                </outline>
                <outline text="track" _note="full path:Live.Track.RoutingTypeCategory.track\n" type="label" _label="Value">
                </outline>
            </outline>
        </outline>
        <outline text="RoutingTypeVector" _note="full path:Live.Track.RoutingTypeVector\nA container for returning routing types from Live." type="label" _label="Class">
            <outline text="Methods">
                <outline text="append()" _note="full path:Live.Track.RoutingTypeVector.append()\nappend( (RoutingTypeVector)arg1, (object)arg2) -> None : C++ signature :  void append(std::__1::vector<NRoutingApi::TRoutingType, std::__1::allocator<NRoutingApi::TRoutingType> > {lvalue},boost::python::api::object)" type="label" _label="Method">
                </outline>
                <outline text="extend()" _note="full path:Live.Track.RoutingTypeVector.extend()\nextend( (RoutingTypeVector)arg1, (object)arg2) -> None : C++ signature :  void extend(std::__1::vector<NRoutingApi::TRoutingType, std::__1::allocator<NRoutingApi::TRoutingType> > {lvalue},boost::python::api::object)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
        <outline text="Track" _note="full path:Live.Track.Track\nThis class represents a track in Live. It can be either an Audio track, a MIDI Track, a Return Track or the Master track. The Master Track and at least one Audio or MIDI track will be always present.Return Tracks are optional." type="label" _label="Class">
            <outline text="monitoring_states" _note="full path:Live.Track.Track.monitoring_states\n" type="label" _label="Sub-Class">
                <outline text="Values">
                    <outline text="AUTO" _note="full path:Live.Track.Track.monitoring_states.AUTO\n" type="label" _label="Value">
                    </outline>
                    <outline text="IN" _note="full path:Live.Track.Track.monitoring_states.IN\n" type="label" _label="Value">
                    </outline>
                    <outline text="OFF" _note="full path:Live.Track.Track.monitoring_states.OFF\n" type="label" _label="Value">
                    </outline>
                </outline>
            </outline>
            <outline text="View" _note="full path:Live.Track.Track.View\nRepresenting the view aspects of a Track." type="label" _label="Class">
                <outline text="Properties">
                    <outline text="_live_ptr" _note="full path:Live.Track.Track.View._live_ptr\n" type="label" _label="Property">
                    </outline>
                    <outline text="canonical_parent" _note="full path:Live.Track.Track.View.canonical_parent\nGet the canonical parent of the track view." type="label" _label="Property">
                    </outline>
                    <outline text="device_insert_mode" _note="full path:Live.Track.Track.View.device_insert_mode\nGet/Listen the device insertion mode of the track.  By default, it will insert devices at the end, but it can be changed to make it relative to current selection." type="label" _label="Property">
                    </outline>
                    <outline text="is_collapsed" _note="full path:Live.Track.Track.View.is_collapsed\nGet/Set/Listen if the track is shown collapsed in the arranger view." type="label" _label="Property">
                    </outline>
                    <outline text="selected_device" _note="full path:Live.Track.Track.View.selected_device\nGet/Set/Listen the insertion mode of the device.  While in insertion mode, loading new devices from the browser will place devices at the selected position." type="label" _label="Property">
                    </outline>
                </outline>
                <outline text="Listeners">
                    <outline text="add_device_insert_mode_listener()" _note="full path:Live.Track.Track.View.add_device_insert_mode_listener()\nadd_device_insert_mode_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;device_insert_mode&quot; has changed. C++ signature :  void add_device_insert_mode_listener(TPyViewData<ATrack>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="add_is_collapsed_listener()" _note="full path:Live.Track.Track.View.add_is_collapsed_listener()\nadd_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_collapsed&quot; has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData<ATrack>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="add_selected_device_listener()" _note="full path:Live.Track.Track.View.add_selected_device_listener()\nadd_selected_device_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;selected_device&quot; has changed. C++ signature :  void add_selected_device_listener(TPyViewData<ATrack>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="device_insert_mode_has_listener()" _note="full path:Live.Track.Track.View.device_insert_mode_has_listener()\ndevice_insert_mode_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;device_insert_mode&quot;. C++ signature :  bool device_insert_mode_has_listener(TPyViewData<ATrack>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="is_collapsed_has_listener()" _note="full path:Live.Track.Track.View.is_collapsed_has_listener()\nis_collapsed_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_collapsed&quot;. C++ signature :  bool is_collapsed_has_listener(TPyViewData<ATrack>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_device_insert_mode_listener()" _note="full path:Live.Track.Track.View.remove_device_insert_mode_listener()\nremove_device_insert_mode_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;device_insert_mode&quot;. C++ signature :  void remove_device_insert_mode_listener(TPyViewData<ATrack>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_is_collapsed_listener()" _note="full path:Live.Track.Track.View.remove_is_collapsed_listener()\nremove_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_collapsed&quot;. C++ signature :  void remove_is_collapsed_listener(TPyViewData<ATrack>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_selected_device_listener()" _note="full path:Live.Track.Track.View.remove_selected_device_listener()\nremove_selected_device_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;selected_device&quot;. C++ signature :  void remove_selected_device_listener(TPyViewData<ATrack>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="selected_device_has_listener()" _note="full path:Live.Track.Track.View.selected_device_has_listener()\nselected_device_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;selected_device&quot;. C++ signature :  bool selected_device_has_listener(TPyViewData<ATrack>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                </outline>
                <outline text="Methods">
                    <outline text="select_instrument()" _note="full path:Live.Track.Track.View.select_instrument()\nselect_instrument( (View)arg1) -> bool : Selects the track's instrument if it has one. C++ signature :  bool select_instrument(TPyViewData<ATrack>)" type="label" _label="Method">
                    </outline>
                </outline>
            </outline>
            <outline text="Properties">
                <outline text="_live_ptr" _note="full path:Live.Track.Track._live_ptr\n" type="label" _label="Property">
                </outline>
                <outline text="arm" _note="full path:Live.Track.Track.arm\nArm the track for recording. Not available for Master- and Send Tracks." type="label" _label="Property">
                </outline>
                <outline text="arrangement_clips" _note="full path:Live.Track.Track.arrangement_clips\nconst access to the list of clips in arrangement viewThe list will be empty for the master, send and group tracks." type="label" _label="Property">
                </outline>
                <outline text="available_input_routing_channels" _note="full path:Live.Track.Track.available_input_routing_channels\nReturn a list of source channels for input routing." type="label" _label="Property">
                </outline>
                <outline text="available_input_routing_types" _note="full path:Live.Track.Track.available_input_routing_types\nReturn a list of source types for input routing." type="label" _label="Property">
                </outline>
                <outline text="available_output_routing_channels" _note="full path:Live.Track.Track.available_output_routing_channels\nReturn a list of destination channels for output routing." type="label" _label="Property">
                </outline>
                <outline text="available_output_routing_types" _note="full path:Live.Track.Track.available_output_routing_types\nReturn a list of destination types for output routing." type="label" _label="Property">
                </outline>
                <outline text="can_be_armed" _note="full path:Live.Track.Track.can_be_armed\nreturn True, if this Track has a valid arm property. Not all trackscan be armed (for example return Tracks or the Master Tracks)." type="label" _label="Property">
                </outline>
                <outline text="can_be_frozen" _note="full path:Live.Track.Track.can_be_frozen\nreturn True, if this Track can be frozen." type="label" _label="Property">
                </outline>
                <outline text="can_show_chains" _note="full path:Live.Track.Track.can_show_chains\nreturn True, if this Track contains a rack instrument device that is capable of showing its chains in session view." type="label" _label="Property">
                </outline>
                <outline text="canonical_parent" _note="full path:Live.Track.Track.canonical_parent\nGet the canonical parent of the track." type="label" _label="Property">
                </outline>
                <outline text="clip_slots" _note="full path:Live.Track.Track.clip_slots\nconst access to the list of clipslots (see class AClipSlot) for this track.The list will be empty for the master and sendtracks." type="label" _label="Property">
                </outline>
                <outline text="color" _note="full path:Live.Track.Track.color\nGet/set access to the color of the Track (RGB)." type="label" _label="Property">
                </outline>
                <outline text="color_index" _note="full path:Live.Track.Track.color_index\nGet/Set access to the color index of the track. Can be None for no color." type="label" _label="Property">
                </outline>
                <outline text="current_input_routing" _note="full path:Live.Track.Track.current_input_routing\nGet/Set the name of the current active input routing.When setting a new routing, the new routing must be one of the available ones." type="label" _label="Property">
                </outline>
                <outline text="current_input_sub_routing" _note="full path:Live.Track.Track.current_input_sub_routing\nGet/Set the current active input sub routing.When setting a new routing, the new routing must be one of the available ones." type="label" _label="Property">
                </outline>
                <outline text="current_monitoring_state" _note="full path:Live.Track.Track.current_monitoring_state\nGet/Set the track's current monitoring state." type="label" _label="Property">
                </outline>
                <outline text="current_output_routing" _note="full path:Live.Track.Track.current_output_routing\nGet/Set the current active output routing.When setting a new routing, the new routing must be one of the available ones." type="label" _label="Property">
                </outline>
                <outline text="current_output_sub_routing" _note="full path:Live.Track.Track.current_output_sub_routing\nGet/Set the current active output sub routing.When setting a new routing, the new routing must be one of the available ones." type="label" _label="Property">
                </outline>
                <outline text="devices" _note="full path:Live.Track.Track.devices\nReturn const access to all available Devices that are present in the TracksDevicechain. This tuple will also include the 'mixer_device' that every Trackalways has." type="label" _label="Property">
                </outline>
                <outline text="fired_slot_index" _note="full path:Live.Track.Track.fired_slot_index\nconst access to the index of the fired (and thus blinking) clipslot in this track.This index is -1 if no slot is fired and -2 if the track's stop button has been fired." type="label" _label="Property">
                </outline>
                <outline text="fold_state" _note="full path:Live.Track.Track.fold_state\nGet/Set whether the track is folded or not. Only available if is_foldable is True." type="label" _label="Property">
                </outline>
                <outline text="group_track" _note="full path:Live.Track.Track.group_track\nreturn the group track if is_grouped." type="label" _label="Property">
                </outline>
                <outline text="has_audio_input" _note="full path:Live.Track.Track.has_audio_input\nreturn True, if this Track can be feed with an Audio signal. This istrue for all Audio Tracks." type="label" _label="Property">
                </outline>
                <outline text="has_audio_output" _note="full path:Live.Track.Track.has_audio_output\nreturn True, if this Track sends out an Audio signal. This istrue for all Audio Tracks, and MIDI tracks with an Instrument." type="label" _label="Property">
                </outline>
                <outline text="has_midi_input" _note="full path:Live.Track.Track.has_midi_input\nreturn True, if this Track can be feed with an Audio signal. This istrue for all MIDI Tracks." type="label" _label="Property">
                </outline>
                <outline text="has_midi_output" _note="full path:Live.Track.Track.has_midi_output\nreturn True, if this Track sends out MIDI events. This istrue for all MIDI Tracks with no Instruments." type="label" _label="Property">
                </outline>
                <outline text="implicit_arm" _note="full path:Live.Track.Track.implicit_arm\nArm the track for recording. When The track is implicitly armed, it showsin a weaker color in the live GUI and is not saved in the set." type="label" _label="Property">
                </outline>
                <outline text="input_meter_left" _note="full path:Live.Track.Track.input_meter_left\nMomentary value of left input channel meter, 0.0 to 1.0. For Audio Tracks only." type="label" _label="Property">
                </outline>
                <outline text="input_meter_level" _note="full path:Live.Track.Track.input_meter_level\nReturn the MIDI or Audio meter value of the Tracks input, depending on thetype of the Track input. Meter values (MIDI or Audio) are always scaledfrom 0.0 to 1.0." type="label" _label="Property">
                </outline>
                <outline text="input_meter_right" _note="full path:Live.Track.Track.input_meter_right\nMomentary value of right input channel meter, 0.0 to 1.0. For Audio Tracks only." type="label" _label="Property">
                </outline>
                <outline text="input_routing_channel" _note="full path:Live.Track.Track.input_routing_channel\nGet and set the current source channel for input routing.Raises ValueError if the type isn't one of the current values inavailable_input_routing_channels." type="label" _label="Property">
                </outline>
                <outline text="input_routing_type" _note="full path:Live.Track.Track.input_routing_type\nGet and set the current source type for input routing.Raises ValueError if the type isn't one of the current values inavailable_input_routing_types." type="label" _label="Property">
                </outline>
                <outline text="input_routings" _note="full path:Live.Track.Track.input_routings\nConst access to the list of available input routings." type="label" _label="Property">
                </outline>
                <outline text="input_sub_routings" _note="full path:Live.Track.Track.input_sub_routings\nReturn a list of all available input sub routings." type="label" _label="Property">
                </outline>
                <outline text="is_foldable" _note="full path:Live.Track.Track.is_foldable\nreturn True if the track can be (un)folded to hide/reveal contained tracks." type="label" _label="Property">
                </outline>
                <outline text="is_frozen" _note="full path:Live.Track.Track.is_frozen\nreturn True if this Track is currently frozen. No changes should be applied to the track's devices or clips while it is frozen." type="label" _label="Property">
                </outline>
                <outline text="is_grouped" _note="full path:Live.Track.Track.is_grouped\nreturn True if this Track is current part of a group track." type="label" _label="Property">
                </outline>
                <outline text="is_part_of_selection" _note="full path:Live.Track.Track.is_part_of_selection\nreturn False if the track is not selected." type="label" _label="Property">
                </outline>
                <outline text="is_showing_chains" _note="full path:Live.Track.Track.is_showing_chains\nGet/Set whether a track with a rack device is showing its chains in session view." type="label" _label="Property">
                </outline>
                <outline text="is_visible" _note="full path:Live.Track.Track.is_visible\nreturn False if the track is hidden within a folded group track." type="label" _label="Property">
                </outline>
                <outline text="mixer_device" _note="full path:Live.Track.Track.mixer_device\nReturn access to the special Device that every Track has: This Device containsthe Volume, Pan, Sendamounts, and Crossfade assignment parameters." type="label" _label="Property">
                </outline>
                <outline text="mute" _note="full path:Live.Track.Track.mute\nMute/unmute the track." type="label" _label="Property">
                </outline>
                <outline text="muted_via_solo" _note="full path:Live.Track.Track.muted_via_solo\nReturns true if the track is muted because another track is soloed." type="label" _label="Property">
                </outline>
                <outline text="name" _note="full path:Live.Track.Track.name\nRead/write access to the name of the Track, as visible in the track header." type="label" _label="Property">
                </outline>
                <outline text="output_meter_left" _note="full path:Live.Track.Track.output_meter_left\nMomentary value of left output channel meter, 0.0 to 1.0.For tracks with audio output only." type="label" _label="Property">
                </outline>
                <outline text="output_meter_level" _note="full path:Live.Track.Track.output_meter_level\nReturn the MIDI or Audio meter value of the Track output (behind themixer_device), depending on the type of the Track input, this can be a MIDIor Audio meter. Meter values (MIDI or Audio) are always scaled from 0.0 to 1.0." type="label" _label="Property">
                </outline>
                <outline text="output_meter_right" _note="full path:Live.Track.Track.output_meter_right\nMomentary value of right output channel meter, 0.0 to 1.0.For tracks with audio output only." type="label" _label="Property">
                </outline>
                <outline text="output_routing_channel" _note="full path:Live.Track.Track.output_routing_channel\nGet and set the current destination channel for output routing.Raises ValueError if the channel isn't one of the current values inavailable_output_routing_channels." type="label" _label="Property">
                </outline>
                <outline text="output_routing_type" _note="full path:Live.Track.Track.output_routing_type\nGet and set the current destination type for output routing.Raises ValueError if the type isn't one of the current values inavailable_output_routing_types." type="label" _label="Property">
                </outline>
                <outline text="output_routings" _note="full path:Live.Track.Track.output_routings\nConst access to the list of all available output routings." type="label" _label="Property">
                </outline>
                <outline text="output_sub_routings" _note="full path:Live.Track.Track.output_sub_routings\nReturn a list of all available output sub routings." type="label" _label="Property">
                </outline>
                <outline text="playing_slot_index" _note="full path:Live.Track.Track.playing_slot_index\nconst access to the index of the currently playing clip in the track.Will be -1 when no clip is playing." type="label" _label="Property">
                </outline>
                <outline text="solo" _note="full path:Live.Track.Track.solo\nGet/Set the solo status of the track. Note that this will not disable thesolo state of any other track. If you want exclusive solo, you have to disable the solo state of the other Tracks manually." type="label" _label="Property">
                </outline>
                <outline text="view" _note="full path:Live.Track.Track.view\nRepresenting the view aspects of a Track." type="label" _label="Property">
                </outline>
            </outline>
            <outline text="Listeners">
                <outline text="add_arm_listener()" _note="full path:Live.Track.Track.add_arm_listener()\nadd_arm_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;arm&quot; has changed. C++ signature :  void add_arm_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_arrangement_clips_listener()" _note="full path:Live.Track.Track.add_arrangement_clips_listener()\nadd_arrangement_clips_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;arrangement_clips&quot; has changed. C++ signature :  void add_arrangement_clips_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_available_input_routing_channels_listener()" _note="full path:Live.Track.Track.add_available_input_routing_channels_listener()\nadd_available_input_routing_channels_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;available_input_routing_channels&quot; has changed. C++ signature :  void add_available_input_routing_channels_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_available_input_routing_types_listener()" _note="full path:Live.Track.Track.add_available_input_routing_types_listener()\nadd_available_input_routing_types_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;available_input_routing_types&quot; has changed. C++ signature :  void add_available_input_routing_types_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_available_output_routing_channels_listener()" _note="full path:Live.Track.Track.add_available_output_routing_channels_listener()\nadd_available_output_routing_channels_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;available_output_routing_channels&quot; has changed. C++ signature :  void add_available_output_routing_channels_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_available_output_routing_types_listener()" _note="full path:Live.Track.Track.add_available_output_routing_types_listener()\nadd_available_output_routing_types_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;available_output_routing_types&quot; has changed. C++ signature :  void add_available_output_routing_types_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_clip_slots_listener()" _note="full path:Live.Track.Track.add_clip_slots_listener()\nadd_clip_slots_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;clip_slots&quot; has changed. C++ signature :  void add_clip_slots_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_color_index_listener()" _note="full path:Live.Track.Track.add_color_index_listener()\nadd_color_index_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;color_index&quot; has changed. C++ signature :  void add_color_index_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_color_listener()" _note="full path:Live.Track.Track.add_color_listener()\nadd_color_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;color&quot; has changed. C++ signature :  void add_color_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_current_input_routing_listener()" _note="full path:Live.Track.Track.add_current_input_routing_listener()\nadd_current_input_routing_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;current_input_routing&quot; has changed. C++ signature :  void add_current_input_routing_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_current_input_sub_routing_listener()" _note="full path:Live.Track.Track.add_current_input_sub_routing_listener()\nadd_current_input_sub_routing_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;current_input_sub_routing&quot; has changed. C++ signature :  void add_current_input_sub_routing_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_current_monitoring_state_listener()" _note="full path:Live.Track.Track.add_current_monitoring_state_listener()\nadd_current_monitoring_state_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;current_monitoring_state&quot; has changed. C++ signature :  void add_current_monitoring_state_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_current_output_routing_listener()" _note="full path:Live.Track.Track.add_current_output_routing_listener()\nadd_current_output_routing_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;current_output_routing&quot; has changed. C++ signature :  void add_current_output_routing_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_current_output_sub_routing_listener()" _note="full path:Live.Track.Track.add_current_output_sub_routing_listener()\nadd_current_output_sub_routing_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;current_output_sub_routing&quot; has changed. C++ signature :  void add_current_output_sub_routing_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_data_listener()" _note="full path:Live.Track.Track.add_data_listener()\nadd_data_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;data&quot; has changed. C++ signature :  void add_data_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_devices_listener()" _note="full path:Live.Track.Track.add_devices_listener()\nadd_devices_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;devices&quot; has changed. C++ signature :  void add_devices_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_fired_slot_index_listener()" _note="full path:Live.Track.Track.add_fired_slot_index_listener()\nadd_fired_slot_index_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;fired_slot_index&quot; has changed. C++ signature :  void add_fired_slot_index_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_has_audio_input_listener()" _note="full path:Live.Track.Track.add_has_audio_input_listener()\nadd_has_audio_input_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;has_audio_input&quot; has changed. C++ signature :  void add_has_audio_input_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_has_audio_output_listener()" _note="full path:Live.Track.Track.add_has_audio_output_listener()\nadd_has_audio_output_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;has_audio_output&quot; has changed. C++ signature :  void add_has_audio_output_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_has_midi_input_listener()" _note="full path:Live.Track.Track.add_has_midi_input_listener()\nadd_has_midi_input_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;has_midi_input&quot; has changed. C++ signature :  void add_has_midi_input_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_has_midi_output_listener()" _note="full path:Live.Track.Track.add_has_midi_output_listener()\nadd_has_midi_output_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;has_midi_output&quot; has changed. C++ signature :  void add_has_midi_output_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_implicit_arm_listener()" _note="full path:Live.Track.Track.add_implicit_arm_listener()\nadd_implicit_arm_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;implicit_arm&quot; has changed. C++ signature :  void add_implicit_arm_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_input_meter_left_listener()" _note="full path:Live.Track.Track.add_input_meter_left_listener()\nadd_input_meter_left_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;input_meter_left&quot; has changed. C++ signature :  void add_input_meter_left_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_input_meter_level_listener()" _note="full path:Live.Track.Track.add_input_meter_level_listener()\nadd_input_meter_level_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;input_meter_level&quot; has changed. C++ signature :  void add_input_meter_level_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_input_meter_right_listener()" _note="full path:Live.Track.Track.add_input_meter_right_listener()\nadd_input_meter_right_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;input_meter_right&quot; has changed. C++ signature :  void add_input_meter_right_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_input_routing_channel_listener()" _note="full path:Live.Track.Track.add_input_routing_channel_listener()\nadd_input_routing_channel_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;input_routing_channel&quot; has changed. C++ signature :  void add_input_routing_channel_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_input_routing_type_listener()" _note="full path:Live.Track.Track.add_input_routing_type_listener()\nadd_input_routing_type_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;input_routing_type&quot; has changed. C++ signature :  void add_input_routing_type_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_input_routings_listener()" _note="full path:Live.Track.Track.add_input_routings_listener()\nadd_input_routings_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;input_routings&quot; has changed. C++ signature :  void add_input_routings_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_input_sub_routings_listener()" _note="full path:Live.Track.Track.add_input_sub_routings_listener()\nadd_input_sub_routings_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;input_sub_routings&quot; has changed. C++ signature :  void add_input_sub_routings_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_is_frozen_listener()" _note="full path:Live.Track.Track.add_is_frozen_listener()\nadd_is_frozen_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_frozen&quot; has changed. C++ signature :  void add_is_frozen_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_is_showing_chains_listener()" _note="full path:Live.Track.Track.add_is_showing_chains_listener()\nadd_is_showing_chains_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_showing_chains&quot; has changed. C++ signature :  void add_is_showing_chains_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_mute_listener()" _note="full path:Live.Track.Track.add_mute_listener()\nadd_mute_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;mute&quot; has changed. C++ signature :  void add_mute_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_muted_via_solo_listener()" _note="full path:Live.Track.Track.add_muted_via_solo_listener()\nadd_muted_via_solo_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;muted_via_solo&quot; has changed. C++ signature :  void add_muted_via_solo_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_name_listener()" _note="full path:Live.Track.Track.add_name_listener()\nadd_name_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_output_meter_left_listener()" _note="full path:Live.Track.Track.add_output_meter_left_listener()\nadd_output_meter_left_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;output_meter_left&quot; has changed. C++ signature :  void add_output_meter_left_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_output_meter_level_listener()" _note="full path:Live.Track.Track.add_output_meter_level_listener()\nadd_output_meter_level_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;output_meter_level&quot; has changed. C++ signature :  void add_output_meter_level_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_output_meter_right_listener()" _note="full path:Live.Track.Track.add_output_meter_right_listener()\nadd_output_meter_right_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;output_meter_right&quot; has changed. C++ signature :  void add_output_meter_right_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_output_routing_channel_listener()" _note="full path:Live.Track.Track.add_output_routing_channel_listener()\nadd_output_routing_channel_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;output_routing_channel&quot; has changed. C++ signature :  void add_output_routing_channel_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_output_routing_type_listener()" _note="full path:Live.Track.Track.add_output_routing_type_listener()\nadd_output_routing_type_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;output_routing_type&quot; has changed. C++ signature :  void add_output_routing_type_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_output_routings_listener()" _note="full path:Live.Track.Track.add_output_routings_listener()\nadd_output_routings_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;output_routings&quot; has changed. C++ signature :  void add_output_routings_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_output_sub_routings_listener()" _note="full path:Live.Track.Track.add_output_sub_routings_listener()\nadd_output_sub_routings_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;output_sub_routings&quot; has changed. C++ signature :  void add_output_sub_routings_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_playing_slot_index_listener()" _note="full path:Live.Track.Track.add_playing_slot_index_listener()\nadd_playing_slot_index_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;playing_slot_index&quot; has changed. C++ signature :  void add_playing_slot_index_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_solo_listener()" _note="full path:Live.Track.Track.add_solo_listener()\nadd_solo_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;solo&quot; has changed. C++ signature :  void add_solo_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="arm_has_listener()" _note="full path:Live.Track.Track.arm_has_listener()\narm_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;arm&quot;. C++ signature :  bool arm_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="arrangement_clips_has_listener()" _note="full path:Live.Track.Track.arrangement_clips_has_listener()\narrangement_clips_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;arrangement_clips&quot;. C++ signature :  bool arrangement_clips_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="available_input_routing_channels_has_listener()" _note="full path:Live.Track.Track.available_input_routing_channels_has_listener()\navailable_input_routing_channels_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;available_input_routing_channels&quot;. C++ signature :  bool available_input_routing_channels_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="available_input_routing_types_has_listener()" _note="full path:Live.Track.Track.available_input_routing_types_has_listener()\navailable_input_routing_types_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;available_input_routing_types&quot;. C++ signature :  bool available_input_routing_types_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="available_output_routing_channels_has_listener()" _note="full path:Live.Track.Track.available_output_routing_channels_has_listener()\navailable_output_routing_channels_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;available_output_routing_channels&quot;. C++ signature :  bool available_output_routing_channels_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="available_output_routing_types_has_listener()" _note="full path:Live.Track.Track.available_output_routing_types_has_listener()\navailable_output_routing_types_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;available_output_routing_types&quot;. C++ signature :  bool available_output_routing_types_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="clip_slots_has_listener()" _note="full path:Live.Track.Track.clip_slots_has_listener()\nclip_slots_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;clip_slots&quot;. C++ signature :  bool clip_slots_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="color_has_listener()" _note="full path:Live.Track.Track.color_has_listener()\ncolor_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;color&quot;. C++ signature :  bool color_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="color_index_has_listener()" _note="full path:Live.Track.Track.color_index_has_listener()\ncolor_index_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;color_index&quot;. C++ signature :  bool color_index_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="current_input_routing_has_listener()" _note="full path:Live.Track.Track.current_input_routing_has_listener()\ncurrent_input_routing_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;current_input_routing&quot;. C++ signature :  bool current_input_routing_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="current_input_sub_routing_has_listener()" _note="full path:Live.Track.Track.current_input_sub_routing_has_listener()\ncurrent_input_sub_routing_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;current_input_sub_routing&quot;. C++ signature :  bool current_input_sub_routing_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="current_monitoring_state_has_listener()" _note="full path:Live.Track.Track.current_monitoring_state_has_listener()\ncurrent_monitoring_state_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;current_monitoring_state&quot;. C++ signature :  bool current_monitoring_state_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="current_output_routing_has_listener()" _note="full path:Live.Track.Track.current_output_routing_has_listener()\ncurrent_output_routing_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;current_output_routing&quot;. C++ signature :  bool current_output_routing_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="current_output_sub_routing_has_listener()" _note="full path:Live.Track.Track.current_output_sub_routing_has_listener()\ncurrent_output_sub_routing_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;current_output_sub_routing&quot;. C++ signature :  bool current_output_sub_routing_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="data_has_listener()" _note="full path:Live.Track.Track.data_has_listener()\ndata_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;data&quot;. C++ signature :  bool data_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="devices_has_listener()" _note="full path:Live.Track.Track.devices_has_listener()\ndevices_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;devices&quot;. C++ signature :  bool devices_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="fired_slot_index_has_listener()" _note="full path:Live.Track.Track.fired_slot_index_has_listener()\nfired_slot_index_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;fired_slot_index&quot;. C++ signature :  bool fired_slot_index_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="has_audio_input_has_listener()" _note="full path:Live.Track.Track.has_audio_input_has_listener()\nhas_audio_input_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;has_audio_input&quot;. C++ signature :  bool has_audio_input_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="has_audio_output_has_listener()" _note="full path:Live.Track.Track.has_audio_output_has_listener()\nhas_audio_output_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;has_audio_output&quot;. C++ signature :  bool has_audio_output_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="has_midi_input_has_listener()" _note="full path:Live.Track.Track.has_midi_input_has_listener()\nhas_midi_input_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;has_midi_input&quot;. C++ signature :  bool has_midi_input_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="has_midi_output_has_listener()" _note="full path:Live.Track.Track.has_midi_output_has_listener()\nhas_midi_output_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;has_midi_output&quot;. C++ signature :  bool has_midi_output_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="implicit_arm_has_listener()" _note="full path:Live.Track.Track.implicit_arm_has_listener()\nimplicit_arm_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;implicit_arm&quot;. C++ signature :  bool implicit_arm_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="input_meter_left_has_listener()" _note="full path:Live.Track.Track.input_meter_left_has_listener()\ninput_meter_left_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;input_meter_left&quot;. C++ signature :  bool input_meter_left_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="input_meter_level_has_listener()" _note="full path:Live.Track.Track.input_meter_level_has_listener()\ninput_meter_level_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;input_meter_level&quot;. C++ signature :  bool input_meter_level_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="input_meter_right_has_listener()" _note="full path:Live.Track.Track.input_meter_right_has_listener()\ninput_meter_right_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;input_meter_right&quot;. C++ signature :  bool input_meter_right_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="input_routing_channel_has_listener()" _note="full path:Live.Track.Track.input_routing_channel_has_listener()\ninput_routing_channel_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;input_routing_channel&quot;. C++ signature :  bool input_routing_channel_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="input_routing_type_has_listener()" _note="full path:Live.Track.Track.input_routing_type_has_listener()\ninput_routing_type_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;input_routing_type&quot;. C++ signature :  bool input_routing_type_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="input_routings_has_listener()" _note="full path:Live.Track.Track.input_routings_has_listener()\ninput_routings_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;input_routings&quot;. C++ signature :  bool input_routings_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="input_sub_routings_has_listener()" _note="full path:Live.Track.Track.input_sub_routings_has_listener()\ninput_sub_routings_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;input_sub_routings&quot;. C++ signature :  bool input_sub_routings_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="is_frozen_has_listener()" _note="full path:Live.Track.Track.is_frozen_has_listener()\nis_frozen_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_frozen&quot;. C++ signature :  bool is_frozen_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="is_showing_chains_has_listener()" _note="full path:Live.Track.Track.is_showing_chains_has_listener()\nis_showing_chains_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_showing_chains&quot;. C++ signature :  bool is_showing_chains_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="mute_has_listener()" _note="full path:Live.Track.Track.mute_has_listener()\nmute_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;mute&quot;. C++ signature :  bool mute_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="muted_via_solo_has_listener()" _note="full path:Live.Track.Track.muted_via_solo_has_listener()\nmuted_via_solo_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;muted_via_solo&quot;. C++ signature :  bool muted_via_solo_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="name_has_listener()" _note="full path:Live.Track.Track.name_has_listener()\nname_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="output_meter_left_has_listener()" _note="full path:Live.Track.Track.output_meter_left_has_listener()\noutput_meter_left_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;output_meter_left&quot;. C++ signature :  bool output_meter_left_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="output_meter_level_has_listener()" _note="full path:Live.Track.Track.output_meter_level_has_listener()\noutput_meter_level_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;output_meter_level&quot;. C++ signature :  bool output_meter_level_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="output_meter_right_has_listener()" _note="full path:Live.Track.Track.output_meter_right_has_listener()\noutput_meter_right_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;output_meter_right&quot;. C++ signature :  bool output_meter_right_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="output_routing_channel_has_listener()" _note="full path:Live.Track.Track.output_routing_channel_has_listener()\noutput_routing_channel_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;output_routing_channel&quot;. C++ signature :  bool output_routing_channel_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="output_routing_type_has_listener()" _note="full path:Live.Track.Track.output_routing_type_has_listener()\noutput_routing_type_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;output_routing_type&quot;. C++ signature :  bool output_routing_type_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="output_routings_has_listener()" _note="full path:Live.Track.Track.output_routings_has_listener()\noutput_routings_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;output_routings&quot;. C++ signature :  bool output_routings_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="output_sub_routings_has_listener()" _note="full path:Live.Track.Track.output_sub_routings_has_listener()\noutput_sub_routings_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;output_sub_routings&quot;. C++ signature :  bool output_sub_routings_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="playing_slot_index_has_listener()" _note="full path:Live.Track.Track.playing_slot_index_has_listener()\nplaying_slot_index_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;playing_slot_index&quot;. C++ signature :  bool playing_slot_index_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_arm_listener()" _note="full path:Live.Track.Track.remove_arm_listener()\nremove_arm_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;arm&quot;. C++ signature :  void remove_arm_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_arrangement_clips_listener()" _note="full path:Live.Track.Track.remove_arrangement_clips_listener()\nremove_arrangement_clips_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;arrangement_clips&quot;. C++ signature :  void remove_arrangement_clips_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_available_input_routing_channels_listener()" _note="full path:Live.Track.Track.remove_available_input_routing_channels_listener()\nremove_available_input_routing_channels_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;available_input_routing_channels&quot;. C++ signature :  void remove_available_input_routing_channels_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_available_input_routing_types_listener()" _note="full path:Live.Track.Track.remove_available_input_routing_types_listener()\nremove_available_input_routing_types_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;available_input_routing_types&quot;. C++ signature :  void remove_available_input_routing_types_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_available_output_routing_channels_listener()" _note="full path:Live.Track.Track.remove_available_output_routing_channels_listener()\nremove_available_output_routing_channels_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;available_output_routing_channels&quot;. C++ signature :  void remove_available_output_routing_channels_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_available_output_routing_types_listener()" _note="full path:Live.Track.Track.remove_available_output_routing_types_listener()\nremove_available_output_routing_types_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;available_output_routing_types&quot;. C++ signature :  void remove_available_output_routing_types_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_clip_slots_listener()" _note="full path:Live.Track.Track.remove_clip_slots_listener()\nremove_clip_slots_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;clip_slots&quot;. C++ signature :  void remove_clip_slots_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_color_index_listener()" _note="full path:Live.Track.Track.remove_color_index_listener()\nremove_color_index_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;color_index&quot;. C++ signature :  void remove_color_index_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_color_listener()" _note="full path:Live.Track.Track.remove_color_listener()\nremove_color_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;color&quot;. C++ signature :  void remove_color_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_current_input_routing_listener()" _note="full path:Live.Track.Track.remove_current_input_routing_listener()\nremove_current_input_routing_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;current_input_routing&quot;. C++ signature :  void remove_current_input_routing_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_current_input_sub_routing_listener()" _note="full path:Live.Track.Track.remove_current_input_sub_routing_listener()\nremove_current_input_sub_routing_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;current_input_sub_routing&quot;. C++ signature :  void remove_current_input_sub_routing_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_current_monitoring_state_listener()" _note="full path:Live.Track.Track.remove_current_monitoring_state_listener()\nremove_current_monitoring_state_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;current_monitoring_state&quot;. C++ signature :  void remove_current_monitoring_state_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_current_output_routing_listener()" _note="full path:Live.Track.Track.remove_current_output_routing_listener()\nremove_current_output_routing_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;current_output_routing&quot;. C++ signature :  void remove_current_output_routing_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_current_output_sub_routing_listener()" _note="full path:Live.Track.Track.remove_current_output_sub_routing_listener()\nremove_current_output_sub_routing_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;current_output_sub_routing&quot;. C++ signature :  void remove_current_output_sub_routing_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_data_listener()" _note="full path:Live.Track.Track.remove_data_listener()\nremove_data_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;data&quot;. C++ signature :  void remove_data_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_devices_listener()" _note="full path:Live.Track.Track.remove_devices_listener()\nremove_devices_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;devices&quot;. C++ signature :  void remove_devices_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_fired_slot_index_listener()" _note="full path:Live.Track.Track.remove_fired_slot_index_listener()\nremove_fired_slot_index_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;fired_slot_index&quot;. C++ signature :  void remove_fired_slot_index_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_has_audio_input_listener()" _note="full path:Live.Track.Track.remove_has_audio_input_listener()\nremove_has_audio_input_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;has_audio_input&quot;. C++ signature :  void remove_has_audio_input_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_has_audio_output_listener()" _note="full path:Live.Track.Track.remove_has_audio_output_listener()\nremove_has_audio_output_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;has_audio_output&quot;. C++ signature :  void remove_has_audio_output_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_has_midi_input_listener()" _note="full path:Live.Track.Track.remove_has_midi_input_listener()\nremove_has_midi_input_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;has_midi_input&quot;. C++ signature :  void remove_has_midi_input_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_has_midi_output_listener()" _note="full path:Live.Track.Track.remove_has_midi_output_listener()\nremove_has_midi_output_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;has_midi_output&quot;. C++ signature :  void remove_has_midi_output_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_implicit_arm_listener()" _note="full path:Live.Track.Track.remove_implicit_arm_listener()\nremove_implicit_arm_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;implicit_arm&quot;. C++ signature :  void remove_implicit_arm_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_input_meter_left_listener()" _note="full path:Live.Track.Track.remove_input_meter_left_listener()\nremove_input_meter_left_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;input_meter_left&quot;. C++ signature :  void remove_input_meter_left_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_input_meter_level_listener()" _note="full path:Live.Track.Track.remove_input_meter_level_listener()\nremove_input_meter_level_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;input_meter_level&quot;. C++ signature :  void remove_input_meter_level_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_input_meter_right_listener()" _note="full path:Live.Track.Track.remove_input_meter_right_listener()\nremove_input_meter_right_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;input_meter_right&quot;. C++ signature :  void remove_input_meter_right_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_input_routing_channel_listener()" _note="full path:Live.Track.Track.remove_input_routing_channel_listener()\nremove_input_routing_channel_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;input_routing_channel&quot;. C++ signature :  void remove_input_routing_channel_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_input_routing_type_listener()" _note="full path:Live.Track.Track.remove_input_routing_type_listener()\nremove_input_routing_type_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;input_routing_type&quot;. C++ signature :  void remove_input_routing_type_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_input_routings_listener()" _note="full path:Live.Track.Track.remove_input_routings_listener()\nremove_input_routings_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;input_routings&quot;. C++ signature :  void remove_input_routings_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_input_sub_routings_listener()" _note="full path:Live.Track.Track.remove_input_sub_routings_listener()\nremove_input_sub_routings_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;input_sub_routings&quot;. C++ signature :  void remove_input_sub_routings_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_is_frozen_listener()" _note="full path:Live.Track.Track.remove_is_frozen_listener()\nremove_is_frozen_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_frozen&quot;. C++ signature :  void remove_is_frozen_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_is_showing_chains_listener()" _note="full path:Live.Track.Track.remove_is_showing_chains_listener()\nremove_is_showing_chains_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_showing_chains&quot;. C++ signature :  void remove_is_showing_chains_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_mute_listener()" _note="full path:Live.Track.Track.remove_mute_listener()\nremove_mute_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;mute&quot;. C++ signature :  void remove_mute_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_muted_via_solo_listener()" _note="full path:Live.Track.Track.remove_muted_via_solo_listener()\nremove_muted_via_solo_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;muted_via_solo&quot;. C++ signature :  void remove_muted_via_solo_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_name_listener()" _note="full path:Live.Track.Track.remove_name_listener()\nremove_name_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_output_meter_left_listener()" _note="full path:Live.Track.Track.remove_output_meter_left_listener()\nremove_output_meter_left_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;output_meter_left&quot;. C++ signature :  void remove_output_meter_left_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_output_meter_level_listener()" _note="full path:Live.Track.Track.remove_output_meter_level_listener()\nremove_output_meter_level_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;output_meter_level&quot;. C++ signature :  void remove_output_meter_level_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_output_meter_right_listener()" _note="full path:Live.Track.Track.remove_output_meter_right_listener()\nremove_output_meter_right_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;output_meter_right&quot;. C++ signature :  void remove_output_meter_right_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_output_routing_channel_listener()" _note="full path:Live.Track.Track.remove_output_routing_channel_listener()\nremove_output_routing_channel_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;output_routing_channel&quot;. C++ signature :  void remove_output_routing_channel_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_output_routing_type_listener()" _note="full path:Live.Track.Track.remove_output_routing_type_listener()\nremove_output_routing_type_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;output_routing_type&quot;. C++ signature :  void remove_output_routing_type_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_output_routings_listener()" _note="full path:Live.Track.Track.remove_output_routings_listener()\nremove_output_routings_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;output_routings&quot;. C++ signature :  void remove_output_routings_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_output_sub_routings_listener()" _note="full path:Live.Track.Track.remove_output_sub_routings_listener()\nremove_output_sub_routings_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;output_sub_routings&quot;. C++ signature :  void remove_output_sub_routings_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_playing_slot_index_listener()" _note="full path:Live.Track.Track.remove_playing_slot_index_listener()\nremove_playing_slot_index_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;playing_slot_index&quot;. C++ signature :  void remove_playing_slot_index_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_solo_listener()" _note="full path:Live.Track.Track.remove_solo_listener()\nremove_solo_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;solo&quot;. C++ signature :  void remove_solo_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="solo_has_listener()" _note="full path:Live.Track.Track.solo_has_listener()\nsolo_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;solo&quot;. C++ signature :  bool solo_has_listener(TTrackPyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
            </outline>
            <outline text="Methods">
                <outline text="delete_clip()" _note="full path:Live.Track.Track.delete_clip()\ndelete_clip( (Track)arg1, (Clip)arg2) -> None : Delete the given clip. Raises a runtime error when the clip belongs to another track. C++ signature :  void delete_clip(TTrackPyHandle,TPyHandle<AClip>)" type="label" _label="Method">
                </outline>
                <outline text="delete_device()" _note="full path:Live.Track.Track.delete_device()\ndelete_device( (Track)arg1, (int)arg2) -> None : Delete a device identified by the index in the 'devices' list. C++ signature :  void delete_device(TTrackPyHandle,int)" type="label" _label="Method">
                </outline>
                <outline text="duplicate_clip_slot()" _note="full path:Live.Track.Track.duplicate_clip_slot()\nduplicate_clip_slot( (Track)arg1, (int)arg2) -> int : Duplicate a clip and put it into the next free slot and return the index of the destination slot. A new scene is created if no free slot is available. If creating the new scene would exceed the limitations, a runtime error is raised. C++ signature :  int duplicate_clip_slot(TTrackPyHandle,int)" type="label" _label="Method">
                </outline>
                <outline text="duplicate_clip_to_arrangement()" _note="full path:Live.Track.Track.duplicate_clip_to_arrangement()\nduplicate_clip_to_arrangement( (Track)self, (Clip)clip, (float)destination_time) -> Clip : Duplicate the given clip into the arrangement of this track at the provided destination time and return it. When the type of the clip and the type of the track are incompatible, a runtime error is raised. C++ signature :  TWeakPtr<TPyHandle<AClip> > duplicate_clip_to_arrangement(TTrackPyHandle,TPyHandle<AClip>,double)" type="label" _label="Method">
                </outline>
                <outline text="get_data()" _note="full path:Live.Track.Track.get_data()\nget_data( (Track)arg1, (object)key, (object)default_value) -> object : Get data for the given key, that was previously stored using set_data. C++ signature :  boost::python::api::object get_data(TTrackPyHandle,TString,boost::python::api::object)" type="label" _label="Method">
                </outline>
                <outline text="jump_in_running_session_clip()" _note="full path:Live.Track.Track.jump_in_running_session_clip()\njump_in_running_session_clip( (Track)arg1, (float)arg2) -> None : Jump forward or backward in the currently running Sessionclip (if any) by the specified relative amount in beats. Does nothing if no Session Clip is currently running. C++ signature :  void jump_in_running_session_clip(TTrackPyHandle,double)" type="label" _label="Method">
                </outline>
                <outline text="set_data()" _note="full path:Live.Track.Track.set_data()\nset_data( (Track)arg1, (object)key, (object)value) -> None : Store data for the given key in this object. The data is persistent and will be restored when loading the Live Set. C++ signature :  void set_data(TTrackPyHandle,TString,boost::python::api::object)" type="label" _label="Method">
                </outline>
                <outline text="stop_all_clips()" _note="full path:Live.Track.Track.stop_all_clips()\nstop_all_clips( (Track)arg1 [, (bool)Quantized=True]) -> None : Stop running and triggered clip and slots on this track. C++ signature :  void stop_all_clips(TTrackPyHandle [,bool=True])" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
    </outline>
    <outline text="TransmuteDevice" _note="full path:Live.TransmuteDevice\n" type="label" _label="Module">
        <outline text="TransmuteDevice" _note="full path:Live.TransmuteDevice.TransmuteDevice\nThis class represents a Transmute device." type="label" _label="Class">
            <outline text="View" _note="full path:Live.TransmuteDevice.TransmuteDevice.View\nRepresenting the view aspects of a device." type="label" _label="Class">
                <outline text="Properties">
                    <outline text="_live_ptr" _note="full path:Live.TransmuteDevice.TransmuteDevice.View._live_ptr\n" type="label" _label="Property">
                    </outline>
                    <outline text="canonical_parent" _note="full path:Live.TransmuteDevice.TransmuteDevice.View.canonical_parent\nGet the canonical parent of the View." type="label" _label="Property">
                    </outline>
                    <outline text="is_collapsed" _note="full path:Live.TransmuteDevice.TransmuteDevice.View.is_collapsed\nGet/Set/Listen if the device is shown collapsed in the device chain." type="label" _label="Property">
                    </outline>
                </outline>
                <outline text="Listeners">
                    <outline text="add_is_collapsed_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.View.add_is_collapsed_listener()\nadd_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_collapsed&quot; has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="is_collapsed_has_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.View.is_collapsed_has_listener()\nis_collapsed_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_collapsed&quot;. C++ signature :  bool is_collapsed_has_listener(TPyViewData<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_is_collapsed_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.View.remove_is_collapsed_listener()\nremove_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_collapsed&quot;. C++ signature :  void remove_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                </outline>
            </outline>
            <outline text="Properties">
                <outline text="_live_ptr" _note="full path:Live.TransmuteDevice.TransmuteDevice._live_ptr\n" type="label" _label="Property">
                </outline>
                <outline text="can_have_chains" _note="full path:Live.TransmuteDevice.TransmuteDevice.can_have_chains\nReturns true if the device is a rack." type="label" _label="Property">
                </outline>
                <outline text="can_have_drum_pads" _note="full path:Live.TransmuteDevice.TransmuteDevice.can_have_drum_pads\nReturns true if the device is a drum rack." type="label" _label="Property">
                </outline>
                <outline text="canonical_parent" _note="full path:Live.TransmuteDevice.TransmuteDevice.canonical_parent\nGet the canonical parent of the Device." type="label" _label="Property">
                </outline>
                <outline text="class_display_name" _note="full path:Live.TransmuteDevice.TransmuteDevice.class_display_name\nReturn const access to the name of the device's class name as displayed in Live's browser and device chain" type="label" _label="Property">
                </outline>
                <outline text="class_name" _note="full path:Live.TransmuteDevice.TransmuteDevice.class_name\nReturn const access to the name of the device's class." type="label" _label="Property">
                </outline>
                <outline text="frequency_dial_mode_index" _note="full path:Live.TransmuteDevice.TransmuteDevice.frequency_dial_mode_index\nReturn the current frequency dial mode index" type="label" _label="Property">
                </outline>
                <outline text="frequency_dial_mode_list" _note="full path:Live.TransmuteDevice.TransmuteDevice.frequency_dial_mode_list\nReturn the current frequency dial mode list" type="label" _label="Property">
                </outline>
                <outline text="is_active" _note="full path:Live.TransmuteDevice.TransmuteDevice.is_active\nReturn const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off." type="label" _label="Property">
                </outline>
                <outline text="midi_gate_index" _note="full path:Live.TransmuteDevice.TransmuteDevice.midi_gate_index\nReturn the current midi gate index" type="label" _label="Property">
                </outline>
                <outline text="midi_gate_list" _note="full path:Live.TransmuteDevice.TransmuteDevice.midi_gate_list\nReturn the current midi gate list" type="label" _label="Property">
                </outline>
                <outline text="mod_mode_index" _note="full path:Live.TransmuteDevice.TransmuteDevice.mod_mode_index\nReturn the current mod mode index" type="label" _label="Property">
                </outline>
                <outline text="mod_mode_list" _note="full path:Live.TransmuteDevice.TransmuteDevice.mod_mode_list\nReturn the current mod mode list" type="label" _label="Property">
                </outline>
                <outline text="mono_poly_index" _note="full path:Live.TransmuteDevice.TransmuteDevice.mono_poly_index\nReturn the current mono poly mode index" type="label" _label="Property">
                </outline>
                <outline text="mono_poly_list" _note="full path:Live.TransmuteDevice.TransmuteDevice.mono_poly_list\nReturn the current mono poly mode list" type="label" _label="Property">
                </outline>
                <outline text="name" _note="full path:Live.TransmuteDevice.TransmuteDevice.name\nReturn access to the name of the device." type="label" _label="Property">
                </outline>
                <outline text="parameters" _note="full path:Live.TransmuteDevice.TransmuteDevice.parameters\nConst access to the list of available automatable parameters for this device." type="label" _label="Property">
                </outline>
                <outline text="pitch_bend_range" _note="full path:Live.TransmuteDevice.TransmuteDevice.pitch_bend_range\nReturn the current pitch bend range" type="label" _label="Property">
                </outline>
                <outline text="pitch_mode_index" _note="full path:Live.TransmuteDevice.TransmuteDevice.pitch_mode_index\nReturn the current pitch mode index" type="label" _label="Property">
                </outline>
                <outline text="pitch_mode_list" _note="full path:Live.TransmuteDevice.TransmuteDevice.pitch_mode_list\nReturn the current pitch mode list" type="label" _label="Property">
                </outline>
                <outline text="polyphony" _note="full path:Live.TransmuteDevice.TransmuteDevice.polyphony\nReturn the current polyphony" type="label" _label="Property">
                </outline>
                <outline text="type" _note="full path:Live.TransmuteDevice.TransmuteDevice.type\nReturn the type of the device." type="label" _label="Property">
                </outline>
                <outline text="view" _note="full path:Live.TransmuteDevice.TransmuteDevice.view\nRepresenting the view aspects of a device." type="label" _label="Property">
                </outline>
            </outline>
            <outline text="Listeners">
                <outline text="add_frequency_dial_mode_index_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.add_frequency_dial_mode_index_listener()\nadd_frequency_dial_mode_index_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;frequency_dial_mode_index&quot; has changed. C++ signature :  void add_frequency_dial_mode_index_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_frequency_dial_mode_list_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.add_frequency_dial_mode_list_listener()\nadd_frequency_dial_mode_list_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;frequency_dial_mode_list&quot; has changed. C++ signature :  void add_frequency_dial_mode_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_is_active_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.add_is_active_listener()\nadd_is_active_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_active&quot; has changed. C++ signature :  void add_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_midi_gate_index_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.add_midi_gate_index_listener()\nadd_midi_gate_index_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;midi_gate_index&quot; has changed. C++ signature :  void add_midi_gate_index_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_midi_gate_list_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.add_midi_gate_list_listener()\nadd_midi_gate_list_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;midi_gate_list&quot; has changed. C++ signature :  void add_midi_gate_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_mod_mode_index_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.add_mod_mode_index_listener()\nadd_mod_mode_index_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;mod_mode_index&quot; has changed. C++ signature :  void add_mod_mode_index_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_mod_mode_list_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.add_mod_mode_list_listener()\nadd_mod_mode_list_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;mod_mode_list&quot; has changed. C++ signature :  void add_mod_mode_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_mono_poly_index_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.add_mono_poly_index_listener()\nadd_mono_poly_index_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;mono_poly_index&quot; has changed. C++ signature :  void add_mono_poly_index_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_mono_poly_list_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.add_mono_poly_list_listener()\nadd_mono_poly_list_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;mono_poly_list&quot; has changed. C++ signature :  void add_mono_poly_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_name_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.add_name_listener()\nadd_name_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_parameters_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.add_parameters_listener()\nadd_parameters_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;parameters&quot; has changed. C++ signature :  void add_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_pitch_bend_range_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.add_pitch_bend_range_listener()\nadd_pitch_bend_range_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;pitch_bend_range&quot; has changed. C++ signature :  void add_pitch_bend_range_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_pitch_mode_index_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.add_pitch_mode_index_listener()\nadd_pitch_mode_index_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;pitch_mode_index&quot; has changed. C++ signature :  void add_pitch_mode_index_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_pitch_mode_list_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.add_pitch_mode_list_listener()\nadd_pitch_mode_list_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;pitch_mode_list&quot; has changed. C++ signature :  void add_pitch_mode_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_polyphony_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.add_polyphony_listener()\nadd_polyphony_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;polyphony&quot; has changed. C++ signature :  void add_polyphony_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="frequency_dial_mode_index_has_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.frequency_dial_mode_index_has_listener()\nfrequency_dial_mode_index_has_listener( (TransmuteDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;frequency_dial_mode_index&quot;. C++ signature :  bool frequency_dial_mode_index_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="frequency_dial_mode_list_has_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.frequency_dial_mode_list_has_listener()\nfrequency_dial_mode_list_has_listener( (TransmuteDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;frequency_dial_mode_list&quot;. C++ signature :  bool frequency_dial_mode_list_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="is_active_has_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.is_active_has_listener()\nis_active_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_active&quot;. C++ signature :  bool is_active_has_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="midi_gate_index_has_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.midi_gate_index_has_listener()\nmidi_gate_index_has_listener( (TransmuteDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;midi_gate_index&quot;. C++ signature :  bool midi_gate_index_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="midi_gate_list_has_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.midi_gate_list_has_listener()\nmidi_gate_list_has_listener( (TransmuteDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;midi_gate_list&quot;. C++ signature :  bool midi_gate_list_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="mod_mode_index_has_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.mod_mode_index_has_listener()\nmod_mode_index_has_listener( (TransmuteDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;mod_mode_index&quot;. C++ signature :  bool mod_mode_index_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="mod_mode_list_has_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.mod_mode_list_has_listener()\nmod_mode_list_has_listener( (TransmuteDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;mod_mode_list&quot;. C++ signature :  bool mod_mode_list_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="mono_poly_index_has_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.mono_poly_index_has_listener()\nmono_poly_index_has_listener( (TransmuteDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;mono_poly_index&quot;. C++ signature :  bool mono_poly_index_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="mono_poly_list_has_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.mono_poly_list_has_listener()\nmono_poly_list_has_listener( (TransmuteDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;mono_poly_list&quot;. C++ signature :  bool mono_poly_list_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="name_has_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.name_has_listener()\nname_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="parameters_has_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.parameters_has_listener()\nparameters_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;parameters&quot;. C++ signature :  bool parameters_has_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="pitch_bend_range_has_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.pitch_bend_range_has_listener()\npitch_bend_range_has_listener( (TransmuteDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;pitch_bend_range&quot;. C++ signature :  bool pitch_bend_range_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="pitch_mode_index_has_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.pitch_mode_index_has_listener()\npitch_mode_index_has_listener( (TransmuteDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;pitch_mode_index&quot;. C++ signature :  bool pitch_mode_index_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="pitch_mode_list_has_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.pitch_mode_list_has_listener()\npitch_mode_list_has_listener( (TransmuteDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;pitch_mode_list&quot;. C++ signature :  bool pitch_mode_list_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="polyphony_has_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.polyphony_has_listener()\npolyphony_has_listener( (TransmuteDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;polyphony&quot;. C++ signature :  bool polyphony_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_frequency_dial_mode_index_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.remove_frequency_dial_mode_index_listener()\nremove_frequency_dial_mode_index_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;frequency_dial_mode_index&quot;. C++ signature :  void remove_frequency_dial_mode_index_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_frequency_dial_mode_list_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.remove_frequency_dial_mode_list_listener()\nremove_frequency_dial_mode_list_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;frequency_dial_mode_list&quot;. C++ signature :  void remove_frequency_dial_mode_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_is_active_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.remove_is_active_listener()\nremove_is_active_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_active&quot;. C++ signature :  void remove_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_midi_gate_index_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.remove_midi_gate_index_listener()\nremove_midi_gate_index_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;midi_gate_index&quot;. C++ signature :  void remove_midi_gate_index_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_midi_gate_list_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.remove_midi_gate_list_listener()\nremove_midi_gate_list_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;midi_gate_list&quot;. C++ signature :  void remove_midi_gate_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_mod_mode_index_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.remove_mod_mode_index_listener()\nremove_mod_mode_index_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;mod_mode_index&quot;. C++ signature :  void remove_mod_mode_index_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_mod_mode_list_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.remove_mod_mode_list_listener()\nremove_mod_mode_list_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;mod_mode_list&quot;. C++ signature :  void remove_mod_mode_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_mono_poly_index_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.remove_mono_poly_index_listener()\nremove_mono_poly_index_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;mono_poly_index&quot;. C++ signature :  void remove_mono_poly_index_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_mono_poly_list_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.remove_mono_poly_list_listener()\nremove_mono_poly_list_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;mono_poly_list&quot;. C++ signature :  void remove_mono_poly_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_name_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.remove_name_listener()\nremove_name_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_parameters_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.remove_parameters_listener()\nremove_parameters_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;parameters&quot;. C++ signature :  void remove_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_pitch_bend_range_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.remove_pitch_bend_range_listener()\nremove_pitch_bend_range_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;pitch_bend_range&quot;. C++ signature :  void remove_pitch_bend_range_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_pitch_mode_index_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.remove_pitch_mode_index_listener()\nremove_pitch_mode_index_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;pitch_mode_index&quot;. C++ signature :  void remove_pitch_mode_index_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_pitch_mode_list_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.remove_pitch_mode_list_listener()\nremove_pitch_mode_list_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;pitch_mode_list&quot;. C++ signature :  void remove_pitch_mode_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_polyphony_listener()" _note="full path:Live.TransmuteDevice.TransmuteDevice.remove_polyphony_listener()\nremove_polyphony_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;polyphony&quot;. C++ signature :  void remove_polyphony_listener(TTransmuteDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
            </outline>
            <outline text="Methods">
                <outline text="store_chosen_bank()" _note="full path:Live.TransmuteDevice.TransmuteDevice.store_chosen_bank()\nstore_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -> None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle<ADevice>,int,int)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
    </outline>
    <outline text="WavetableDevice" _note="full path:Live.WavetableDevice\n" type="label" _label="Module">
        <outline text="EffectMode" _note="full path:Live.WavetableDevice.EffectMode\n" type="label" _label="Class">
            <outline text="Values">
                <outline text="frequency_modulation" _note="full path:Live.WavetableDevice.EffectMode.frequency_modulation\n" type="label" _label="Value">
                </outline>
                <outline text="none" _note="full path:Live.WavetableDevice.EffectMode.none\n" type="label" _label="Value">
                </outline>
                <outline text="sync_and_pulse_width" _note="full path:Live.WavetableDevice.EffectMode.sync_and_pulse_width\n" type="label" _label="Value">
                </outline>
                <outline text="warp_and_fold" _note="full path:Live.WavetableDevice.EffectMode.warp_and_fold\n" type="label" _label="Value">
                </outline>
            </outline>
        </outline>
        <outline text="FilterRouting" _note="full path:Live.WavetableDevice.FilterRouting\n" type="label" _label="Class">
            <outline text="Values">
                <outline text="parallel" _note="full path:Live.WavetableDevice.FilterRouting.parallel\n" type="label" _label="Value">
                </outline>
                <outline text="serial" _note="full path:Live.WavetableDevice.FilterRouting.serial\n" type="label" _label="Value">
                </outline>
                <outline text="split" _note="full path:Live.WavetableDevice.FilterRouting.split\n" type="label" _label="Value">
                </outline>
            </outline>
        </outline>
        <outline text="ModulationSource" _note="full path:Live.WavetableDevice.ModulationSource\n" type="label" _label="Class">
            <outline text="Values">
                <outline text="amp_envelope" _note="full path:Live.WavetableDevice.ModulationSource.amp_envelope\n" type="label" _label="Value">
                </outline>
                <outline text="envelope_2" _note="full path:Live.WavetableDevice.ModulationSource.envelope_2\n" type="label" _label="Value">
                </outline>
                <outline text="envelope_3" _note="full path:Live.WavetableDevice.ModulationSource.envelope_3\n" type="label" _label="Value">
                </outline>
                <outline text="lfo_1" _note="full path:Live.WavetableDevice.ModulationSource.lfo_1\n" type="label" _label="Value">
                </outline>
                <outline text="lfo_2" _note="full path:Live.WavetableDevice.ModulationSource.lfo_2\n" type="label" _label="Value">
                </outline>
                <outline text="midi_channel_pressure" _note="full path:Live.WavetableDevice.ModulationSource.midi_channel_pressure\n" type="label" _label="Value">
                </outline>
                <outline text="midi_mod_wheel" _note="full path:Live.WavetableDevice.ModulationSource.midi_mod_wheel\n" type="label" _label="Value">
                </outline>
                <outline text="midi_note" _note="full path:Live.WavetableDevice.ModulationSource.midi_note\n" type="label" _label="Value">
                </outline>
                <outline text="midi_pitch_bend" _note="full path:Live.WavetableDevice.ModulationSource.midi_pitch_bend\n" type="label" _label="Value">
                </outline>
                <outline text="midi_random" _note="full path:Live.WavetableDevice.ModulationSource.midi_random\n" type="label" _label="Value">
                </outline>
                <outline text="midi_velocity" _note="full path:Live.WavetableDevice.ModulationSource.midi_velocity\n" type="label" _label="Value">
                </outline>
            </outline>
        </outline>
        <outline text="UnisonMode" _note="full path:Live.WavetableDevice.UnisonMode\n" type="label" _label="Class">
            <outline text="Values">
                <outline text="classic" _note="full path:Live.WavetableDevice.UnisonMode.classic\n" type="label" _label="Value">
                </outline>
                <outline text="fast_shimmer" _note="full path:Live.WavetableDevice.UnisonMode.fast_shimmer\n" type="label" _label="Value">
                </outline>
                <outline text="none" _note="full path:Live.WavetableDevice.UnisonMode.none\n" type="label" _label="Value">
                </outline>
                <outline text="phase_sync" _note="full path:Live.WavetableDevice.UnisonMode.phase_sync\n" type="label" _label="Value">
                </outline>
                <outline text="position_spread" _note="full path:Live.WavetableDevice.UnisonMode.position_spread\n" type="label" _label="Value">
                </outline>
                <outline text="random_note" _note="full path:Live.WavetableDevice.UnisonMode.random_note\n" type="label" _label="Value">
                </outline>
                <outline text="slow_shimmer" _note="full path:Live.WavetableDevice.UnisonMode.slow_shimmer\n" type="label" _label="Value">
                </outline>
            </outline>
        </outline>
        <outline text="VoiceCount" _note="full path:Live.WavetableDevice.VoiceCount\n" type="label" _label="Class">
            <outline text="Values">
                <outline text="eight" _note="full path:Live.WavetableDevice.VoiceCount.eight\n" type="label" _label="Value">
                </outline>
                <outline text="five" _note="full path:Live.WavetableDevice.VoiceCount.five\n" type="label" _label="Value">
                </outline>
                <outline text="four" _note="full path:Live.WavetableDevice.VoiceCount.four\n" type="label" _label="Value">
                </outline>
                <outline text="seven" _note="full path:Live.WavetableDevice.VoiceCount.seven\n" type="label" _label="Value">
                </outline>
                <outline text="six" _note="full path:Live.WavetableDevice.VoiceCount.six\n" type="label" _label="Value">
                </outline>
                <outline text="three" _note="full path:Live.WavetableDevice.VoiceCount.three\n" type="label" _label="Value">
                </outline>
                <outline text="two" _note="full path:Live.WavetableDevice.VoiceCount.two\n" type="label" _label="Value">
                </outline>
            </outline>
        </outline>
        <outline text="Voicing" _note="full path:Live.WavetableDevice.Voicing\n" type="label" _label="Class">
            <outline text="Values">
                <outline text="mono" _note="full path:Live.WavetableDevice.Voicing.mono\n" type="label" _label="Value">
                </outline>
                <outline text="poly" _note="full path:Live.WavetableDevice.Voicing.poly\n" type="label" _label="Value">
                </outline>
            </outline>
        </outline>
        <outline text="WavetableDevice" _note="full path:Live.WavetableDevice.WavetableDevice\nThis class represents a Wavetable device." type="label" _label="Class">
            <outline text="View" _note="full path:Live.WavetableDevice.WavetableDevice.View\nRepresenting the view aspects of a Wavetable device." type="label" _label="Class">
                <outline text="Properties">
                    <outline text="_live_ptr" _note="full path:Live.WavetableDevice.WavetableDevice.View._live_ptr\n" type="label" _label="Property">
                    </outline>
                    <outline text="canonical_parent" _note="full path:Live.WavetableDevice.WavetableDevice.View.canonical_parent\nGet the canonical parent of the View." type="label" _label="Property">
                    </outline>
                    <outline text="is_collapsed" _note="full path:Live.WavetableDevice.WavetableDevice.View.is_collapsed\nGet/Set/Listen if the device is shown collapsed in the device chain." type="label" _label="Property">
                    </outline>
                </outline>
                <outline text="Listeners">
                    <outline text="add_is_collapsed_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.View.add_is_collapsed_listener()\nadd_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_collapsed&quot; has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="is_collapsed_has_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.View.is_collapsed_has_listener()\nis_collapsed_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_collapsed&quot;. C++ signature :  bool is_collapsed_has_listener(TPyViewData<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                    <outline text="remove_is_collapsed_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.View.remove_is_collapsed_listener()\nremove_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_collapsed&quot;. C++ signature :  void remove_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                    </outline>
                </outline>
            </outline>
            <outline text="Properties">
                <outline text="_live_ptr" _note="full path:Live.WavetableDevice.WavetableDevice._live_ptr\n" type="label" _label="Property">
                </outline>
                <outline text="can_have_chains" _note="full path:Live.WavetableDevice.WavetableDevice.can_have_chains\nReturns true if the device is a rack." type="label" _label="Property">
                </outline>
                <outline text="can_have_drum_pads" _note="full path:Live.WavetableDevice.WavetableDevice.can_have_drum_pads\nReturns true if the device is a drum rack." type="label" _label="Property">
                </outline>
                <outline text="canonical_parent" _note="full path:Live.WavetableDevice.WavetableDevice.canonical_parent\nGet the canonical parent of the Device." type="label" _label="Property">
                </outline>
                <outline text="class_display_name" _note="full path:Live.WavetableDevice.WavetableDevice.class_display_name\nReturn const access to the name of the device's class name as displayed in Live's browser and device chain" type="label" _label="Property">
                </outline>
                <outline text="class_name" _note="full path:Live.WavetableDevice.WavetableDevice.class_name\nReturn const access to the name of the device's class." type="label" _label="Property">
                </outline>
                <outline text="filter_routing" _note="full path:Live.WavetableDevice.WavetableDevice.filter_routing\nReturn the current filter routing." type="label" _label="Property">
                </outline>
                <outline text="is_active" _note="full path:Live.WavetableDevice.WavetableDevice.is_active\nReturn const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off." type="label" _label="Property">
                </outline>
                <outline text="mono_poly" _note="full path:Live.WavetableDevice.WavetableDevice.mono_poly\nReturn the current voicing mode." type="label" _label="Property">
                </outline>
                <outline text="name" _note="full path:Live.WavetableDevice.WavetableDevice.name\nReturn access to the name of the device." type="label" _label="Property">
                </outline>
                <outline text="oscillator_1_effect_mode" _note="full path:Live.WavetableDevice.WavetableDevice.oscillator_1_effect_mode\nReturn the current effect mode of the oscillator 1." type="label" _label="Property">
                </outline>
                <outline text="oscillator_1_wavetable_category" _note="full path:Live.WavetableDevice.WavetableDevice.oscillator_1_wavetable_category\nReturn the current wavetable category of the oscillator 1." type="label" _label="Property">
                </outline>
                <outline text="oscillator_1_wavetable_index" _note="full path:Live.WavetableDevice.WavetableDevice.oscillator_1_wavetable_index\nReturn the current wavetable index of the oscillator 1." type="label" _label="Property">
                </outline>
                <outline text="oscillator_1_wavetables" _note="full path:Live.WavetableDevice.WavetableDevice.oscillator_1_wavetables\nGet a vector of oscillator 1's wavetable names." type="label" _label="Property">
                </outline>
                <outline text="oscillator_2_effect_mode" _note="full path:Live.WavetableDevice.WavetableDevice.oscillator_2_effect_mode\nReturn the current effect mode of the oscillator 2." type="label" _label="Property">
                </outline>
                <outline text="oscillator_2_wavetable_category" _note="full path:Live.WavetableDevice.WavetableDevice.oscillator_2_wavetable_category\nReturn the current wavetable category of the oscillator 2." type="label" _label="Property">
                </outline>
                <outline text="oscillator_2_wavetable_index" _note="full path:Live.WavetableDevice.WavetableDevice.oscillator_2_wavetable_index\nReturn the current wavetable index of the oscillator 2." type="label" _label="Property">
                </outline>
                <outline text="oscillator_2_wavetables" _note="full path:Live.WavetableDevice.WavetableDevice.oscillator_2_wavetables\nGet a vector of oscillator 2's wavetable names." type="label" _label="Property">
                </outline>
                <outline text="oscillator_wavetable_categories" _note="full path:Live.WavetableDevice.WavetableDevice.oscillator_wavetable_categories\nGet a vector of the available wavetable categories." type="label" _label="Property">
                </outline>
                <outline text="parameters" _note="full path:Live.WavetableDevice.WavetableDevice.parameters\nConst access to the list of available automatable parameters for this device." type="label" _label="Property">
                </outline>
                <outline text="poly_voices" _note="full path:Live.WavetableDevice.WavetableDevice.poly_voices\nReturn the current number of polyphonic voices. Uses the VoiceCount enumeration." type="label" _label="Property">
                </outline>
                <outline text="type" _note="full path:Live.WavetableDevice.WavetableDevice.type\nReturn the type of the device." type="label" _label="Property">
                </outline>
                <outline text="unison_mode" _note="full path:Live.WavetableDevice.WavetableDevice.unison_mode\nReturn the current unison mode." type="label" _label="Property">
                </outline>
                <outline text="unison_voice_count" _note="full path:Live.WavetableDevice.WavetableDevice.unison_voice_count\nReturn the current number of unison voices." type="label" _label="Property">
                </outline>
                <outline text="view" _note="full path:Live.WavetableDevice.WavetableDevice.view\nRepresenting the view aspects of a device." type="label" _label="Property">
                </outline>
                <outline text="visible_modulation_target_names" _note="full path:Live.WavetableDevice.WavetableDevice.visible_modulation_target_names\nGet the names of all the visible modulation targets." type="label" _label="Property">
                </outline>
            </outline>
            <outline text="Listeners">
                <outline text="add_filter_routing_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.add_filter_routing_listener()\nadd_filter_routing_listener( (WavetableDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;filter_routing&quot; has changed. C++ signature :  void add_filter_routing_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_is_active_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.add_is_active_listener()\nadd_is_active_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_active&quot; has changed. C++ signature :  void add_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_modulation_matrix_changed_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.add_modulation_matrix_changed_listener()\nadd_modulation_matrix_changed_listener( (WavetableDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;modulation_matrix_changed&quot; has changed. C++ signature :  void add_modulation_matrix_changed_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_mono_poly_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.add_mono_poly_listener()\nadd_mono_poly_listener( (WavetableDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;mono_poly&quot; has changed. C++ signature :  void add_mono_poly_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_name_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.add_name_listener()\nadd_name_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_oscillator_1_effect_mode_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.add_oscillator_1_effect_mode_listener()\nadd_oscillator_1_effect_mode_listener( (WavetableDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;oscillator_1_effect_mode&quot; has changed. C++ signature :  void add_oscillator_1_effect_mode_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_oscillator_1_wavetable_category_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.add_oscillator_1_wavetable_category_listener()\nadd_oscillator_1_wavetable_category_listener( (WavetableDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;oscillator_1_wavetable_category&quot; has changed. C++ signature :  void add_oscillator_1_wavetable_category_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_oscillator_1_wavetable_index_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.add_oscillator_1_wavetable_index_listener()\nadd_oscillator_1_wavetable_index_listener( (WavetableDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;oscillator_1_wavetable_index&quot; has changed. C++ signature :  void add_oscillator_1_wavetable_index_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_oscillator_1_wavetables_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.add_oscillator_1_wavetables_listener()\nadd_oscillator_1_wavetables_listener( (WavetableDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;oscillator_1_wavetables&quot; has changed. C++ signature :  void add_oscillator_1_wavetables_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_oscillator_2_effect_mode_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.add_oscillator_2_effect_mode_listener()\nadd_oscillator_2_effect_mode_listener( (WavetableDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;oscillator_2_effect_mode&quot; has changed. C++ signature :  void add_oscillator_2_effect_mode_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_oscillator_2_wavetable_category_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.add_oscillator_2_wavetable_category_listener()\nadd_oscillator_2_wavetable_category_listener( (WavetableDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;oscillator_2_wavetable_category&quot; has changed. C++ signature :  void add_oscillator_2_wavetable_category_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_oscillator_2_wavetable_index_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.add_oscillator_2_wavetable_index_listener()\nadd_oscillator_2_wavetable_index_listener( (WavetableDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;oscillator_2_wavetable_index&quot; has changed. C++ signature :  void add_oscillator_2_wavetable_index_listener(TWavetableDevicePyHandle,boost::python::api::object)add_oscillator_2_wavetable_index_listener( (WavetableDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;oscillator_2_wavetable_index&quot; has changed. C++ signature :  void add_oscillator_2_wavetable_index_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_oscillator_2_wavetables_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.add_oscillator_2_wavetables_listener()\nadd_oscillator_2_wavetables_listener( (WavetableDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;oscillator_2_wavetables&quot; has changed. C++ signature :  void add_oscillator_2_wavetables_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_parameters_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.add_parameters_listener()\nadd_parameters_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;parameters&quot; has changed. C++ signature :  void add_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_poly_voices_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.add_poly_voices_listener()\nadd_poly_voices_listener( (WavetableDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;poly_voices&quot; has changed. C++ signature :  void add_poly_voices_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_unison_mode_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.add_unison_mode_listener()\nadd_unison_mode_listener( (WavetableDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;unison_mode&quot; has changed. C++ signature :  void add_unison_mode_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_unison_voice_count_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.add_unison_voice_count_listener()\nadd_unison_voice_count_listener( (WavetableDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;unison_voice_count&quot; has changed. C++ signature :  void add_unison_voice_count_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="add_visible_modulation_target_names_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.add_visible_modulation_target_names_listener()\nadd_visible_modulation_target_names_listener( (WavetableDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;visible_modulation_target_names&quot; has changed. C++ signature :  void add_visible_modulation_target_names_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="filter_routing_has_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.filter_routing_has_listener()\nfilter_routing_has_listener( (WavetableDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;filter_routing&quot;. C++ signature :  bool filter_routing_has_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="is_active_has_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.is_active_has_listener()\nis_active_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_active&quot;. C++ signature :  bool is_active_has_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="modulation_matrix_changed_has_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.modulation_matrix_changed_has_listener()\nmodulation_matrix_changed_has_listener( (WavetableDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;modulation_matrix_changed&quot;. C++ signature :  bool modulation_matrix_changed_has_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="mono_poly_has_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.mono_poly_has_listener()\nmono_poly_has_listener( (WavetableDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;mono_poly&quot;. C++ signature :  bool mono_poly_has_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="name_has_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.name_has_listener()\nname_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="oscillator_1_effect_mode_has_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.oscillator_1_effect_mode_has_listener()\noscillator_1_effect_mode_has_listener( (WavetableDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;oscillator_1_effect_mode&quot;. C++ signature :  bool oscillator_1_effect_mode_has_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="oscillator_1_wavetable_category_has_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.oscillator_1_wavetable_category_has_listener()\noscillator_1_wavetable_category_has_listener( (WavetableDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;oscillator_1_wavetable_category&quot;. C++ signature :  bool oscillator_1_wavetable_category_has_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="oscillator_1_wavetable_index_has_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.oscillator_1_wavetable_index_has_listener()\noscillator_1_wavetable_index_has_listener( (WavetableDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;oscillator_1_wavetable_index&quot;. C++ signature :  bool oscillator_1_wavetable_index_has_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="oscillator_1_wavetables_has_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.oscillator_1_wavetables_has_listener()\noscillator_1_wavetables_has_listener( (WavetableDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;oscillator_1_wavetables&quot;. C++ signature :  bool oscillator_1_wavetables_has_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="oscillator_2_effect_mode_has_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.oscillator_2_effect_mode_has_listener()\noscillator_2_effect_mode_has_listener( (WavetableDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;oscillator_2_effect_mode&quot;. C++ signature :  bool oscillator_2_effect_mode_has_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="oscillator_2_wavetable_category_has_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.oscillator_2_wavetable_category_has_listener()\noscillator_2_wavetable_category_has_listener( (WavetableDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;oscillator_2_wavetable_category&quot;. C++ signature :  bool oscillator_2_wavetable_category_has_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="oscillator_2_wavetable_index_has_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.oscillator_2_wavetable_index_has_listener()\noscillator_2_wavetable_index_has_listener( (WavetableDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;oscillator_2_wavetable_index&quot;. C++ signature :  bool oscillator_2_wavetable_index_has_listener(TWavetableDevicePyHandle,boost::python::api::object)oscillator_2_wavetable_index_has_listener( (WavetableDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;oscillator_2_wavetable_index&quot;. C++ signature :  bool oscillator_2_wavetable_index_has_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="oscillator_2_wavetables_has_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.oscillator_2_wavetables_has_listener()\noscillator_2_wavetables_has_listener( (WavetableDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;oscillator_2_wavetables&quot;. C++ signature :  bool oscillator_2_wavetables_has_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="parameters_has_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.parameters_has_listener()\nparameters_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;parameters&quot;. C++ signature :  bool parameters_has_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="poly_voices_has_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.poly_voices_has_listener()\npoly_voices_has_listener( (WavetableDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;poly_voices&quot;. C++ signature :  bool poly_voices_has_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_filter_routing_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.remove_filter_routing_listener()\nremove_filter_routing_listener( (WavetableDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;filter_routing&quot;. C++ signature :  void remove_filter_routing_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_is_active_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.remove_is_active_listener()\nremove_is_active_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_active&quot;. C++ signature :  void remove_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_modulation_matrix_changed_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.remove_modulation_matrix_changed_listener()\nremove_modulation_matrix_changed_listener( (WavetableDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;modulation_matrix_changed&quot;. C++ signature :  void remove_modulation_matrix_changed_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_mono_poly_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.remove_mono_poly_listener()\nremove_mono_poly_listener( (WavetableDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;mono_poly&quot;. C++ signature :  void remove_mono_poly_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_name_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.remove_name_listener()\nremove_name_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_oscillator_1_effect_mode_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.remove_oscillator_1_effect_mode_listener()\nremove_oscillator_1_effect_mode_listener( (WavetableDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;oscillator_1_effect_mode&quot;. C++ signature :  void remove_oscillator_1_effect_mode_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_oscillator_1_wavetable_category_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.remove_oscillator_1_wavetable_category_listener()\nremove_oscillator_1_wavetable_category_listener( (WavetableDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;oscillator_1_wavetable_category&quot;. C++ signature :  void remove_oscillator_1_wavetable_category_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_oscillator_1_wavetable_index_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.remove_oscillator_1_wavetable_index_listener()\nremove_oscillator_1_wavetable_index_listener( (WavetableDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;oscillator_1_wavetable_index&quot;. C++ signature :  void remove_oscillator_1_wavetable_index_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_oscillator_1_wavetables_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.remove_oscillator_1_wavetables_listener()\nremove_oscillator_1_wavetables_listener( (WavetableDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;oscillator_1_wavetables&quot;. C++ signature :  void remove_oscillator_1_wavetables_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_oscillator_2_effect_mode_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.remove_oscillator_2_effect_mode_listener()\nremove_oscillator_2_effect_mode_listener( (WavetableDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;oscillator_2_effect_mode&quot;. C++ signature :  void remove_oscillator_2_effect_mode_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_oscillator_2_wavetable_category_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.remove_oscillator_2_wavetable_category_listener()\nremove_oscillator_2_wavetable_category_listener( (WavetableDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;oscillator_2_wavetable_category&quot;. C++ signature :  void remove_oscillator_2_wavetable_category_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_oscillator_2_wavetable_index_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.remove_oscillator_2_wavetable_index_listener()\nremove_oscillator_2_wavetable_index_listener( (WavetableDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;oscillator_2_wavetable_index&quot;. C++ signature :  void remove_oscillator_2_wavetable_index_listener(TWavetableDevicePyHandle,boost::python::api::object)remove_oscillator_2_wavetable_index_listener( (WavetableDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;oscillator_2_wavetable_index&quot;. C++ signature :  void remove_oscillator_2_wavetable_index_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_oscillator_2_wavetables_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.remove_oscillator_2_wavetables_listener()\nremove_oscillator_2_wavetables_listener( (WavetableDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;oscillator_2_wavetables&quot;. C++ signature :  void remove_oscillator_2_wavetables_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_parameters_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.remove_parameters_listener()\nremove_parameters_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;parameters&quot;. C++ signature :  void remove_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_poly_voices_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.remove_poly_voices_listener()\nremove_poly_voices_listener( (WavetableDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;poly_voices&quot;. C++ signature :  void remove_poly_voices_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_unison_mode_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.remove_unison_mode_listener()\nremove_unison_mode_listener( (WavetableDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;unison_mode&quot;. C++ signature :  void remove_unison_mode_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_unison_voice_count_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.remove_unison_voice_count_listener()\nremove_unison_voice_count_listener( (WavetableDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;unison_voice_count&quot;. C++ signature :  void remove_unison_voice_count_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="remove_visible_modulation_target_names_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.remove_visible_modulation_target_names_listener()\nremove_visible_modulation_target_names_listener( (WavetableDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;visible_modulation_target_names&quot;. C++ signature :  void remove_visible_modulation_target_names_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="unison_mode_has_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.unison_mode_has_listener()\nunison_mode_has_listener( (WavetableDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;unison_mode&quot;. C++ signature :  bool unison_mode_has_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="unison_voice_count_has_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.unison_voice_count_has_listener()\nunison_voice_count_has_listener( (WavetableDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;unison_voice_count&quot;. C++ signature :  bool unison_voice_count_has_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
                <outline text="visible_modulation_target_names_has_listener()" _note="full path:Live.WavetableDevice.WavetableDevice.visible_modulation_target_names_has_listener()\nvisible_modulation_target_names_has_listener( (WavetableDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;visible_modulation_target_names&quot;. C++ signature :  bool visible_modulation_target_names_has_listener(TWavetableDevicePyHandle,boost::python::api::object)" type="label" _label="listener Method">
                </outline>
            </outline>
            <outline text="Methods">
                <outline text="add_parameter_to_modulation_matrix()" _note="full path:Live.WavetableDevice.WavetableDevice.add_parameter_to_modulation_matrix()\nadd_parameter_to_modulation_matrix( (WavetableDevice)self, (DeviceParameter)parameter) -> int : Add a non-pitch parameter to the modulation matrix. C++ signature :  int add_parameter_to_modulation_matrix(TWavetableDevicePyHandle,TPyHandle<ATimeableValue>)" type="label" _label="Method">
                </outline>
                <outline text="get_modulation_target_parameter_name()" _note="full path:Live.WavetableDevice.WavetableDevice.get_modulation_target_parameter_name()\nget_modulation_target_parameter_name( (WavetableDevice)self, (int)target_index) -> unicode : Get the parameter name of the modulation target at the given index. C++ signature :  TString get_modulation_target_parameter_name(TWavetableDevicePyHandle,int)" type="label" _label="Method">
                </outline>
                <outline text="get_modulation_value()" _note="full path:Live.WavetableDevice.WavetableDevice.get_modulation_value()\nget_modulation_value( (WavetableDevice)self, (int)target_index, (int)source) -> float : Get the value of a modulation amount for the given target-source connection. C++ signature :  float get_modulation_value(TWavetableDevicePyHandle,int,int)" type="label" _label="Method">
                </outline>
                <outline text="is_parameter_modulatable()" _note="full path:Live.WavetableDevice.WavetableDevice.is_parameter_modulatable()\nis_parameter_modulatable( (WavetableDevice)self, (DeviceParameter)parameter) -> bool : Indicate whether the parameter is modulatable. Note that pitch parameters only exist in python and must be handled there. C++ signature :  bool is_parameter_modulatable(TWavetableDevicePyHandle,TPyHandle<ATimeableValue>)" type="label" _label="Method">
                </outline>
                <outline text="set_modulation_value()" _note="full path:Live.WavetableDevice.WavetableDevice.set_modulation_value()\nset_modulation_value( (WavetableDevice)self, (int)target_index, (int)source, (float)value) -> None : Set the value of a modulation amount for the given target-source connection. C++ signature :  void set_modulation_value(TWavetableDevicePyHandle,int,int,float)" type="label" _label="Method">
                </outline>
                <outline text="store_chosen_bank()" _note="full path:Live.WavetableDevice.WavetableDevice.store_chosen_bank()\nstore_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -> None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle<ADevice>,int,int)" type="label" _label="Method">
                </outline>
            </outline>
        </outline>
    </outline>
</outline>
</body>
</opml>