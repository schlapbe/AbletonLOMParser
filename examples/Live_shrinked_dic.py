dic = [ 
{'ref': 0, 'tag': 'Module', 'name': 'Live', 'description': None, 'path': ['Live'], 'hierarchy': 0, 'ref_parent': None, 'children': [1], 'group': None, 'listener_ref': None},
{'ref': 1, 'tag': 'Module', 'name': 'Live.Track', 'description': None, 'path': ['Live', 'Track'], 'hierarchy': 1, 'ref_parent': 0, 'children': [2], 'group': None, 'listener_ref': None},
{'ref': 2, 'tag': 'Class', 'name': 'Live.Track.Track', 'description': 'This class represents a track in Live. It can be either an Audio track, a MIDI Track, a Return Track or the Master track. The Master Track and at least one Audio or MIDI track will be always present.Return Tracks are optional.', 'path': ['Live', 'Track', 'Track'], 'hierarchy': 2, 'ref_parent': 1, 'children': [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 'group': None, 'listener_ref': None},
{'ref': 9, 'tag': 'Value', 'name': 'Live.Track.Track.available_input_routing_channels', 'description': 'Return a list of source channels for input routing.', 'path': ['Live', 'Track', 'Track', 'available_input_routing_channels'], 'hierarchy': 3, 'ref_parent': 2, 'children': [], 'group': 'Value', 'listener_ref': None},
{'ref': 10, 'tag': 'Method', 'name': 'Live.Track.Track.get_data()', 'description': 'get_data( (Track)arg1, (object)key, (object)default_value) -&gt; object : Get data for the given key, that was previously stored using set_data. C++ signature :  boost::python::api::object get_data(TTrackPyHandle,TString,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'get_data()'], 'hierarchy': 3, 'ref_parent': 2, 'children': [], 'group': 'Method', 'listener_ref': None},
{'ref': 11, 'tag': 'Value', 'name': 'Live.Track.Track.group_track', 'description': 'return the group track if is_grouped.', 'path': ['Live', 'Track', 'Track', 'group_track'], 'hierarchy': 3, 'ref_parent': 2, 'children': [], 'group': 'Value', 'listener_ref': None},
{'ref': 12, 'tag': 'Value', 'name': 'Live.Track.Track.has_audio_input', 'description': 'return True, if this Track can be feed with an Audio signal. This istrue for all Audio Tracks.', 'path': ['Live', 'Track', 'Track', 'has_audio_input'], 'hierarchy': 3, 'ref_parent': 2, 'children': [], 'group': 'Value', 'listener_ref': None},
{'ref': 16, 'tag': 'Listener', 'name': 'arm', 'description': 'add_arm_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property &quot;arm&quot; has changed. C++ signature :  void add_arm_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_arm_listener()'], 'hierarchy': 3, 'ref_parent': 2, 'children': None, 'group': 'Listener', 'listener_ref': [3, 6, 13]},
{'ref': 17, 'tag': 'Listener', 'name': 'arrangement_clips', 'description': 'add_arrangement_clips_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property &quot;arrangement_clips&quot; has changed. C++ signature :  void add_arrangement_clips_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_arrangement_clips_listener()'], 'hierarchy': 3, 'ref_parent': 2, 'children': None, 'group': 'Listener', 'listener_ref': [4, 7, 14]},
{'ref': 18, 'tag': 'Listener', 'name': 'available_input_routing_channels', 'description': 'add_available_input_routing_channels_listener( (Track)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property &quot;available_input_routing_channels&quot; has changed. C++ signature :  void add_available_input_routing_channels_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_available_input_routing_channels_listener()'], 'hierarchy': 3, 'ref_parent': 2, 'children': None, 'group': 'Listener', 'listener_ref': [5, 8, 15]},
] 
