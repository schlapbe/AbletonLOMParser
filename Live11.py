dic=[{'ref': 0, 'tag': 'Module', 'name': 'Live', 'description': None, 'path': ['Live'], 'hirachy': 0, 'ref_parent': None, 'children': [1, 67, 90, 153, 195, 206, 458, 505, 551, 563, 601, 622, 661, 711, 733, 786, 818, 825, 884, 893, 896, 949, 985, 1016, 1055, 1144, 1259, 1288, 1413, 1729, 1976, 2054], 'group': None}, {'ref': 1, 'tag': 'Module', 'name': 'Live.Application', 'description': None, 'path': ['Live', 'Application'], 'hirachy': 1, 'ref_parent': 0, 'children': [2, 3, 4, 5, 6, 7, 62, 64], 'group': None}, {'ref': 2, 'tag': 'Built-In', 'name': 'Live.Application.combine_apcs()', 'description': 'combine_apcs() -> bool : Returns true if multiple APCs should be combined. C++ signature :  bool combine_apcs()', 'path': ['Live', 'Application', 'combine_apcs()'], 'hirachy': 2, 'ref_parent': 1, 'children': [], 'group': None}, {'ref': 3, 'tag': 'Built-In', 'name': 'Live.Application.encrypt_challenge()', 'description': 'encrypt_challenge( (int)dongle1, (int)dongle2 [, (int)key_index=0]) -> tuple : Returns an encrypted challenge based on the TEA algortithm C++ signature :  boost::python::tuple encrypt_challenge(int,int [,int=0])', 'path': ['Live', 'Application', 'encrypt_challenge()'], 'hirachy': 2, 'ref_parent': 1, 'children': [], 'group': None}, {'ref': 4, 'tag': 'Built-In', 'name': 'Live.Application.encrypt_challenge2()', 'description': 'encrypt_challenge2( (int)arg1) -> int : Returns the UMAC hash for the given challenge. C++ signature :  int encrypt_challenge2(int)', 'path': ['Live', 'Application', 'encrypt_challenge2()'], 'hirachy': 2, 'ref_parent': 1, 'children': [], 'group': None}, {'ref': 5, 'tag': 'Built-In', 'name': 'Live.Application.get_application()', 'description': 'get_application() -> Application : Returns the application instance. C++ signature :  TWeakPtr<TPyHandle<ASongApp> > get_application()', 'path': ['Live', 'Application', 'get_application()'], 'hirachy': 2, 'ref_parent': 1, 'children': [], 'group': None}, {'ref': 6, 'tag': 'Built-In', 'name': 'Live.Application.get_random_int()', 'description': 'get_random_int( (int)arg1, (int)arg2) -> int : Returns a random integer from the given range. C++ signature :  int get_random_int(int,int)', 'path': ['Live', 'Application', 'get_random_int()'], 'hirachy': 2, 'ref_parent': 1, 'children': [], 'group': None}, {'ref': 7, 'tag': 'Class', 'name': 'Live.Application.Application', 'description': 'This class represents the Live application.', 'path': ['Live', 'Application', 'Application'], 'hirachy': 2, 'ref_parent': 1, 'children': [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], 'group': None}, {'ref': 8, 'tag': 'Property', 'name': 'Live.Application.Application._live_ptr', 'description': None, 'path': ['Live', 'Application', 'Application', '_live_ptr'], 'hirachy': 3, 'ref_parent': 7, 'children': [], 'group': 'Property'}, {'ref': 9, 'tag': 'Property', 'name': 'Live.Application.Application.browser', 'description': 'Returns an interface to the browser.', 'path': ['Live', 'Application', 'Application', 'browser'], 'hirachy': 3, 'ref_parent': 7, 'children': [], 'group': 'Property'}, {'ref': 10, 'tag': 'Property', 'name': 'Live.Application.Application.canonical_parent', 'description': 'Returns the canonical parent of the application.', 'path': ['Live', 'Application', 'Application', 'canonical_parent'], 'hirachy': 3, 'ref_parent': 7, 'children': [], 'group': 'Property'}, {'ref': 11, 'tag': 'Property', 'name': 'Live.Application.Application.control_surfaces', 'description': 'Const access to a list of the control surfaces selected in preferences, in the same order.The list contains None if no control surface is active at that index.', 'path': ['Live', 'Application', 'Application', 'control_surfaces'], 'hirachy': 3, 'ref_parent': 7, 'children': [], 'group': 'Property'}, {'ref': 12, 'tag': 'Property', 'name': 'Live.Application.Application.current_dialog_button_count', 'description': 'Number of buttons on the current dialog.', 'path': ['Live', 'Application', 'Application', 'current_dialog_button_count'], 'hirachy': 3, 'ref_parent': 7, 'children': [], 'group': 'Property'}, {'ref': 13, 'tag': 'Property', 'name': 'Live.Application.Application.current_dialog_message', 'description': 'Text of the last dialog that appeared; Empty if all dialogs just disappeared.', 'path': ['Live', 'Application', 'Application', 'current_dialog_message'], 'hirachy': 3, 'ref_parent': 7, 'children': [], 'group': 'Property'}, {'ref': 14, 'tag': 'Property', 'name': 'Live.Application.Application.open_dialog_count', 'description': 'The number of open dialogs in Live. 0 if not dialog is open.', 'path': ['Live', 'Application', 'Application', 'open_dialog_count'], 'hirachy': 3, 'ref_parent': 7, 'children': [], 'group': 'Property'}, {'ref': 15, 'tag': 'Property', 'name': 'Live.Application.Application.unavailable_features', 'description': 'List of features that are unavailable due to limitations of the current Live edition.', 'path': ['Live', 'Application', 'Application', 'unavailable_features'], 'hirachy': 3, 'ref_parent': 7, 'children': [], 'group': 'Property'}, {'ref': 16, 'tag': 'Property', 'name': 'Live.Application.Application.view', 'description': 'Returns the applications view component.', 'path': ['Live', 'Application', 'Application', 'view'], 'hirachy': 3, 'ref_parent': 7, 'children': [], 'group': 'Property'}, {'ref': 17, 'tag': 'listener Method', 'name': 'Live.Application.Application.add_control_surfaces_listener()', 'description': 'add_control_surfaces_listener( (Application)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;control_surfaces&quot; has changed. C++ signature :  void add_control_surfaces_listener(TPyHandle<ASongApp>,boost::python::api::object)', 'path': ['Live', 'Application', 'Application', 'add_control_surfaces_listener()'], 'hirachy': 3, 'ref_parent': 7, 'children': [], 'group': 'listener Method'}, {'ref': 18, 'tag': 'listener Method', 'name': 'Live.Application.Application.add_open_dialog_count_listener()', 'description': 'add_open_dialog_count_listener( (Application)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;open_dialog_count&quot; has changed. C++ signature :  void add_open_dialog_count_listener(TPyHandle<ASongApp>,boost::python::api::object)', 'path': ['Live', 'Application', 'Application', 'add_open_dialog_count_listener()'], 'hirachy': 3, 'ref_parent': 7, 'children': [], 'group': 'listener Method'}, {'ref': 19, 'tag': 'listener Method', 'name': 'Live.Application.Application.add_unavailable_features_listener()', 'description': 'add_unavailable_features_listener( (Application)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;unavailable_features&quot; has changed. C++ signature :  void add_unavailable_features_listener(TPyHandle<ASongApp>,boost::python::api::object)', 'path': ['Live', 'Application', 'Application', 'add_unavailable_features_listener()'], 'hirachy': 3, 'ref_parent': 7, 'children': [], 'group': 'listener Method'}, {'ref': 20, 'tag': 'listener Method', 'name': 'Live.Application.Application.control_surfaces_has_listener()', 'description': 'control_surfaces_has_listener( (Application)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;control_surfaces&quot;. C++ signature :  bool control_surfaces_has_listener(TPyHandle<ASongApp>,boost::python::api::object)', 'path': ['Live', 'Application', 'Application', 'control_surfaces_has_listener()'], 'hirachy': 3, 'ref_parent': 7, 'children': [], 'group': 'listener Method'}, {'ref': 21, 'tag': 'Method', 'name': 'Live.Application.Application.get_bugfix_version()', 'description': 'get_bugfix_version( (Application)arg1) -> int : Returns an integer representing the bugfix version of Live. C++ signature :  int get_bugfix_version(TPyHandle<ASongApp>)', 'path': ['Live', 'Application', 'Application', 'get_bugfix_version()'], 'hirachy': 3, 'ref_parent': 7, 'children': [], 'group': 'Method'}, {'ref': 22, 'tag': 'Method', 'name': 'Live.Application.Application.get_document()', 'description': 'get_document( (Application)arg1) -> Song : Returns the current Live Set. C++ signature :  TWeakPtr<TPyHandle<ASong> > get_document(TPyHandle<ASongApp>)', 'path': ['Live', 'Application', 'Application', 'get_document()'], 'hirachy': 3, 'ref_parent': 7, 'children': [], 'group': 'Method'}, {'ref': 23, 'tag': 'Method', 'name': 'Live.Application.Application.get_major_version()', 'description': 'get_major_version( (Application)arg1) -> int : Returns an integer representing the major version of Live. C++ signature :  int get_major_version(TPyHandle<ASongApp>)', 'path': ['Live', 'Application', 'Application', 'get_major_version()'], 'hirachy': 3, 'ref_parent': 7, 'children': [], 'group': 'Method'}, {'ref': 24, 'tag': 'Method', 'name': 'Live.Application.Application.get_minor_version()', 'description': 'get_minor_version( (Application)arg1) -> int : Returns an integer representing the minor version of Live. C++ signature :  int get_minor_version(TPyHandle<ASongApp>)', 'path': ['Live', 'Application', 'Application', 'get_minor_version()'], 'hirachy': 3, 'ref_parent': 7, 'children': [], 'group': 'Method'}, {'ref': 25, 'tag': 'Method', 'name': 'Live.Application.Application.has_option()', 'description': 'has_option( (Application)arg1, (object)arg2) -> bool : Returns True if the given entry exists in Options.txt, False otherwise. C++ signature :  bool has_option(TPyHandle<ASongApp>,TString)', 'path': ['Live', 'Application', 'Application', 'has_option()'], 'hirachy': 3, 'ref_parent': 7, 'children': [], 'group': 'Method'}, {'ref': 26, 'tag': 'listener Method', 'name': 'Live.Application.Application.open_dialog_count_has_listener()', 'description': 'open_dialog_count_has_listener( (Application)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;open_dialog_count&quot;. C++ signature :  bool open_dialog_count_has_listener(TPyHandle<ASongApp>,boost::python::api::object)', 'path': ['Live', 'Application', 'Application', 'open_dialog_count_has_listener()'], 'hirachy': 3, 'ref_parent': 7, 'children': [], 'group': 'listener Method'}, {'ref': 27, 'tag': 'Method', 'name': 'Live.Application.Application.press_current_dialog_button()', 'description': 'press_current_dialog_button( (Application)arg1, (int)arg2) -> None : Press a button, by index, on the current message box. C++ signature :  void press_current_dialog_button(TPyHandle<ASongApp>,int)', 'path': ['Live', 'Application', 'Application', 'press_current_dialog_button()'], 'hirachy': 3, 'ref_parent': 7, 'children': [], 'group': 'Method'}, {'ref': 28, 'tag': 'listener Method', 'name': 'Live.Application.Application.remove_control_surfaces_listener()', 'description': 'remove_control_surfaces_listener( (Application)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;control_surfaces&quot;. C++ signature :  void remove_control_surfaces_listener(TPyHandle<ASongApp>,boost::python::api::object)', 'path': ['Live', 'Application', 'Application', 'remove_control_surfaces_listener()'], 'hirachy': 3, 'ref_parent': 7, 'children': [], 'group': 'listener Method'}, {'ref': 29, 'tag': 'listener Method', 'name': 'Live.Application.Application.remove_open_dialog_count_listener()', 'description': 'remove_open_dialog_count_listener( (Application)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;open_dialog_count&quot;. C++ signature :  void remove_open_dialog_count_listener(TPyHandle<ASongApp>,boost::python::api::object)', 'path': ['Live', 'Application', 'Application', 'remove_open_dialog_count_listener()'], 'hirachy': 3, 'ref_parent': 7, 'children': [], 'group': 'listener Method'}, {'ref': 30, 'tag': 'listener Method', 'name': 'Live.Application.Application.remove_unavailable_features_listener()', 'description': 'remove_unavailable_features_listener( (Application)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;unavailable_features&quot;. C++ signature :  void remove_unavailable_features_listener(TPyHandle<ASongApp>,boost::python::api::object)', 'path': ['Live', 'Application', 'Application', 'remove_unavailable_features_listener()'], 'hirachy': 3, 'ref_parent': 7, 'children': [], 'group': 'listener Method'}, {'ref': 31, 'tag': 'listener Method', 'name': 'Live.Application.Application.unavailable_features_has_listener()', 'description': 'unavailable_features_has_listener( (Application)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;unavailable_features&quot;. C++ signature :  bool unavailable_features_has_listener(TPyHandle<ASongApp>,boost::python::api::object)', 'path': ['Live', 'Application', 'Application', 'unavailable_features_has_listener()'], 'hirachy': 3, 'ref_parent': 7, 'children': [], 'group': 'listener Method'}, {'ref': 32, 'tag': 'Class', 'name': 'Live.Application.Application.View', 'description': 'This class represents the view aspects of the Live application.', 'path': ['Live', 'Application', 'Application', 'View'], 'hirachy': 3, 'ref_parent': 7, 'children': [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], 'group': None}, {'ref': 33, 'tag': 'Property', 'name': 'Live.Application.Application.View._live_ptr', 'description': None, 'path': ['Live', 'Application', 'Application', 'View', '_live_ptr'], 'hirachy': 4, 'ref_parent': 32, 'children': [], 'group': 'Property'}, {'ref': 34, 'tag': 'Property', 'name': 'Live.Application.Application.View.browse_mode', 'description': 'Return true if HotSwap mode is active for any target.', 'path': ['Live', 'Application', 'Application', 'View', 'browse_mode'], 'hirachy': 4, 'ref_parent': 32, 'children': [], 'group': 'Property'}, {'ref': 35, 'tag': 'Property', 'name': 'Live.Application.Application.View.canonical_parent', 'description': 'Get the canonical parent of the application view.', 'path': ['Live', 'Application', 'Application', 'View', 'canonical_parent'], 'hirachy': 4, 'ref_parent': 32, 'children': [], 'group': 'Property'}, {'ref': 36, 'tag': 'Property', 'name': 'Live.Application.Application.View.focused_document_view', 'description': "Return the name of the document view ('Session' or 'Arranger')shown in the currently selected window.", 'path': ['Live', 'Application', 'Application', 'View', 'focused_document_view'], 'hirachy': 4, 'ref_parent': 32, 'children': [], 'group': 'Property'}, {'ref': 37, 'tag': 'listener Method', 'name': 'Live.Application.Application.View.add_browse_mode_listener()', 'description': 'add_browse_mode_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;browse_mode&quot; has changed. C++ signature :  void add_browse_mode_listener(TPyViewData<ASongApp>,boost::python::api::object)', 'path': ['Live', 'Application', 'Application', 'View', 'add_browse_mode_listener()'], 'hirachy': 4, 'ref_parent': 32, 'children': [], 'group': 'listener Method'}, {'ref': 38, 'tag': 'listener Method', 'name': 'Live.Application.Application.View.add_focused_document_view_listener()', 'description': 'add_focused_document_view_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;focused_document_view&quot; has changed. C++ signature :  void add_focused_document_view_listener(TPyViewData<ASongApp>,boost::python::api::object)', 'path': ['Live', 'Application', 'Application', 'View', 'add_focused_document_view_listener()'], 'hirachy': 4, 'ref_parent': 32, 'children': [], 'group': 'listener Method'}, {'ref': 39, 'tag': 'listener Method', 'name': 'Live.Application.Application.View.add_is_view_visible_listener()', 'description': 'add_is_view_visible_listener( (View)arg1, (object)arg2, (object)arg3) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_view_visible&quot; has changed. C++ signature :  void add_is_view_visible_listener(TPyViewData<ASongApp>,TString,boost::python::api::object)', 'path': ['Live', 'Application', 'Application', 'View', 'add_is_view_visible_listener()'], 'hirachy': 4, 'ref_parent': 32, 'children': [], 'group': 'listener Method'}, {'ref': 40, 'tag': 'listener Method', 'name': 'Live.Application.Application.View.add_view_focus_changed_listener()', 'description': 'add_view_focus_changed_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;view_focus_changed&quot; has changed. C++ signature :  void add_view_focus_changed_listener(TPyViewData<ASongApp>,boost::python::api::object)', 'path': ['Live', 'Application', 'Application', 'View', 'add_view_focus_changed_listener()'], 'hirachy': 4, 'ref_parent': 32, 'children': [], 'group': 'listener Method'}, {'ref': 41, 'tag': 'Method', 'name': 'Live.Application.Application.View.available_main_views()', 'description': "available_main_views( (View)arg1) -> StringVector : Return a list of strings with the available subcomponent views, which is to be specified, when using the rest of this classes functions. A 'subcomponent view' is a main view component of a document view, like the Session view, the Arranger or Detailview and so on... C++ signature :  std::__1::vector<TString, std::__1::allocator<TString> > available_main_views(TPyViewData<ASongApp>)", 'path': ['Live', 'Application', 'Application', 'View', 'available_main_views()'], 'hirachy': 4, 'ref_parent': 32, 'children': [], 'group': 'Method'}, {'ref': 42, 'tag': 'listener Method', 'name': 'Live.Application.Application.View.browse_mode_has_listener()', 'description': 'browse_mode_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;browse_mode&quot;. C++ signature :  bool browse_mode_has_listener(TPyViewData<ASongApp>,boost::python::api::object)', 'path': ['Live', 'Application', 'Application', 'View', 'browse_mode_has_listener()'], 'hirachy': 4, 'ref_parent': 32, 'children': [], 'group': 'listener Method'}, {'ref': 43, 'tag': 'Method', 'name': 'Live.Application.Application.View.focus_view()', 'description': 'focus_view( (View)arg1, (object)arg2) -> None : Show and focus one through the identifier string specified view. C++ signature :  void focus_view(TPyViewData<ASongApp>,TString)', 'path': ['Live', 'Application', 'Application', 'View', 'focus_view()'], 'hirachy': 4, 'ref_parent': 32, 'children': [], 'group': 'Method'}, {'ref': 44, 'tag': 'listener Method', 'name': 'Live.Application.Application.View.focused_document_view_has_listener()', 'description': 'focused_document_view_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;focused_document_view&quot;. C++ signature :  bool focused_document_view_has_listener(TPyViewData<ASongApp>,boost::python::api::object)', 'path': ['Live', 'Application', 'Application', 'View', 'focused_document_view_has_listener()'], 'hirachy': 4, 'ref_parent': 32, 'children': [], 'group': 'listener Method'}, {'ref': 45, 'tag': 'Method', 'name': 'Live.Application.Application.View.hide_view()', 'description': 'hide_view( (View)arg1, (object)arg2) -> None : Hide one through the identifier string specified view. C++ signature :  void hide_view(TPyViewData<ASongApp>,TString)', 'path': ['Live', 'Application', 'Application', 'View', 'hide_view()'], 'hirachy': 4, 'ref_parent': 32, 'children': [], 'group': 'Method'}, {'ref': 46, 'tag': 'Method', 'name': 'Live.Application.Application.View.is_view_visible()', 'description': 'is_view_visible( (View)arg1, (object)identifier [, (bool)main_window_only=True]) -> bool : Return true if the through the identifier string specified view is currently visible. If main_window_only is set to False, this will also check in second window. Notifications from the second window are not yet supported. C++ signature :  bool is_view_visible(TPyViewData<ASongApp>,TString [,bool=True])', 'path': ['Live', 'Application', 'Application', 'View', 'is_view_visible()'], 'hirachy': 4, 'ref_parent': 32, 'children': [], 'group': 'Method'}, {'ref': 47, 'tag': 'listener Method', 'name': 'Live.Application.Application.View.is_view_visible_has_listener()', 'description': 'is_view_visible_has_listener( (View)arg1, (object)arg2, (object)arg3) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_view_visible&quot;. C++ signature :  bool is_view_visible_has_listener(TPyViewData<ASongApp>,TString,boost::python::api::object)', 'path': ['Live', 'Application', 'Application', 'View', 'is_view_visible_has_listener()'], 'hirachy': 4, 'ref_parent': 32, 'children': [], 'group': 'listener Method'}, {'ref': 48, 'tag': 'listener Method', 'name': 'Live.Application.Application.View.remove_browse_mode_listener()', 'description': 'remove_browse_mode_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;browse_mode&quot;. C++ signature :  void remove_browse_mode_listener(TPyViewData<ASongApp>,boost::python::api::object)', 'path': ['Live', 'Application', 'Application', 'View', 'remove_browse_mode_listener()'], 'hirachy': 4, 'ref_parent': 32, 'children': [], 'group': 'listener Method'}, {'ref': 49, 'tag': 'listener Method', 'name': 'Live.Application.Application.View.remove_focused_document_view_listener()', 'description': 'remove_focused_document_view_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;focused_document_view&quot;. C++ signature :  void remove_focused_document_view_listener(TPyViewData<ASongApp>,boost::python::api::object)', 'path': ['Live', 'Application', 'Application', 'View', 'remove_focused_document_view_listener()'], 'hirachy': 4, 'ref_parent': 32, 'children': [], 'group': 'listener Method'}, {'ref': 50, 'tag': 'listener Method', 'name': 'Live.Application.Application.View.remove_is_view_visible_listener()', 'description': 'remove_is_view_visible_listener( (View)arg1, (object)arg2, (object)arg3) -> None : Remove a previously set listener function or method from property &quot;is_view_visible&quot;. C++ signature :  void remove_is_view_visible_listener(TPyViewData<ASongApp>,TString,boost::python::api::object)', 'path': ['Live', 'Application', 'Application', 'View', 'remove_is_view_visible_listener()'], 'hirachy': 4, 'ref_parent': 32, 'children': [], 'group': 'listener Method'}, {'ref': 51, 'tag': 'listener Method', 'name': 'Live.Application.Application.View.remove_view_focus_changed_listener()', 'description': 'remove_view_focus_changed_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;view_focus_changed&quot;. C++ signature :  void remove_view_focus_changed_listener(TPyViewData<ASongApp>,boost::python::api::object)', 'path': ['Live', 'Application', 'Application', 'View', 'remove_view_focus_changed_listener()'], 'hirachy': 4, 'ref_parent': 32, 'children': [], 'group': 'listener Method'}, {'ref': 52, 'tag': 'Method', 'name': 'Live.Application.Application.View.scroll_view()', 'description': 'scroll_view( (View)arg1, (int)arg2, (object)arg3, (bool)arg4) -> None : Scroll through the identifier string specified view into the given direction, if possible.  Will silently return if the specified view can not perform the requested action. C++ signature :  void scroll_view(TPyViewData<ASongApp>,int,TString,bool)', 'path': ['Live', 'Application', 'Application', 'View', 'scroll_view()'], 'hirachy': 4, 'ref_parent': 32, 'children': [], 'group': 'Method'}, {'ref': 53, 'tag': 'Method', 'name': 'Live.Application.Application.View.show_view()', 'description': "show_view( (View)arg1, (object)arg2) -> None : Show one through the identifier string specified view. Will throw a runtime error if this is called in Live's initialization scope. C++ signature :  void show_view(TPyViewData<ASongApp>,TString)", 'path': ['Live', 'Application', 'Application', 'View', 'show_view()'], 'hirachy': 4, 'ref_parent': 32, 'children': [], 'group': 'Method'}, {'ref': 54, 'tag': 'Method', 'name': 'Live.Application.Application.View.toggle_browse()', 'description': 'toggle_browse( (View)arg1) -> None : Reveals the device chain, the browser and starts hot swap for the selected device. Calling this function again stops hot swap. C++ signature :  void toggle_browse(TPyViewData<ASongApp>)', 'path': ['Live', 'Application', 'Application', 'View', 'toggle_browse()'], 'hirachy': 4, 'ref_parent': 32, 'children': [], 'group': 'Method'}, {'ref': 55, 'tag': 'listener Method', 'name': 'Live.Application.Application.View.view_focus_changed_has_listener()', 'description': 'view_focus_changed_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;view_focus_changed&quot;. C++ signature :  bool view_focus_changed_has_listener(TPyViewData<ASongApp>,boost::python::api::object)', 'path': ['Live', 'Application', 'Application', 'View', 'view_focus_changed_has_listener()'], 'hirachy': 4, 'ref_parent': 32, 'children': [], 'group': 'listener Method'}, {'ref': 56, 'tag': 'Method', 'name': 'Live.Application.Application.View.zoom_view()', 'description': 'zoom_view( (View)arg1, (int)arg2, (object)arg3, (bool)arg4) -> None : Zoom through the identifier string specified view into the given direction, if possible.  Will silently return if the specified view can not perform the requested action. C++ signature :  void zoom_view(TPyViewData<ASongApp>,int,TString,bool)', 'path': ['Live', 'Application', 'Application', 'View', 'zoom_view()'], 'hirachy': 4, 'ref_parent': 32, 'children': [], 'group': 'Method'}, {'ref': 57, 'tag': 'Sub-Class', 'name': 'Live.Application.Application.View.NavDirection', 'description': None, 'path': ['Live', 'Application', 'Application', 'View', 'NavDirection'], 'hirachy': 4, 'ref_parent': 32, 'children': [58, 59, 60, 61], 'group': None}, {'ref': 58, 'tag': 'Value', 'name': 'Live.Application.Application.View.NavDirection.down', 'description': None, 'path': ['Live', 'Application', 'Application', 'View', 'NavDirection', 'down'], 'hirachy': 5, 'ref_parent': 57, 'children': [], 'group': 'Value'}, {'ref': 59, 'tag': 'Value', 'name': 'Live.Application.Application.View.NavDirection.left', 'description': None, 'path': ['Live', 'Application', 'Application', 'View', 'NavDirection', 'left'], 'hirachy': 5, 'ref_parent': 57, 'children': [], 'group': 'Value'}, {'ref': 60, 'tag': 'Value', 'name': 'Live.Application.Application.View.NavDirection.right', 'description': None, 'path': ['Live', 'Application', 'Application', 'View', 'NavDirection', 'right'], 'hirachy': 5, 'ref_parent': 57, 'children': [], 'group': 'Value'}, {'ref': 61, 'tag': 'Value', 'name': 'Live.Application.Application.View.NavDirection.up', 'description': None, 'path': ['Live', 'Application', 'Application', 'View', 'NavDirection', 'up'], 'hirachy': 5, 'ref_parent': 57, 'children': [], 'group': 'Value'}, {'ref': 62, 'tag': 'Class', 'name': 'Live.Application.UnavailableFeature', 'description': None, 'path': ['Live', 'Application', 'UnavailableFeature'], 'hirachy': 2, 'ref_parent': 1, 'children': [63], 'group': None}, {'ref': 63, 'tag': 'Value', 'name': 'Live.Application.UnavailableFeature.note_velocity_ranges_and_probabilities', 'description': None, 'path': ['Live', 'Application', 'UnavailableFeature', 'note_velocity_ranges_and_probabilities'], 'hirachy': 3, 'ref_parent': 62, 'children': [], 'group': 'Value'}, {'ref': 64, 'tag': 'Class', 'name': 'Live.Application.UnavailableFeatureVector', 'description': 'A container for returning unavailable features.', 'path': ['Live', 'Application', 'UnavailableFeatureVector'], 'hirachy': 2, 'ref_parent': 1, 'children': [65, 66], 'group': None}, {'ref': 65, 'tag': 'Method', 'name': 'Live.Application.UnavailableFeatureVector.append()', 'description': 'append( (UnavailableFeatureVector)arg1, (object)arg2) -> None : C++ signature :  void append(std::__1::vector<NPythonApplication::TUnavailableFeature, std::__1::allocator<NPythonApplication::TUnavailableFeature> > {lvalue},boost::python::api::object)', 'path': ['Live', 'Application', 'UnavailableFeatureVector', 'append()'], 'hirachy': 3, 'ref_parent': 64, 'children': [], 'group': 'Method'}, {'ref': 66, 'tag': 'Method', 'name': 'Live.Application.UnavailableFeatureVector.extend()', 'description': 'extend( (UnavailableFeatureVector)arg1, (object)arg2) -> None : C++ signature :  void extend(std::__1::vector<NPythonApplication::TUnavailableFeature, std::__1::allocator<NPythonApplication::TUnavailableFeature> > {lvalue},boost::python::api::object)', 'path': ['Live', 'Application', 'UnavailableFeatureVector', 'extend()'], 'hirachy': 3, 'ref_parent': 64, 'children': [], 'group': 'Method'}, {'ref': 67, 'tag': 'Module', 'name': 'Live.Base', 'description': None, 'path': ['Live', 'Base'], 'hirachy': 1, 'ref_parent': 0, 'children': [68, 69, 72, 75, 76, 79, 82, 87], 'group': None}, {'ref': 68, 'tag': 'Built-In', 'name': 'Live.Base.log()', 'description': 'log( (object)arg1) -> None : C++ signature :  void log(TString)', 'path': ['Live', 'Base', 'log()'], 'hirachy': 2, 'ref_parent': 67, 'children': [], 'group': None}, {'ref': 69, 'tag': 'Class', 'name': 'Live.Base.FloatVector', 'description': 'A simple container for returning floats from Live.', 'path': ['Live', 'Base', 'FloatVector'], 'hirachy': 2, 'ref_parent': 67, 'children': [70, 71], 'group': None}, {'ref': 70, 'tag': 'Method', 'name': 'Live.Base.FloatVector.append()', 'description': 'append( (FloatVector)arg1, (object)arg2) -> None : C++ signature :  void append(std::__1::vector<float, std::__1::allocator<float> > {lvalue},boost::python::api::object)', 'path': ['Live', 'Base', 'FloatVector', 'append()'], 'hirachy': 3, 'ref_parent': 69, 'children': [], 'group': 'Method'}, {'ref': 71, 'tag': 'Method', 'name': 'Live.Base.FloatVector.extend()', 'description': 'extend( (FloatVector)arg1, (object)arg2) -> None : C++ signature :  void extend(std::__1::vector<float, std::__1::allocator<float> > {lvalue},boost::python::api::object)', 'path': ['Live', 'Base', 'FloatVector', 'extend()'], 'hirachy': 3, 'ref_parent': 69, 'children': [], 'group': 'Method'}, {'ref': 72, 'tag': 'Class', 'name': 'Live.Base.IntVector', 'description': 'A simple container for returning integers from Live.', 'path': ['Live', 'Base', 'IntVector'], 'hirachy': 2, 'ref_parent': 67, 'children': [73, 74], 'group': None}, {'ref': 73, 'tag': 'Method', 'name': 'Live.Base.IntVector.append()', 'description': 'append( (IntVector)arg1, (object)arg2) -> None : C++ signature :  void append(std::__1::vector<int, std::__1::allocator<int> > {lvalue},boost::python::api::object)', 'path': ['Live', 'Base', 'IntVector', 'append()'], 'hirachy': 3, 'ref_parent': 72, 'children': [], 'group': 'Method'}, {'ref': 74, 'tag': 'Method', 'name': 'Live.Base.IntVector.extend()', 'description': 'extend( (IntVector)arg1, (object)arg2) -> None : C++ signature :  void extend(std::__1::vector<int, std::__1::allocator<int> > {lvalue},boost::python::api::object)', 'path': ['Live', 'Base', 'IntVector', 'extend()'], 'hirachy': 3, 'ref_parent': 72, 'children': [], 'group': 'Method'}, {'ref': 75, 'tag': 'Class', 'name': 'Live.Base.LimitationError', 'description': None, 'path': ['Live', 'Base', 'LimitationError'], 'hirachy': 2, 'ref_parent': 67, 'children': [], 'group': None}, {'ref': 76, 'tag': 'Class', 'name': 'Live.Base.ObjectVector', 'description': 'A simple read only container for returning python objects.', 'path': ['Live', 'Base', 'ObjectVector'], 'hirachy': 2, 'ref_parent': 67, 'children': [77, 78], 'group': None}, {'ref': 77, 'tag': 'Method', 'name': 'Live.Base.ObjectVector.append()', 'description': 'append( (ObjectVector)arg1, (object)arg2) -> None : C++ signature :  void append(std::__1::vector<boost::python::api::object, std::__1::allocator<boost::python::api::object> > {lvalue},boost::python::api::object)', 'path': ['Live', 'Base', 'ObjectVector', 'append()'], 'hirachy': 3, 'ref_parent': 76, 'children': [], 'group': 'Method'}, {'ref': 78, 'tag': 'Method', 'name': 'Live.Base.ObjectVector.extend()', 'description': 'extend( (ObjectVector)arg1, (object)arg2) -> None : C++ signature :  void extend(std::__1::vector<boost::python::api::object, std::__1::allocator<boost::python::api::object> > {lvalue},boost::python::api::object)', 'path': ['Live', 'Base', 'ObjectVector', 'extend()'], 'hirachy': 3, 'ref_parent': 76, 'children': [], 'group': 'Method'}, {'ref': 79, 'tag': 'Class', 'name': 'Live.Base.StringVector', 'description': 'A simple container for returning strings from Live.', 'path': ['Live', 'Base', 'StringVector'], 'hirachy': 2, 'ref_parent': 67, 'children': [80, 81], 'group': None}, {'ref': 80, 'tag': 'Method', 'name': 'Live.Base.StringVector.append()', 'description': 'append( (StringVector)arg1, (object)arg2) -> None : C++ signature :  void append(std::__1::vector<TString, std::__1::allocator<TString> > {lvalue},boost::python::api::object)', 'path': ['Live', 'Base', 'StringVector', 'append()'], 'hirachy': 3, 'ref_parent': 79, 'children': [], 'group': 'Method'}, {'ref': 81, 'tag': 'Method', 'name': 'Live.Base.StringVector.extend()', 'description': 'extend( (StringVector)arg1, (object)arg2) -> None : C++ signature :  void extend(std::__1::vector<TString, std::__1::allocator<TString> > {lvalue},boost::python::api::object)', 'path': ['Live', 'Base', 'StringVector', 'extend()'], 'hirachy': 3, 'ref_parent': 79, 'children': [], 'group': 'Method'}, {'ref': 82, 'tag': 'Class', 'name': 'Live.Base.Timer', 'description': 'A timer that will trigger a callback after a certain inverval. The timer can be repeated and will trigger the callback every interval. Errors in the callback will stop the timer.', 'path': ['Live', 'Base', 'Timer'], 'hirachy': 2, 'ref_parent': 67, 'children': [83, 84, 85, 86], 'group': None}, {'ref': 83, 'tag': 'Property', 'name': 'Live.Base.Timer.running', 'description': None, 'path': ['Live', 'Base', 'Timer', 'running'], 'hirachy': 3, 'ref_parent': 82, 'children': [], 'group': 'Property'}, {'ref': 84, 'tag': 'Method', 'name': 'Live.Base.Timer.restart()', 'description': 'restart( (Timer)arg1) -> None : C++ signature :  void restart(PythonTimer {lvalue})', 'path': ['Live', 'Base', 'Timer', 'restart()'], 'hirachy': 3, 'ref_parent': 82, 'children': [], 'group': 'Method'}, {'ref': 85, 'tag': 'Method', 'name': 'Live.Base.Timer.start()', 'description': 'start( (Timer)arg1) -> None : C++ signature :  void start(PythonTimer {lvalue})', 'path': ['Live', 'Base', 'Timer', 'start()'], 'hirachy': 3, 'ref_parent': 82, 'children': [], 'group': 'Method'}, {'ref': 86, 'tag': 'Method', 'name': 'Live.Base.Timer.stop()', 'description': 'stop( (Timer)arg1) -> None : C++ signature :  void stop(PythonTimer {lvalue})', 'path': ['Live', 'Base', 'Timer', 'stop()'], 'hirachy': 3, 'ref_parent': 82, 'children': [], 'group': 'Method'}, {'ref': 87, 'tag': 'Class', 'name': 'Live.Base.Vector', 'description': 'A simple read only container for returning objects from Live.', 'path': ['Live', 'Base', 'Vector'], 'hirachy': 2, 'ref_parent': 67, 'children': [88, 89], 'group': None}, {'ref': 88, 'tag': 'Method', 'name': 'Live.Base.Vector.append()', 'description': 'append( (Vector)arg1, (object)arg2) -> None : C++ signature :  void append(std::__1::vector<TWeakPtr<TPyHandleBase>, std::__1::allocator<TWeakPtr<TPyHandleBase> > > {lvalue},boost::python::api::object)', 'path': ['Live', 'Base', 'Vector', 'append()'], 'hirachy': 3, 'ref_parent': 87, 'children': [], 'group': 'Method'}, {'ref': 89, 'tag': 'Method', 'name': 'Live.Base.Vector.extend()', 'description': 'extend( (Vector)arg1, (object)arg2) -> None : C++ signature :  void extend(std::__1::vector<TWeakPtr<TPyHandleBase>, std::__1::allocator<TWeakPtr<TPyHandleBase> > > {lvalue},boost::python::api::object)', 'path': ['Live', 'Base', 'Vector', 'extend()'], 'hirachy': 3, 'ref_parent': 87, 'children': [], 'group': 'Method'}, {'ref': 90, 'tag': 'Module', 'name': 'Live.Browser', 'description': None, 'path': ['Live', 'Browser'], 'hirachy': 1, 'ref_parent': 0, 'children': [91, 123, 133, 135, 138, 148], 'group': None}, {'ref': 91, 'tag': 'Class', 'name': 'Live.Browser.Browser', 'description': 'This class represents the live browser data base.', 'path': ['Live', 'Browser', 'Browser'], 'hirachy': 2, 'ref_parent': 90, 'children': [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], 'group': None}, {'ref': 92, 'tag': 'Property', 'name': 'Live.Browser.Browser._live_ptr', 'description': None, 'path': ['Live', 'Browser', 'Browser', '_live_ptr'], 'hirachy': 3, 'ref_parent': 91, 'children': [], 'group': 'Property'}, {'ref': 93, 'tag': 'Property', 'name': 'Live.Browser.Browser.audio_effects', 'description': 'Returns a browser item with access to all the Audio Effects content.', 'path': ['Live', 'Browser', 'Browser', 'audio_effects'], 'hirachy': 3, 'ref_parent': 91, 'children': [], 'group': 'Property'}, {'ref': 94, 'tag': 'Property', 'name': 'Live.Browser.Browser.clips', 'description': 'Returns a browser item with access to all the Clips content.', 'path': ['Live', 'Browser', 'Browser', 'clips'], 'hirachy': 3, 'ref_parent': 91, 'children': [], 'group': 'Property'}, {'ref': 95, 'tag': 'Property', 'name': 'Live.Browser.Browser.colors', 'description': 'Returns a list of browser items containing the configured colors.', 'path': ['Live', 'Browser', 'Browser', 'colors'], 'hirachy': 3, 'ref_parent': 91, 'children': [], 'group': 'Property'}, {'ref': 96, 'tag': 'Property', 'name': 'Live.Browser.Browser.current_project', 'description': 'Returns a browser item with access to all the Current Project content.', 'path': ['Live', 'Browser', 'Browser', 'current_project'], 'hirachy': 3, 'ref_parent': 91, 'children': [], 'group': 'Property'}, {'ref': 97, 'tag': 'Property', 'name': 'Live.Browser.Browser.drums', 'description': 'Returns a browser item with access to all the Drums content.', 'path': ['Live', 'Browser', 'Browser', 'drums'], 'hirachy': 3, 'ref_parent': 91, 'children': [], 'group': 'Property'}, {'ref': 98, 'tag': 'Property', 'name': 'Live.Browser.Browser.filter_type', 'description': 'Bang triggered when the hotswap target has changed.', 'path': ['Live', 'Browser', 'Browser', 'filter_type'], 'hirachy': 3, 'ref_parent': 91, 'children': [], 'group': 'Property'}, {'ref': 99, 'tag': 'Property', 'name': 'Live.Browser.Browser.hotswap_target', 'description': 'Bang triggered when the hotswap target has changed.', 'path': ['Live', 'Browser', 'Browser', 'hotswap_target'], 'hirachy': 3, 'ref_parent': 91, 'children': [], 'group': 'Property'}, {'ref': 100, 'tag': 'Property', 'name': 'Live.Browser.Browser.instruments', 'description': 'Returns a browser item with access to all the Instruments content.', 'path': ['Live', 'Browser', 'Browser', 'instruments'], 'hirachy': 3, 'ref_parent': 91, 'children': [], 'group': 'Property'}, {'ref': 101, 'tag': 'Property', 'name': 'Live.Browser.Browser.legacy_libraries', 'description': 'Returns a list of browser items containing the installed legacy libraries. The list is always empty as legacy library handling has been removed.', 'path': ['Live', 'Browser', 'Browser', 'legacy_libraries'], 'hirachy': 3, 'ref_parent': 91, 'children': [], 'group': 'Property'}, {'ref': 102, 'tag': 'Property', 'name': 'Live.Browser.Browser.max_for_live', 'description': 'Returns a browser item with access to all the Max For Live content.', 'path': ['Live', 'Browser', 'Browser', 'max_for_live'], 'hirachy': 3, 'ref_parent': 91, 'children': [], 'group': 'Property'}, {'ref': 103, 'tag': 'Property', 'name': 'Live.Browser.Browser.midi_effects', 'description': 'Returns a browser item with access to all the Midi Effects content.', 'path': ['Live', 'Browser', 'Browser', 'midi_effects'], 'hirachy': 3, 'ref_parent': 91, 'children': [], 'group': 'Property'}, {'ref': 104, 'tag': 'Property', 'name': 'Live.Browser.Browser.packs', 'description': 'Returns a browser item with access to all the Packs content.', 'path': ['Live', 'Browser', 'Browser', 'packs'], 'hirachy': 3, 'ref_parent': 91, 'children': [], 'group': 'Property'}, {'ref': 105, 'tag': 'Property', 'name': 'Live.Browser.Browser.plugins', 'description': 'Returns a browser item with access to all the Plugins content.', 'path': ['Live', 'Browser', 'Browser', 'plugins'], 'hirachy': 3, 'ref_parent': 91, 'children': [], 'group': 'Property'}, {'ref': 106, 'tag': 'Property', 'name': 'Live.Browser.Browser.samples', 'description': 'Returns a browser item with access to all the Samples content.', 'path': ['Live', 'Browser', 'Browser', 'samples'], 'hirachy': 3, 'ref_parent': 91, 'children': [], 'group': 'Property'}, {'ref': 107, 'tag': 'Property', 'name': 'Live.Browser.Browser.sounds', 'description': 'Returns a browser item with access to all the Sounds content.', 'path': ['Live', 'Browser', 'Browser', 'sounds'], 'hirachy': 3, 'ref_parent': 91, 'children': [], 'group': 'Property'}, {'ref': 108, 'tag': 'Property', 'name': 'Live.Browser.Browser.user_folders', 'description': 'Returns a list of browser items containing all the user folders.', 'path': ['Live', 'Browser', 'Browser', 'user_folders'], 'hirachy': 3, 'ref_parent': 91, 'children': [], 'group': 'Property'}, {'ref': 109, 'tag': 'Property', 'name': 'Live.Browser.Browser.user_library', 'description': 'Returns a browser item with access to all the User Library content.', 'path': ['Live', 'Browser', 'Browser', 'user_library'], 'hirachy': 3, 'ref_parent': 91, 'children': [], 'group': 'Property'}, {'ref': 110, 'tag': 'listener Method', 'name': 'Live.Browser.Browser.add_filter_type_listener()', 'description': 'add_filter_type_listener( (Browser)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;filter_type&quot; has changed. C++ signature :  void add_filter_type_listener(TPyHandle<ABrowserDelegate>,boost::python::api::object)', 'path': ['Live', 'Browser', 'Browser', 'add_filter_type_listener()'], 'hirachy': 3, 'ref_parent': 91, 'children': [], 'group': 'listener Method'}, {'ref': 111, 'tag': 'listener Method', 'name': 'Live.Browser.Browser.add_full_refresh_listener()', 'description': 'add_full_refresh_listener( (Browser)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;full_refresh&quot; has changed. C++ signature :  void add_full_refresh_listener(TPyHandle<ABrowserDelegate>,boost::python::api::object)', 'path': ['Live', 'Browser', 'Browser', 'add_full_refresh_listener()'], 'hirachy': 3, 'ref_parent': 91, 'children': [], 'group': 'listener Method'}, {'ref': 112, 'tag': 'listener Method', 'name': 'Live.Browser.Browser.add_hotswap_target_listener()', 'description': 'add_hotswap_target_listener( (Browser)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;hotswap_target&quot; has changed. C++ signature :  void add_hotswap_target_listener(TPyHandle<ABrowserDelegate>,boost::python::api::object)', 'path': ['Live', 'Browser', 'Browser', 'add_hotswap_target_listener()'], 'hirachy': 3, 'ref_parent': 91, 'children': [], 'group': 'listener Method'}, {'ref': 113, 'tag': 'listener Method', 'name': 'Live.Browser.Browser.filter_type_has_listener()', 'description': 'filter_type_has_listener( (Browser)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;filter_type&quot;. C++ signature :  bool filter_type_has_listener(TPyHandle<ABrowserDelegate>,boost::python::api::object)', 'path': ['Live', 'Browser', 'Browser', 'filter_type_has_listener()'], 'hirachy': 3, 'ref_parent': 91, 'children': [], 'group': 'listener Method'}, {'ref': 114, 'tag': 'listener Method', 'name': 'Live.Browser.Browser.full_refresh_has_listener()', 'description': 'full_refresh_has_listener( (Browser)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;full_refresh&quot;. C++ signature :  bool full_refresh_has_listener(TPyHandle<ABrowserDelegate>,boost::python::api::object)', 'path': ['Live', 'Browser', 'Browser', 'full_refresh_has_listener()'], 'hirachy': 3, 'ref_parent': 91, 'children': [], 'group': 'listener Method'}, {'ref': 115, 'tag': 'listener Method', 'name': 'Live.Browser.Browser.hotswap_target_has_listener()', 'description': 'hotswap_target_has_listener( (Browser)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;hotswap_target&quot;. C++ signature :  bool hotswap_target_has_listener(TPyHandle<ABrowserDelegate>,boost::python::api::object)', 'path': ['Live', 'Browser', 'Browser', 'hotswap_target_has_listener()'], 'hirachy': 3, 'ref_parent': 91, 'children': [], 'group': 'listener Method'}, {'ref': 116, 'tag': 'Method', 'name': 'Live.Browser.Browser.load_item()', 'description': 'load_item( (Browser)arg1, (BrowserItem)arg2) -> None : Loads the provided browser item. C++ signature :  void load_item(TPyHandle<ABrowserDelegate>,NPythonBrowser::TPythonBrowserItem)', 'path': ['Live', 'Browser', 'Browser', 'load_item()'], 'hirachy': 3, 'ref_parent': 91, 'children': [], 'group': 'Method'}, {'ref': 117, 'tag': 'Method', 'name': 'Live.Browser.Browser.preview_item()', 'description': 'preview_item( (Browser)arg1, (BrowserItem)arg2) -> None : Previews the provided browser item. C++ signature :  void preview_item(TPyHandle<ABrowserDelegate>,NPythonBrowser::TPythonBrowserItem)', 'path': ['Live', 'Browser', 'Browser', 'preview_item()'], 'hirachy': 3, 'ref_parent': 91, 'children': [], 'group': 'Method'}, {'ref': 118, 'tag': 'Method', 'name': 'Live.Browser.Browser.relation_to_hotswap_target()', 'description': 'relation_to_hotswap_target( (Browser)arg1, (BrowserItem)arg2) -> Relation : Returns the relation between the given browser item and the current hotswap target C++ signature :  NBrowserUri::TRelation relation_to_hotswap_target(TPyHandle<ABrowserDelegate>,NPythonBrowser::TPythonBrowserItem)', 'path': ['Live', 'Browser', 'Browser', 'relation_to_hotswap_target()'], 'hirachy': 3, 'ref_parent': 91, 'children': [], 'group': 'Method'}, {'ref': 119, 'tag': 'listener Method', 'name': 'Live.Browser.Browser.remove_filter_type_listener()', 'description': 'remove_filter_type_listener( (Browser)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;filter_type&quot;. C++ signature :  void remove_filter_type_listener(TPyHandle<ABrowserDelegate>,boost::python::api::object)', 'path': ['Live', 'Browser', 'Browser', 'remove_filter_type_listener()'], 'hirachy': 3, 'ref_parent': 91, 'children': [], 'group': 'listener Method'}, {'ref': 120, 'tag': 'listener Method', 'name': 'Live.Browser.Browser.remove_full_refresh_listener()', 'description': 'remove_full_refresh_listener( (Browser)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;full_refresh&quot;. C++ signature :  void remove_full_refresh_listener(TPyHandle<ABrowserDelegate>,boost::python::api::object)', 'path': ['Live', 'Browser', 'Browser', 'remove_full_refresh_listener()'], 'hirachy': 3, 'ref_parent': 91, 'children': [], 'group': 'listener Method'}, {'ref': 121, 'tag': 'listener Method', 'name': 'Live.Browser.Browser.remove_hotswap_target_listener()', 'description': 'remove_hotswap_target_listener( (Browser)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;hotswap_target&quot;. C++ signature :  void remove_hotswap_target_listener(TPyHandle<ABrowserDelegate>,boost::python::api::object)', 'path': ['Live', 'Browser', 'Browser', 'remove_hotswap_target_listener()'], 'hirachy': 3, 'ref_parent': 91, 'children': [], 'group': 'listener Method'}, {'ref': 122, 'tag': 'Method', 'name': 'Live.Browser.Browser.stop_preview()', 'description': 'stop_preview( (Browser)arg1) -> None : Stop the current preview. C++ signature :  void stop_preview(TPyHandle<ABrowserDelegate>)', 'path': ['Live', 'Browser', 'Browser', 'stop_preview()'], 'hirachy': 3, 'ref_parent': 91, 'children': [], 'group': 'Method'}, {'ref': 123, 'tag': 'Class', 'name': 'Live.Browser.BrowserItem', 'description': 'This class represents an item of the browser hierarchy.', 'path': ['Live', 'Browser', 'BrowserItem'], 'hirachy': 2, 'ref_parent': 90, 'children': [124, 125, 126, 127, 128, 129, 130, 131, 132], 'group': None}, {'ref': 124, 'tag': 'Property', 'name': 'Live.Browser.BrowserItem.children', 'description': 'Const access to the descendants of this browser item.', 'path': ['Live', 'Browser', 'BrowserItem', 'children'], 'hirachy': 3, 'ref_parent': 123, 'children': [], 'group': 'Property'}, {'ref': 125, 'tag': 'Property', 'name': 'Live.Browser.BrowserItem.is_device', 'description': 'Indicates if the browser item represents a device.', 'path': ['Live', 'Browser', 'BrowserItem', 'is_device'], 'hirachy': 3, 'ref_parent': 123, 'children': [], 'group': 'Property'}, {'ref': 126, 'tag': 'Property', 'name': 'Live.Browser.BrowserItem.is_folder', 'description': 'Indicates if the browser item represents folder.', 'path': ['Live', 'Browser', 'BrowserItem', 'is_folder'], 'hirachy': 3, 'ref_parent': 123, 'children': [], 'group': 'Property'}, {'ref': 127, 'tag': 'Property', 'name': 'Live.Browser.BrowserItem.is_loadable', 'description': "True if item can be loaded via the Browser's 'load_item' method.", 'path': ['Live', 'Browser', 'BrowserItem', 'is_loadable'], 'hirachy': 3, 'ref_parent': 123, 'children': [], 'group': 'Property'}, {'ref': 128, 'tag': 'Property', 'name': 'Live.Browser.BrowserItem.is_selected', 'description': 'True if the item is ancestor of or the actual selection.', 'path': ['Live', 'Browser', 'BrowserItem', 'is_selected'], 'hirachy': 3, 'ref_parent': 123, 'children': [], 'group': 'Property'}, {'ref': 129, 'tag': 'Property', 'name': 'Live.Browser.BrowserItem.iter_children', 'description': 'Const iterable access to the descendants of this browser item.', 'path': ['Live', 'Browser', 'BrowserItem', 'iter_children'], 'hirachy': 3, 'ref_parent': 123, 'children': [], 'group': 'Property'}, {'ref': 130, 'tag': 'Property', 'name': 'Live.Browser.BrowserItem.name', 'description': 'Const access to the canonical display name of this browser item.', 'path': ['Live', 'Browser', 'BrowserItem', 'name'], 'hirachy': 3, 'ref_parent': 123, 'children': [], 'group': 'Property'}, {'ref': 131, 'tag': 'Property', 'name': 'Live.Browser.BrowserItem.source', 'description': 'Specifies where does item come from -- i.e. Live pack, user library...', 'path': ['Live', 'Browser', 'BrowserItem', 'source'], 'hirachy': 3, 'ref_parent': 123, 'children': [], 'group': 'Property'}, {'ref': 132, 'tag': 'Property', 'name': 'Live.Browser.BrowserItem.uri', 'description': 'The uri describes a unique identifier for a browser item.', 'path': ['Live', 'Browser', 'BrowserItem', 'uri'], 'hirachy': 3, 'ref_parent': 123, 'children': [], 'group': 'Property'}, {'ref': 133, 'tag': 'Class', 'name': 'Live.Browser.BrowserItemIterator', 'description': 'This class iterates over children of another BrowserItem.', 'path': ['Live', 'Browser', 'BrowserItemIterator'], 'hirachy': 2, 'ref_parent': 90, 'children': [134], 'group': None}, {'ref': 134, 'tag': 'Method', 'name': 'Live.Browser.BrowserItemIterator.next()', 'description': 'next( (BrowserItemIterator)arg1) -> BrowserItem : Retrieve next item C++ signature :  NPythonBrowser::TPythonBrowserItem next(NPythonBrowser::TPythonBrowserItem::TPythonBrowserItemIterator {lvalue})', 'path': ['Live', 'Browser', 'BrowserItemIterator', 'next()'], 'hirachy': 3, 'ref_parent': 133, 'children': [], 'group': 'Method'}, {'ref': 135, 'tag': 'Class', 'name': 'Live.Browser.BrowserItemVector', 'description': 'A container for returning browser items from Live.', 'path': ['Live', 'Browser', 'BrowserItemVector'], 'hirachy': 2, 'ref_parent': 90, 'children': [136, 137], 'group': None}, {'ref': 136, 'tag': 'Method', 'name': 'Live.Browser.BrowserItemVector.append()', 'description': 'append( (BrowserItemVector)arg1, (object)arg2) -> None : C++ signature :  void append(std::__1::vector<NPythonBrowser::TPythonBrowserItem, std::__1::allocator<NPythonBrowser::TPythonBrowserItem> > {lvalue},boost::python::api::object)', 'path': ['Live', 'Browser', 'BrowserItemVector', 'append()'], 'hirachy': 3, 'ref_parent': 135, 'children': [], 'group': 'Method'}, {'ref': 137, 'tag': 'Method', 'name': 'Live.Browser.BrowserItemVector.extend()', 'description': 'extend( (BrowserItemVector)arg1, (object)arg2) -> None : C++ signature :  void extend(std::__1::vector<NPythonBrowser::TPythonBrowserItem, std::__1::allocator<NPythonBrowser::TPythonBrowserItem> > {lvalue},boost::python::api::object)', 'path': ['Live', 'Browser', 'BrowserItemVector', 'extend()'], 'hirachy': 3, 'ref_parent': 135, 'children': [], 'group': 'Method'}, {'ref': 138, 'tag': 'Class', 'name': 'Live.Browser.FilterType', 'description': None, 'path': ['Live', 'Browser', 'FilterType'], 'hirachy': 2, 'ref_parent': 90, 'children': [139, 140, 141, 142, 143, 144, 145, 146, 147], 'group': None}, {'ref': 139, 'tag': 'Value', 'name': 'Live.Browser.FilterType.audio_effect_hotswap', 'description': None, 'path': ['Live', 'Browser', 'FilterType', 'audio_effect_hotswap'], 'hirachy': 3, 'ref_parent': 138, 'children': [], 'group': 'Value'}, {'ref': 140, 'tag': 'Value', 'name': 'Live.Browser.FilterType.count', 'description': None, 'path': ['Live', 'Browser', 'FilterType', 'count'], 'hirachy': 3, 'ref_parent': 138, 'children': [], 'group': 'Value'}, {'ref': 141, 'tag': 'Value', 'name': 'Live.Browser.FilterType.disabled', 'description': None, 'path': ['Live', 'Browser', 'FilterType', 'disabled'], 'hirachy': 3, 'ref_parent': 138, 'children': [], 'group': 'Value'}, {'ref': 142, 'tag': 'Value', 'name': 'Live.Browser.FilterType.drum_pad_hotswap', 'description': None, 'path': ['Live', 'Browser', 'FilterType', 'drum_pad_hotswap'], 'hirachy': 3, 'ref_parent': 138, 'children': [], 'group': 'Value'}, {'ref': 143, 'tag': 'Value', 'name': 'Live.Browser.FilterType.hotswap_off', 'description': None, 'path': ['Live', 'Browser', 'FilterType', 'hotswap_off'], 'hirachy': 3, 'ref_parent': 138, 'children': [], 'group': 'Value'}, {'ref': 144, 'tag': 'Value', 'name': 'Live.Browser.FilterType.instrument_hotswap', 'description': None, 'path': ['Live', 'Browser', 'FilterType', 'instrument_hotswap'], 'hirachy': 3, 'ref_parent': 138, 'children': [], 'group': 'Value'}, {'ref': 145, 'tag': 'Value', 'name': 'Live.Browser.FilterType.midi_effect_hotswap', 'description': None, 'path': ['Live', 'Browser', 'FilterType', 'midi_effect_hotswap'], 'hirachy': 3, 'ref_parent': 138, 'children': [], 'group': 'Value'}, {'ref': 146, 'tag': 'Value', 'name': 'Live.Browser.FilterType.midi_track_devices', 'description': None, 'path': ['Live', 'Browser', 'FilterType', 'midi_track_devices'], 'hirachy': 3, 'ref_parent': 138, 'children': [], 'group': 'Value'}, {'ref': 147, 'tag': 'Value', 'name': 'Live.Browser.FilterType.samples', 'description': None, 'path': ['Live', 'Browser', 'FilterType', 'samples'], 'hirachy': 3, 'ref_parent': 138, 'children': [], 'group': 'Value'}, {'ref': 148, 'tag': 'Class', 'name': 'Live.Browser.Relation', 'description': None, 'path': ['Live', 'Browser', 'Relation'], 'hirachy': 2, 'ref_parent': 90, 'children': [149, 150, 151, 152], 'group': None}, {'ref': 149, 'tag': 'Value', 'name': 'Live.Browser.Relation.ancestor', 'description': None, 'path': ['Live', 'Browser', 'Relation', 'ancestor'], 'hirachy': 3, 'ref_parent': 148, 'children': [], 'group': 'Value'}, {'ref': 150, 'tag': 'Value', 'name': 'Live.Browser.Relation.descendant', 'description': None, 'path': ['Live', 'Browser', 'Relation', 'descendant'], 'hirachy': 3, 'ref_parent': 148, 'children': [], 'group': 'Value'}, {'ref': 151, 'tag': 'Value', 'name': 'Live.Browser.Relation.equal', 'description': None, 'path': ['Live', 'Browser', 'Relation', 'equal'], 'hirachy': 3, 'ref_parent': 148, 'children': [], 'group': 'Value'}, {'ref': 152, 'tag': 'Value', 'name': 'Live.Browser.Relation.none', 'description': None, 'path': ['Live', 'Browser', 'Relation', 'none'], 'hirachy': 3, 'ref_parent': 148, 'children': [], 'group': 'Value'}, {'ref': 153, 'tag': 'Module', 'name': 'Live.Chain', 'description': None, 'path': ['Live', 'Chain'], 'hirachy': 1, 'ref_parent': 0, 'children': [154], 'group': None}, {'ref': 154, 'tag': 'Class', 'name': 'Live.Chain.Chain', 'description': 'This class represents a group device chain in Live.', 'path': ['Live', 'Chain', 'Chain'], 'hirachy': 2, 'ref_parent': 153, 'children': [155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194], 'group': None}, {'ref': 155, 'tag': 'Property', 'name': 'Live.Chain.Chain._live_ptr', 'description': None, 'path': ['Live', 'Chain', 'Chain', '_live_ptr'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'Property'}, {'ref': 156, 'tag': 'Property', 'name': 'Live.Chain.Chain.canonical_parent', 'description': 'Get the canonical parent of the chain.', 'path': ['Live', 'Chain', 'Chain', 'canonical_parent'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'Property'}, {'ref': 157, 'tag': 'Property', 'name': 'Live.Chain.Chain.color', 'description': 'Access the color index of the Chain.', 'path': ['Live', 'Chain', 'Chain', 'color'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'Property'}, {'ref': 158, 'tag': 'Property', 'name': 'Live.Chain.Chain.color_index', 'description': 'Access the color index of the Chain.', 'path': ['Live', 'Chain', 'Chain', 'color_index'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'Property'}, {'ref': 159, 'tag': 'Property', 'name': 'Live.Chain.Chain.devices', 'description': 'Return const access to all available Devices that are present in the chains', 'path': ['Live', 'Chain', 'Chain', 'devices'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'Property'}, {'ref': 160, 'tag': 'Property', 'name': 'Live.Chain.Chain.has_audio_input', 'description': 'return True, if this Chain can be feed with an Audio signal. This istrue for all Audio Chains.', 'path': ['Live', 'Chain', 'Chain', 'has_audio_input'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'Property'}, {'ref': 161, 'tag': 'Property', 'name': 'Live.Chain.Chain.has_audio_output', 'description': 'return True, if this Chain sends out an Audio signal. This istrue for all Audio Chains, and MIDI chains with an Instrument.', 'path': ['Live', 'Chain', 'Chain', 'has_audio_output'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'Property'}, {'ref': 162, 'tag': 'Property', 'name': 'Live.Chain.Chain.has_midi_input', 'description': 'return True, if this Chain can be feed with an Audio signal. This istrue for all MIDI Chains.', 'path': ['Live', 'Chain', 'Chain', 'has_midi_input'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'Property'}, {'ref': 163, 'tag': 'Property', 'name': 'Live.Chain.Chain.has_midi_output', 'description': 'return True, if this Chain sends out MIDI events. This istrue for all MIDI Chains with no Instruments.', 'path': ['Live', 'Chain', 'Chain', 'has_midi_output'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'Property'}, {'ref': 164, 'tag': 'Property', 'name': 'Live.Chain.Chain.is_auto_colored', 'description': 'Get/set access to the auto color flag of the Chain.If True, the Chain will always have the same color as the containingTrack or Chain.', 'path': ['Live', 'Chain', 'Chain', 'is_auto_colored'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'Property'}, {'ref': 165, 'tag': 'Property', 'name': 'Live.Chain.Chain.mixer_device', 'description': "Return access to the mixer device that holds the chain's mixer parameters:the Volume, Pan, and Sendamounts.", 'path': ['Live', 'Chain', 'Chain', 'mixer_device'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'Property'}, {'ref': 166, 'tag': 'Property', 'name': 'Live.Chain.Chain.mute', 'description': 'Mute/unmute the chain.', 'path': ['Live', 'Chain', 'Chain', 'mute'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'Property'}, {'ref': 167, 'tag': 'Property', 'name': 'Live.Chain.Chain.muted_via_solo', 'description': 'Return const access to whether this chain is muted due to some other chainbeing soloed.', 'path': ['Live', 'Chain', 'Chain', 'muted_via_solo'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'Property'}, {'ref': 168, 'tag': 'Property', 'name': 'Live.Chain.Chain.name', 'description': 'Read/write access to the name of the Chain, as visible in the track header.', 'path': ['Live', 'Chain', 'Chain', 'name'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'Property'}, {'ref': 169, 'tag': 'Property', 'name': 'Live.Chain.Chain.solo', 'description': 'Get/Set the solo status of the chain. Note that this will not disable thesolo state of any other Chain in the same rack. If you want exclusive solo, you have to disable the solo state of the other Chains manually.', 'path': ['Live', 'Chain', 'Chain', 'solo'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'Property'}, {'ref': 170, 'tag': 'listener Method', 'name': 'Live.Chain.Chain.add_color_index_listener()', 'description': 'add_color_index_listener( (Chain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;color_index&quot; has changed. C++ signature :  void add_color_index_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'Chain', 'Chain', 'add_color_index_listener()'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'listener Method'}, {'ref': 171, 'tag': 'listener Method', 'name': 'Live.Chain.Chain.add_color_listener()', 'description': 'add_color_listener( (Chain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;color&quot; has changed. C++ signature :  void add_color_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'Chain', 'Chain', 'add_color_listener()'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'listener Method'}, {'ref': 172, 'tag': 'listener Method', 'name': 'Live.Chain.Chain.add_devices_listener()', 'description': 'add_devices_listener( (Chain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;devices&quot; has changed. C++ signature :  void add_devices_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'Chain', 'Chain', 'add_devices_listener()'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'listener Method'}, {'ref': 173, 'tag': 'listener Method', 'name': 'Live.Chain.Chain.add_is_auto_colored_listener()', 'description': 'add_is_auto_colored_listener( (Chain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_auto_colored&quot; has changed. C++ signature :  void add_is_auto_colored_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'Chain', 'Chain', 'add_is_auto_colored_listener()'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'listener Method'}, {'ref': 174, 'tag': 'listener Method', 'name': 'Live.Chain.Chain.add_mute_listener()', 'description': 'add_mute_listener( (Chain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;mute&quot; has changed. C++ signature :  void add_mute_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'Chain', 'Chain', 'add_mute_listener()'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'listener Method'}, {'ref': 175, 'tag': 'listener Method', 'name': 'Live.Chain.Chain.add_muted_via_solo_listener()', 'description': 'add_muted_via_solo_listener( (Chain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;muted_via_solo&quot; has changed. C++ signature :  void add_muted_via_solo_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'Chain', 'Chain', 'add_muted_via_solo_listener()'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'listener Method'}, {'ref': 176, 'tag': 'listener Method', 'name': 'Live.Chain.Chain.add_name_listener()', 'description': 'add_name_listener( (Chain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'Chain', 'Chain', 'add_name_listener()'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'listener Method'}, {'ref': 177, 'tag': 'listener Method', 'name': 'Live.Chain.Chain.add_solo_listener()', 'description': 'add_solo_listener( (Chain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;solo&quot; has changed. C++ signature :  void add_solo_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'Chain', 'Chain', 'add_solo_listener()'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'listener Method'}, {'ref': 178, 'tag': 'listener Method', 'name': 'Live.Chain.Chain.color_has_listener()', 'description': 'color_has_listener( (Chain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;color&quot;. C++ signature :  bool color_has_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'Chain', 'Chain', 'color_has_listener()'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'listener Method'}, {'ref': 179, 'tag': 'listener Method', 'name': 'Live.Chain.Chain.color_index_has_listener()', 'description': 'color_index_has_listener( (Chain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;color_index&quot;. C++ signature :  bool color_index_has_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'Chain', 'Chain', 'color_index_has_listener()'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'listener Method'}, {'ref': 180, 'tag': 'Method', 'name': 'Live.Chain.Chain.delete_device()', 'description': 'delete_device( (Chain)arg1, (int)arg2) -> None : Remove a device identified by its index from the chain. Throws runtime error if bad index.  C++ signature :  void delete_device(TChainPyHandle,int)', 'path': ['Live', 'Chain', 'Chain', 'delete_device()'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'Method'}, {'ref': 181, 'tag': 'listener Method', 'name': 'Live.Chain.Chain.devices_has_listener()', 'description': 'devices_has_listener( (Chain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;devices&quot;. C++ signature :  bool devices_has_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'Chain', 'Chain', 'devices_has_listener()'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'listener Method'}, {'ref': 182, 'tag': 'listener Method', 'name': 'Live.Chain.Chain.is_auto_colored_has_listener()', 'description': 'is_auto_colored_has_listener( (Chain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_auto_colored&quot;. C++ signature :  bool is_auto_colored_has_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'Chain', 'Chain', 'is_auto_colored_has_listener()'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'listener Method'}, {'ref': 183, 'tag': 'listener Method', 'name': 'Live.Chain.Chain.mute_has_listener()', 'description': 'mute_has_listener( (Chain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;mute&quot;. C++ signature :  bool mute_has_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'Chain', 'Chain', 'mute_has_listener()'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'listener Method'}, {'ref': 184, 'tag': 'listener Method', 'name': 'Live.Chain.Chain.muted_via_solo_has_listener()', 'description': 'muted_via_solo_has_listener( (Chain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;muted_via_solo&quot;. C++ signature :  bool muted_via_solo_has_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'Chain', 'Chain', 'muted_via_solo_has_listener()'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'listener Method'}, {'ref': 185, 'tag': 'listener Method', 'name': 'Live.Chain.Chain.name_has_listener()', 'description': 'name_has_listener( (Chain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'Chain', 'Chain', 'name_has_listener()'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'listener Method'}, {'ref': 186, 'tag': 'listener Method', 'name': 'Live.Chain.Chain.remove_color_index_listener()', 'description': 'remove_color_index_listener( (Chain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;color_index&quot;. C++ signature :  void remove_color_index_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'Chain', 'Chain', 'remove_color_index_listener()'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'listener Method'}, {'ref': 187, 'tag': 'listener Method', 'name': 'Live.Chain.Chain.remove_color_listener()', 'description': 'remove_color_listener( (Chain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;color&quot;. C++ signature :  void remove_color_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'Chain', 'Chain', 'remove_color_listener()'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'listener Method'}, {'ref': 188, 'tag': 'listener Method', 'name': 'Live.Chain.Chain.remove_devices_listener()', 'description': 'remove_devices_listener( (Chain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;devices&quot;. C++ signature :  void remove_devices_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'Chain', 'Chain', 'remove_devices_listener()'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'listener Method'}, {'ref': 189, 'tag': 'listener Method', 'name': 'Live.Chain.Chain.remove_is_auto_colored_listener()', 'description': 'remove_is_auto_colored_listener( (Chain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_auto_colored&quot;. C++ signature :  void remove_is_auto_colored_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'Chain', 'Chain', 'remove_is_auto_colored_listener()'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'listener Method'}, {'ref': 190, 'tag': 'listener Method', 'name': 'Live.Chain.Chain.remove_mute_listener()', 'description': 'remove_mute_listener( (Chain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;mute&quot;. C++ signature :  void remove_mute_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'Chain', 'Chain', 'remove_mute_listener()'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'listener Method'}, {'ref': 191, 'tag': 'listener Method', 'name': 'Live.Chain.Chain.remove_muted_via_solo_listener()', 'description': 'remove_muted_via_solo_listener( (Chain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;muted_via_solo&quot;. C++ signature :  void remove_muted_via_solo_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'Chain', 'Chain', 'remove_muted_via_solo_listener()'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'listener Method'}, {'ref': 192, 'tag': 'listener Method', 'name': 'Live.Chain.Chain.remove_name_listener()', 'description': 'remove_name_listener( (Chain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'Chain', 'Chain', 'remove_name_listener()'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'listener Method'}, {'ref': 193, 'tag': 'listener Method', 'name': 'Live.Chain.Chain.remove_solo_listener()', 'description': 'remove_solo_listener( (Chain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;solo&quot;. C++ signature :  void remove_solo_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'Chain', 'Chain', 'remove_solo_listener()'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'listener Method'}, {'ref': 194, 'tag': 'listener Method', 'name': 'Live.Chain.Chain.solo_has_listener()', 'description': 'solo_has_listener( (Chain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;solo&quot;. C++ signature :  bool solo_has_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'Chain', 'Chain', 'solo_has_listener()'], 'hirachy': 3, 'ref_parent': 154, 'children': [], 'group': 'listener Method'}, {'ref': 195, 'tag': 'Module', 'name': 'Live.ChainMixerDevice', 'description': None, 'path': ['Live', 'ChainMixerDevice'], 'hirachy': 1, 'ref_parent': 0, 'children': [196], 'group': None}, {'ref': 196, 'tag': 'Class', 'name': 'Live.ChainMixerDevice.ChainMixerDevice', 'description': "This class represents a Chain's Mixer Device in Live, which gives youaccess to the Volume, Panning, and Send properties of a Chain.", 'path': ['Live', 'ChainMixerDevice', 'ChainMixerDevice'], 'hirachy': 2, 'ref_parent': 195, 'children': [197, 198, 199, 200, 201, 202, 203, 204, 205], 'group': None}, {'ref': 197, 'tag': 'Property', 'name': 'Live.ChainMixerDevice.ChainMixerDevice._live_ptr', 'description': None, 'path': ['Live', 'ChainMixerDevice', 'ChainMixerDevice', '_live_ptr'], 'hirachy': 3, 'ref_parent': 196, 'children': [], 'group': 'Property'}, {'ref': 198, 'tag': 'Property', 'name': 'Live.ChainMixerDevice.ChainMixerDevice.canonical_parent', 'description': 'Get the canonical parent of the mixer device.', 'path': ['Live', 'ChainMixerDevice', 'ChainMixerDevice', 'canonical_parent'], 'hirachy': 3, 'ref_parent': 196, 'children': [], 'group': 'Property'}, {'ref': 199, 'tag': 'Property', 'name': 'Live.ChainMixerDevice.ChainMixerDevice.chain_activator', 'description': "Const access to the Chain's Activator Device Parameter.", 'path': ['Live', 'ChainMixerDevice', 'ChainMixerDevice', 'chain_activator'], 'hirachy': 3, 'ref_parent': 196, 'children': [], 'group': 'Property'}, {'ref': 200, 'tag': 'Property', 'name': 'Live.ChainMixerDevice.ChainMixerDevice.panning', 'description': "Const access to the Chain's Panning Device Parameter.", 'path': ['Live', 'ChainMixerDevice', 'ChainMixerDevice', 'panning'], 'hirachy': 3, 'ref_parent': 196, 'children': [], 'group': 'Property'}, {'ref': 201, 'tag': 'Property', 'name': 'Live.ChainMixerDevice.ChainMixerDevice.sends', 'description': "Const access to the Chain's list of Send Amount Device Parameters.", 'path': ['Live', 'ChainMixerDevice', 'ChainMixerDevice', 'sends'], 'hirachy': 3, 'ref_parent': 196, 'children': [], 'group': 'Property'}, {'ref': 202, 'tag': 'Property', 'name': 'Live.ChainMixerDevice.ChainMixerDevice.volume', 'description': "Const access to the Chain's Volume Device Parameter.", 'path': ['Live', 'ChainMixerDevice', 'ChainMixerDevice', 'volume'], 'hirachy': 3, 'ref_parent': 196, 'children': [], 'group': 'Property'}, {'ref': 203, 'tag': 'listener Method', 'name': 'Live.ChainMixerDevice.ChainMixerDevice.add_sends_listener()', 'description': 'add_sends_listener( (ChainMixerDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;sends&quot; has changed. C++ signature :  void add_sends_listener(TPyHandle<ABranchMixerDevice>,boost::python::api::object)', 'path': ['Live', 'ChainMixerDevice', 'ChainMixerDevice', 'add_sends_listener()'], 'hirachy': 3, 'ref_parent': 196, 'children': [], 'group': 'listener Method'}, {'ref': 204, 'tag': 'listener Method', 'name': 'Live.ChainMixerDevice.ChainMixerDevice.remove_sends_listener()', 'description': 'remove_sends_listener( (ChainMixerDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;sends&quot;. C++ signature :  void remove_sends_listener(TPyHandle<ABranchMixerDevice>,boost::python::api::object)', 'path': ['Live', 'ChainMixerDevice', 'ChainMixerDevice', 'remove_sends_listener()'], 'hirachy': 3, 'ref_parent': 196, 'children': [], 'group': 'listener Method'}, {'ref': 205, 'tag': 'listener Method', 'name': 'Live.ChainMixerDevice.ChainMixerDevice.sends_has_listener()', 'description': 'sends_has_listener( (ChainMixerDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;sends&quot;. C++ signature :  bool sends_has_listener(TPyHandle<ABranchMixerDevice>,boost::python::api::object)', 'path': ['Live', 'ChainMixerDevice', 'ChainMixerDevice', 'sends_has_listener()'], 'hirachy': 3, 'ref_parent': 196, 'children': [], 'group': 'listener Method'}, {'ref': 206, 'tag': 'Module', 'name': 'Live.Clip', 'description': None, 'path': ['Live', 'Clip'], 'hirachy': 1, 'ref_parent': 0, 'children': [207, 210, 396, 412, 424, 429, 439, 440, 443, 446, 449], 'group': None}, {'ref': 207, 'tag': 'Class', 'name': 'Live.Clip.AutomationEnvelope', 'description': 'Describes parameter automation per clip.', 'path': ['Live', 'Clip', 'AutomationEnvelope'], 'hirachy': 2, 'ref_parent': 206, 'children': [208, 209], 'group': None}, {'ref': 208, 'tag': 'Method', 'name': 'Live.Clip.AutomationEnvelope.insert_step()', 'description': 'insert_step( (AutomationEnvelope)arg1, (float)arg2, (float)arg3, (float)arg4) -> None : C++ signature :  void insert_step(AAutomation {lvalue},double,double,double)', 'path': ['Live', 'Clip', 'AutomationEnvelope', 'insert_step()'], 'hirachy': 3, 'ref_parent': 207, 'children': [], 'group': 'Method'}, {'ref': 209, 'tag': 'Method', 'name': 'Live.Clip.AutomationEnvelope.value_at_time()', 'description': 'value_at_time( (AutomationEnvelope)arg1, (float)arg2) -> float : C++ signature :  double value_at_time(AAutomation {lvalue},double)', 'path': ['Live', 'Clip', 'AutomationEnvelope', 'value_at_time()'], 'hirachy': 3, 'ref_parent': 207, 'children': [], 'group': 'Method'}, {'ref': 210, 'tag': 'Class', 'name': 'Live.Clip.Clip', 'description': 'This class represents a Clip in Live. It can be either an AudioClip or a MIDI Clip, in an Arrangement or the Session, dependingon the Track (Slot) it lives in.', 'path': ['Live', 'Clip', 'Clip'], 'hirachy': 2, 'ref_parent': 206, 'children': [211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387], 'group': None}, {'ref': 211, 'tag': 'Property', 'name': 'Live.Clip.Clip._live_ptr', 'description': None, 'path': ['Live', 'Clip', 'Clip', '_live_ptr'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 212, 'tag': 'Property', 'name': 'Live.Clip.Clip.available_warp_modes', 'description': 'Available for AudioClips only.Get/Set the available warp modes, that can be used.', 'path': ['Live', 'Clip', 'Clip', 'available_warp_modes'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 213, 'tag': 'Property', 'name': 'Live.Clip.Clip.canonical_parent', 'description': 'Get the canonical parent of the Clip.', 'path': ['Live', 'Clip', 'Clip', 'canonical_parent'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 214, 'tag': 'Property', 'name': 'Live.Clip.Clip.color', 'description': 'Get/set access to the color of the Clip (RGB).', 'path': ['Live', 'Clip', 'Clip', 'color'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 215, 'tag': 'Property', 'name': 'Live.Clip.Clip.color_index', 'description': 'Get/set access to the color index of the Clip.', 'path': ['Live', 'Clip', 'Clip', 'color_index'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 216, 'tag': 'Property', 'name': 'Live.Clip.Clip.end_marker', 'description': 'Get/Set the Clips end marker pos in beats/seconds (unit depends on warping).', 'path': ['Live', 'Clip', 'Clip', 'end_marker'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 217, 'tag': 'Property', 'name': 'Live.Clip.Clip.end_time', 'description': "Get the clip's end time.", 'path': ['Live', 'Clip', 'Clip', 'end_time'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 218, 'tag': 'Property', 'name': 'Live.Clip.Clip.file_path', 'description': 'Get the path of the file represented by the Audio Clip.', 'path': ['Live', 'Clip', 'Clip', 'file_path'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 219, 'tag': 'Property', 'name': 'Live.Clip.Clip.gain', 'description': 'Available for AudioClips only.Read/write access to the gain setting of theAudio Clip', 'path': ['Live', 'Clip', 'Clip', 'gain'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 220, 'tag': 'Property', 'name': 'Live.Clip.Clip.gain_display_string', 'description': 'Return a string with the gain as dB value', 'path': ['Live', 'Clip', 'Clip', 'gain_display_string'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 221, 'tag': 'Property', 'name': 'Live.Clip.Clip.groove', 'description': 'Get the groove associated with this clip.', 'path': ['Live', 'Clip', 'Clip', 'groove'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 222, 'tag': 'Property', 'name': 'Live.Clip.Clip.has_envelopes', 'description': 'Will notify if the clip gets his first envelope or the last envelope is removed.', 'path': ['Live', 'Clip', 'Clip', 'has_envelopes'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 223, 'tag': 'Property', 'name': 'Live.Clip.Clip.has_groove', 'description': 'Returns true if a groove is associated with this clip.', 'path': ['Live', 'Clip', 'Clip', 'has_groove'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 224, 'tag': 'Property', 'name': 'Live.Clip.Clip.is_arrangement_clip', 'description': 'return true if this Clip is an Arrangement Clip.A Clip can be either a Session or Arrangement Clip.', 'path': ['Live', 'Clip', 'Clip', 'is_arrangement_clip'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 225, 'tag': 'Property', 'name': 'Live.Clip.Clip.is_audio_clip', 'description': 'Return true if this Clip is an Audio Clip.A Clip can be either an Audioclip or a MIDI Clip.', 'path': ['Live', 'Clip', 'Clip', 'is_audio_clip'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 226, 'tag': 'Property', 'name': 'Live.Clip.Clip.is_midi_clip', 'description': 'return true if this Clip is a MIDI Clip.A Clip can be either an Audioclip or a MIDI Clip.', 'path': ['Live', 'Clip', 'Clip', 'is_midi_clip'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 227, 'tag': 'Property', 'name': 'Live.Clip.Clip.is_overdubbing', 'description': 'returns true if the Clip is recording overdubs', 'path': ['Live', 'Clip', 'Clip', 'is_overdubbing'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 228, 'tag': 'Property', 'name': 'Live.Clip.Clip.is_playing', 'description': 'Get/Set if this Clip is currently playing. If the Clips trigger modeis set to a quantization value, the Clip will not start playing immediately.If you need to know wether the Clip was triggered, use the is_triggered property.', 'path': ['Live', 'Clip', 'Clip', 'is_playing'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 229, 'tag': 'Property', 'name': 'Live.Clip.Clip.is_recording', 'description': 'returns true if the Clip was triggered to record or is recording.', 'path': ['Live', 'Clip', 'Clip', 'is_recording'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 230, 'tag': 'Property', 'name': 'Live.Clip.Clip.is_triggered', 'description': 'returns true if the Clip was triggered or is playing.', 'path': ['Live', 'Clip', 'Clip', 'is_triggered'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 231, 'tag': 'Property', 'name': 'Live.Clip.Clip.launch_mode', 'description': 'Get/Set access to the launch mode setting of the Clip.', 'path': ['Live', 'Clip', 'Clip', 'launch_mode'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 232, 'tag': 'Property', 'name': 'Live.Clip.Clip.launch_quantization', 'description': 'Get/Set access to the launch quantization setting of the Clip.', 'path': ['Live', 'Clip', 'Clip', 'launch_quantization'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 233, 'tag': 'Property', 'name': 'Live.Clip.Clip.legato', 'description': 'Get/Set access to the legato setting of the Clip', 'path': ['Live', 'Clip', 'Clip', 'legato'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 234, 'tag': 'Property', 'name': 'Live.Clip.Clip.length', 'description': 'Get to the Clips length in beats/seconds (unit depends on warping).', 'path': ['Live', 'Clip', 'Clip', 'length'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 235, 'tag': 'Property', 'name': 'Live.Clip.Clip.loop_end', 'description': 'Get/Set the loop end pos of this Clip in beats/seconds (unit depends on warping).', 'path': ['Live', 'Clip', 'Clip', 'loop_end'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 236, 'tag': 'Property', 'name': 'Live.Clip.Clip.loop_start', 'description': 'Get/Set the Clips loopstart pos in beats/seconds (unit depends on warping).', 'path': ['Live', 'Clip', 'Clip', 'loop_start'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 237, 'tag': 'Property', 'name': 'Live.Clip.Clip.looping', 'description': "Get/Set the Clips 'loop is enabled' flag.Only Warped Audio Clips or MIDI Clip can be looped.", 'path': ['Live', 'Clip', 'Clip', 'looping'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 238, 'tag': 'Property', 'name': 'Live.Clip.Clip.muted', 'description': 'Read/write access to the mute state of the Clip.', 'path': ['Live', 'Clip', 'Clip', 'muted'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 239, 'tag': 'Property', 'name': 'Live.Clip.Clip.name', 'description': 'Read/write access to the name of the Clip.', 'path': ['Live', 'Clip', 'Clip', 'name'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 240, 'tag': 'Property', 'name': 'Live.Clip.Clip.pitch_coarse', 'description': 'Available for AudioClips only.Read/write access to the pitch (in halftones) setting of theAudio Clip, ranging from -48 to 48', 'path': ['Live', 'Clip', 'Clip', 'pitch_coarse'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 241, 'tag': 'Property', 'name': 'Live.Clip.Clip.pitch_fine', 'description': 'Available for AudioClips only.Read/write access to the pitch fine setting of theAudio Clip, ranging from -500 to 500', 'path': ['Live', 'Clip', 'Clip', 'pitch_fine'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 242, 'tag': 'Property', 'name': 'Live.Clip.Clip.playing_position', 'description': 'Constant access to the current playing position of the clip.The returned value is the position in beats for midi and warped audio clips,or in seconds for unwarped audio clips. Stopped clips will return 0.', 'path': ['Live', 'Clip', 'Clip', 'playing_position'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 243, 'tag': 'Property', 'name': 'Live.Clip.Clip.position', 'description': 'Get/Set the loop position of this Clip in beats/seconds (unit depends on warping).', 'path': ['Live', 'Clip', 'Clip', 'position'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 244, 'tag': 'Property', 'name': 'Live.Clip.Clip.ram_mode', 'description': 'Available for AudioClips only.Read/write access to the Ram mode setting of the Audio Clip', 'path': ['Live', 'Clip', 'Clip', 'ram_mode'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 245, 'tag': 'Property', 'name': 'Live.Clip.Clip.sample_length', 'description': 'Available for AudioClips only.Get the sample length in sample time or -1 if there is no sample available.', 'path': ['Live', 'Clip', 'Clip', 'sample_length'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 246, 'tag': 'Property', 'name': 'Live.Clip.Clip.signature_denominator', 'description': 'Get/Set access to the global signature denominator of the Clip.', 'path': ['Live', 'Clip', 'Clip', 'signature_denominator'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 247, 'tag': 'Property', 'name': 'Live.Clip.Clip.signature_numerator', 'description': 'Get/Set access to the global signature numerator of the Clip.', 'path': ['Live', 'Clip', 'Clip', 'signature_numerator'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 248, 'tag': 'Property', 'name': 'Live.Clip.Clip.start_marker', 'description': 'Get/Set the Clips start marker pos in beats/seconds (unit depends on warping).', 'path': ['Live', 'Clip', 'Clip', 'start_marker'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 249, 'tag': 'Property', 'name': 'Live.Clip.Clip.start_time', 'description': "Get the clip's start time offset. For Session View clips, this is the time the clip was started. For Arrangement View clips, this is the offset within the arrangement.", 'path': ['Live', 'Clip', 'Clip', 'start_time'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 250, 'tag': 'Property', 'name': 'Live.Clip.Clip.velocity_amount', 'description': 'Get/Set access to the velocity to volume amount of the Clip.', 'path': ['Live', 'Clip', 'Clip', 'velocity_amount'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 251, 'tag': 'Property', 'name': 'Live.Clip.Clip.view', 'description': 'Get the view of the Clip.', 'path': ['Live', 'Clip', 'Clip', 'view'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 252, 'tag': 'Property', 'name': 'Live.Clip.Clip.warp_markers', 'description': 'Available for AudioClips only.Get the warp markers for this audio clip.', 'path': ['Live', 'Clip', 'Clip', 'warp_markers'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 253, 'tag': 'Property', 'name': 'Live.Clip.Clip.warp_mode', 'description': 'Available for AudioClips only.Get/Set the warp mode for this audio clip.', 'path': ['Live', 'Clip', 'Clip', 'warp_mode'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 254, 'tag': 'Property', 'name': 'Live.Clip.Clip.warping', 'description': 'Available for AudioClips only.Get/Set if this Clip is timestreched.', 'path': ['Live', 'Clip', 'Clip', 'warping'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 255, 'tag': 'Property', 'name': 'Live.Clip.Clip.will_record_on_start', 'description': 'returns true if the Clip will record on being started.', 'path': ['Live', 'Clip', 'Clip', 'will_record_on_start'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Property'}, {'ref': 256, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.add_color_index_listener()', 'description': 'add_color_index_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;color_index&quot; has changed. C++ signature :  void add_color_index_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'add_color_index_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 257, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.add_color_listener()', 'description': 'add_color_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;color&quot; has changed. C++ signature :  void add_color_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'add_color_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 258, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.add_end_marker_listener()', 'description': 'add_end_marker_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;end_marker&quot; has changed. C++ signature :  void add_end_marker_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'add_end_marker_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 259, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.add_end_time_listener()', 'description': 'add_end_time_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;end_time&quot; has changed. C++ signature :  void add_end_time_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'add_end_time_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 260, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.add_file_path_listener()', 'description': 'add_file_path_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;file_path&quot; has changed. C++ signature :  void add_file_path_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'add_file_path_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 261, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.add_gain_listener()', 'description': 'add_gain_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;gain&quot; has changed. C++ signature :  void add_gain_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'add_gain_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 262, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.add_groove_listener()', 'description': 'add_groove_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;groove&quot; has changed. C++ signature :  void add_groove_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'add_groove_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 263, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.add_has_envelopes_listener()', 'description': 'add_has_envelopes_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;has_envelopes&quot; has changed. C++ signature :  void add_has_envelopes_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'add_has_envelopes_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 264, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.add_is_overdubbing_listener()', 'description': 'add_is_overdubbing_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_overdubbing&quot; has changed. C++ signature :  void add_is_overdubbing_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'add_is_overdubbing_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 265, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.add_is_recording_listener()', 'description': 'add_is_recording_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_recording&quot; has changed. C++ signature :  void add_is_recording_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'add_is_recording_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 266, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.add_launch_mode_listener()', 'description': 'add_launch_mode_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;launch_mode&quot; has changed. C++ signature :  void add_launch_mode_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'add_launch_mode_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 267, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.add_launch_quantization_listener()', 'description': 'add_launch_quantization_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;launch_quantization&quot; has changed. C++ signature :  void add_launch_quantization_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'add_launch_quantization_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 268, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.add_legato_listener()', 'description': 'add_legato_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;legato&quot; has changed. C++ signature :  void add_legato_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'add_legato_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 269, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.add_loop_end_listener()', 'description': 'add_loop_end_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;loop_end&quot; has changed. C++ signature :  void add_loop_end_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'add_loop_end_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 270, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.add_loop_jump_listener()', 'description': 'add_loop_jump_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;loop_jump&quot; has changed. C++ signature :  void add_loop_jump_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'add_loop_jump_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 271, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.add_loop_start_listener()', 'description': 'add_loop_start_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;loop_start&quot; has changed. C++ signature :  void add_loop_start_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'add_loop_start_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 272, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.add_looping_listener()', 'description': 'add_looping_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;looping&quot; has changed. C++ signature :  void add_looping_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'add_looping_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 273, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.add_muted_listener()', 'description': 'add_muted_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;muted&quot; has changed. C++ signature :  void add_muted_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'add_muted_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 274, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.add_name_listener()', 'description': 'add_name_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'add_name_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 275, 'tag': 'Method', 'name': 'Live.Clip.Clip.add_new_notes()', 'description': 'add_new_notes( (Clip)arg1, (object)arg2) -> None : Expects a Python iterable holding a number of Live.Clip.MidiNoteSpecification objects. The objects will be used to construct new notes in the clip. C++ signature :  void add_new_notes(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'add_new_notes()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Method'}, {'ref': 276, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.add_notes_listener()', 'description': 'add_notes_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;notes&quot; has changed. C++ signature :  void add_notes_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'add_notes_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 277, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.add_pitch_coarse_listener()', 'description': 'add_pitch_coarse_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;pitch_coarse&quot; has changed. C++ signature :  void add_pitch_coarse_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'add_pitch_coarse_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 278, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.add_pitch_fine_listener()', 'description': 'add_pitch_fine_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;pitch_fine&quot; has changed. C++ signature :  void add_pitch_fine_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'add_pitch_fine_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 279, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.add_playing_position_listener()', 'description': 'add_playing_position_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;playing_position&quot; has changed. C++ signature :  void add_playing_position_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'add_playing_position_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 280, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.add_playing_status_listener()', 'description': 'add_playing_status_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;playing_status&quot; has changed. C++ signature :  void add_playing_status_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'add_playing_status_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 281, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.add_position_listener()', 'description': 'add_position_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;position&quot; has changed. C++ signature :  void add_position_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'add_position_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 282, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.add_ram_mode_listener()', 'description': 'add_ram_mode_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;ram_mode&quot; has changed. C++ signature :  void add_ram_mode_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'add_ram_mode_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 283, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.add_signature_denominator_listener()', 'description': 'add_signature_denominator_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;signature_denominator&quot; has changed. C++ signature :  void add_signature_denominator_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'add_signature_denominator_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 284, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.add_signature_numerator_listener()', 'description': 'add_signature_numerator_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;signature_numerator&quot; has changed. C++ signature :  void add_signature_numerator_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'add_signature_numerator_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 285, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.add_start_marker_listener()', 'description': 'add_start_marker_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;start_marker&quot; has changed. C++ signature :  void add_start_marker_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'add_start_marker_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 286, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.add_velocity_amount_listener()', 'description': 'add_velocity_amount_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;velocity_amount&quot; has changed. C++ signature :  void add_velocity_amount_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'add_velocity_amount_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 287, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.add_warp_markers_listener()', 'description': 'add_warp_markers_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;warp_markers&quot; has changed. C++ signature :  void add_warp_markers_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'add_warp_markers_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 288, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.add_warp_mode_listener()', 'description': 'add_warp_mode_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;warp_mode&quot; has changed. C++ signature :  void add_warp_mode_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'add_warp_mode_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 289, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.add_warping_listener()', 'description': 'add_warping_listener( (Clip)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;warping&quot; has changed. C++ signature :  void add_warping_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'add_warping_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 290, 'tag': 'Method', 'name': 'Live.Clip.Clip.apply_note_modifications()', 'description': 'apply_note_modifications( (Clip)arg1, (MidiNoteVector)arg2) -> None : Expects a list of notes as returned from get_notes_extended. The content of the list will be used to modify existing notes in the clip, based on matching note IDs. This function should be used when modifying existing notes, e.g. changing the velocity or start time. The function ensures that per-note events attached to the modified notes are preserved. This is NOT the case when replacing notes via a combination of remove_notes_extended and add_new_notes. The given list can be a subset of the notes in the clip, but it must not contain any notes that are not present in the clip.  C++ signature :  void apply_note_modifications(TPyHandle<AClip>,std::__1::vector<NClipApi::TNoteInfo, std::__1::allocator<NClipApi::TNoteInfo> >)', 'path': ['Live', 'Clip', 'Clip', 'apply_note_modifications()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Method'}, {'ref': 291, 'tag': 'Method', 'name': 'Live.Clip.Clip.automation_envelope()', 'description': "automation_envelope( (Clip)arg1, (DeviceParameter)arg2) -> AutomationEnvelope : Return the envelope for the given parameter.Returns None if the envelope doesn't exist.Returns None for Arrangement clips.Returns None for parameters from a different track. C++ signature :  TWeakPtr<AAutomation> automation_envelope(TPyHandle<AClip>,TPyHandle<ATimeableValue>)", 'path': ['Live', 'Clip', 'Clip', 'automation_envelope()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Method'}, {'ref': 292, 'tag': 'Method', 'name': 'Live.Clip.Clip.beat_to_sample_time()', 'description': 'beat_to_sample_time( (Clip)self, (float)beat_time) -> float : Available for AudioClips only. Converts the given beat time to sample time. Raises an error if the sample is not warped. C++ signature :  double beat_to_sample_time(TPyHandle<AClip>,double)', 'path': ['Live', 'Clip', 'Clip', 'beat_to_sample_time()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Method'}, {'ref': 293, 'tag': 'Method', 'name': 'Live.Clip.Clip.clear_all_envelopes()', 'description': 'clear_all_envelopes( (Clip)arg1) -> None : Clears all envelopes for this clip. C++ signature :  void clear_all_envelopes(TPyHandle<AClip>)', 'path': ['Live', 'Clip', 'Clip', 'clear_all_envelopes()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Method'}, {'ref': 294, 'tag': 'Method', 'name': 'Live.Clip.Clip.clear_envelope()', 'description': 'clear_envelope( (Clip)arg1, (DeviceParameter)arg2) -> None : Clears the envelope of this clips given parameter. C++ signature :  void clear_envelope(TPyHandle<AClip>,TPyHandle<ATimeableValue>)', 'path': ['Live', 'Clip', 'Clip', 'clear_envelope()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Method'}, {'ref': 295, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.color_has_listener()', 'description': 'color_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;color&quot;. C++ signature :  bool color_has_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'color_has_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 296, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.color_index_has_listener()', 'description': 'color_index_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;color_index&quot;. C++ signature :  bool color_index_has_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'color_index_has_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 297, 'tag': 'Method', 'name': 'Live.Clip.Clip.create_automation_envelope()', 'description': "create_automation_envelope( (Clip)arg1, (DeviceParameter)arg2) -> AutomationEnvelope : Creates an envelope for a given parameter and returns it.This should only be used if the envelope doesn't exist.Raises an error if the envelope can't be created. C++ signature :  TWeakPtr<AAutomation> create_automation_envelope(TPyHandle<AClip>,TPyHandle<ATimeableValue>)", 'path': ['Live', 'Clip', 'Clip', 'create_automation_envelope()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Method'}, {'ref': 298, 'tag': 'Method', 'name': 'Live.Clip.Clip.crop()', 'description': 'crop( (Clip)arg1) -> None : Crops the clip. The region that is cropped depends on whether the clip is looped or not. If looped, the region outside of the loop is removed. If not looped, the region outside the start and end markers is removed. C++ signature :  void crop(TPyHandle<AClip>)', 'path': ['Live', 'Clip', 'Clip', 'crop()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Method'}, {'ref': 299, 'tag': 'Method', 'name': 'Live.Clip.Clip.deselect_all_notes()', 'description': 'deselect_all_notes( (Clip)arg1) -> None : De-selects all notes present in the clip. C++ signature :  void deselect_all_notes(TPyHandle<AClip>)', 'path': ['Live', 'Clip', 'Clip', 'deselect_all_notes()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Method'}, {'ref': 300, 'tag': 'Method', 'name': 'Live.Clip.Clip.duplicate_loop()', 'description': 'duplicate_loop( (Clip)arg1) -> None : Make the loop two times longer and duplicates notes and envelopes. Duplicates the clip start/end range if the clip is not looped. C++ signature :  void duplicate_loop(TPyHandle<AClip>)', 'path': ['Live', 'Clip', 'Clip', 'duplicate_loop()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Method'}, {'ref': 301, 'tag': 'Method', 'name': 'Live.Clip.Clip.duplicate_region()', 'description': 'duplicate_region( (Clip)self, (float)region_start, (float)region_length, (float)destination_time [, (int)pitch=-1 [, (int)transposition_amount=0]]) -> None : Duplicate the notes in the specified region to the destination_time. Only notes of the specified pitch are duplicated or all if pitch is -1. If the transposition_amount is not 0, the notes in the region will be transposed by the transpose_amount of semitones.Raises an error on audio clips. C++ signature :  void duplicate_region(TPyHandle<AClip>,double,double,double [,int=-1 [,int=0]])', 'path': ['Live', 'Clip', 'Clip', 'duplicate_region()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Method'}, {'ref': 302, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.end_marker_has_listener()', 'description': 'end_marker_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;end_marker&quot;. C++ signature :  bool end_marker_has_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'end_marker_has_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 303, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.end_time_has_listener()', 'description': 'end_time_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;end_time&quot;. C++ signature :  bool end_time_has_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'end_time_has_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 304, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.file_path_has_listener()', 'description': 'file_path_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;file_path&quot;. C++ signature :  bool file_path_has_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'file_path_has_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 305, 'tag': 'Method', 'name': 'Live.Clip.Clip.fire()', 'description': 'fire( (Clip)arg1) -> None : (Re)Start playing this Clip. C++ signature :  void fire(TPyHandle<AClip>)', 'path': ['Live', 'Clip', 'Clip', 'fire()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Method'}, {'ref': 306, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.gain_has_listener()', 'description': 'gain_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;gain&quot;. C++ signature :  bool gain_has_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'gain_has_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 307, 'tag': 'Method', 'name': 'Live.Clip.Clip.get_notes()', 'description': 'get_notes( (Clip)self, (float)from_time, (int)from_pitch, (float)time_span, (int)pitch_span) -> tuple : Returns a tuple of tuples where each inner tuple represents a note starting in the given pitch- and time range. The inner tuple contains pitch, time, duration, velocity, and mute state. C++ signature :  boost::python::tuple get_notes(TPyHandle<AClip>,double,int,double,int)', 'path': ['Live', 'Clip', 'Clip', 'get_notes()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Method'}, {'ref': 308, 'tag': 'Method', 'name': 'Live.Clip.Clip.get_notes_by_id()', 'description': 'get_notes_by_id( (Clip)arg1, (object)arg2) -> MidiNoteVector : Return a list of MIDI notes matching the given note IDs.  C++ signature :  std::__1::vector<NClipApi::TNoteInfo, std::__1::allocator<NClipApi::TNoteInfo> > get_notes_by_id(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'get_notes_by_id()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Method'}, {'ref': 309, 'tag': 'Method', 'name': 'Live.Clip.Clip.get_notes_extended()', 'description': 'get_notes_extended( (Clip)arg1, (int)from_pitch, (int)pitch_span, (float)from_time, (float)time_span) -> MidiNoteVector : Returns a list of MIDI notes from the given pitch and time range. Each note is represented by a Live.Clip.MidiNote object. The returned list can be modified freely, but modifications will not be reflected in the MIDI clip until apply_note_modifications is called. C++ signature :  std::__1::vector<NClipApi::TNoteInfo, std::__1::allocator<NClipApi::TNoteInfo> > get_notes_extended(TPyHandle<AClip>,int,int,double,double)', 'path': ['Live', 'Clip', 'Clip', 'get_notes_extended()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Method'}, {'ref': 310, 'tag': 'Method', 'name': 'Live.Clip.Clip.get_selected_notes()', 'description': 'get_selected_notes( (Clip)arg1) -> tuple : Returns a tuple of tuples where each inner tuple represents a selected note. The inner tuple contains pitch, time, duration, velocity, and mute state. C++ signature :  boost::python::tuple get_selected_notes(TPyHandle<AClip>)', 'path': ['Live', 'Clip', 'Clip', 'get_selected_notes()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Method'}, {'ref': 311, 'tag': 'Method', 'name': 'Live.Clip.Clip.get_selected_notes_extended()', 'description': 'get_selected_notes_extended( (Clip)arg1) -> MidiNoteVector : Returns a list of all MIDI notes from the clip that are currently selected. Each note is represented by a Live.Clip.MidiNote object. The returned list can be modified freely, but modifications will not be reflected in the MIDI clip until apply_note_modifications is called. C++ signature :  std::__1::vector<NClipApi::TNoteInfo, std::__1::allocator<NClipApi::TNoteInfo> > get_selected_notes_extended(TPyHandle<AClip>)', 'path': ['Live', 'Clip', 'Clip', 'get_selected_notes_extended()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Method'}, {'ref': 312, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.groove_has_listener()', 'description': 'groove_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;groove&quot;. C++ signature :  bool groove_has_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'groove_has_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 313, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.has_envelopes_has_listener()', 'description': 'has_envelopes_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;has_envelopes&quot;. C++ signature :  bool has_envelopes_has_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'has_envelopes_has_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 314, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.is_overdubbing_has_listener()', 'description': 'is_overdubbing_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_overdubbing&quot;. C++ signature :  bool is_overdubbing_has_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'is_overdubbing_has_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 315, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.is_recording_has_listener()', 'description': 'is_recording_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_recording&quot;. C++ signature :  bool is_recording_has_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'is_recording_has_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 316, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.launch_mode_has_listener()', 'description': 'launch_mode_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;launch_mode&quot;. C++ signature :  bool launch_mode_has_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'launch_mode_has_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 317, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.launch_quantization_has_listener()', 'description': 'launch_quantization_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;launch_quantization&quot;. C++ signature :  bool launch_quantization_has_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'launch_quantization_has_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 318, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.legato_has_listener()', 'description': 'legato_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;legato&quot;. C++ signature :  bool legato_has_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'legato_has_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 319, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.loop_end_has_listener()', 'description': 'loop_end_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;loop_end&quot;. C++ signature :  bool loop_end_has_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'loop_end_has_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 320, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.loop_jump_has_listener()', 'description': 'loop_jump_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;loop_jump&quot;. C++ signature :  bool loop_jump_has_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'loop_jump_has_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 321, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.loop_start_has_listener()', 'description': 'loop_start_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;loop_start&quot;. C++ signature :  bool loop_start_has_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'loop_start_has_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 322, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.looping_has_listener()', 'description': 'looping_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;looping&quot;. C++ signature :  bool looping_has_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'looping_has_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 323, 'tag': 'Method', 'name': 'Live.Clip.Clip.move_playing_pos()', 'description': 'move_playing_pos( (Clip)arg1, (float)arg2) -> None : Jump forward or backward by the specified relative amount in beats. Will do nothing, if the Clip is not playing. C++ signature :  void move_playing_pos(TPyHandle<AClip>,double)', 'path': ['Live', 'Clip', 'Clip', 'move_playing_pos()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Method'}, {'ref': 324, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.muted_has_listener()', 'description': 'muted_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;muted&quot;. C++ signature :  bool muted_has_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'muted_has_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 325, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.name_has_listener()', 'description': 'name_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'name_has_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 326, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.notes_has_listener()', 'description': 'notes_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;notes&quot;. C++ signature :  bool notes_has_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'notes_has_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 327, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.pitch_coarse_has_listener()', 'description': 'pitch_coarse_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;pitch_coarse&quot;. C++ signature :  bool pitch_coarse_has_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'pitch_coarse_has_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 328, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.pitch_fine_has_listener()', 'description': 'pitch_fine_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;pitch_fine&quot;. C++ signature :  bool pitch_fine_has_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'pitch_fine_has_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 329, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.playing_position_has_listener()', 'description': 'playing_position_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;playing_position&quot;. C++ signature :  bool playing_position_has_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'playing_position_has_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 330, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.playing_status_has_listener()', 'description': 'playing_status_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;playing_status&quot;. C++ signature :  bool playing_status_has_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'playing_status_has_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 331, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.position_has_listener()', 'description': 'position_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;position&quot;. C++ signature :  bool position_has_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'position_has_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 332, 'tag': 'Method', 'name': 'Live.Clip.Clip.quantize()', 'description': 'quantize( (Clip)arg1, (int)arg2, (float)arg3) -> None : Quantize all notes in a clip or align warp markers. C++ signature :  void quantize(TPyHandle<AClip>,int,float)', 'path': ['Live', 'Clip', 'Clip', 'quantize()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Method'}, {'ref': 333, 'tag': 'Method', 'name': 'Live.Clip.Clip.quantize_pitch()', 'description': 'quantize_pitch( (Clip)arg1, (int)arg2, (int)arg3, (float)arg4) -> None : Quantize all the notes of a given pitch.  Raises an error on audio clips. C++ signature :  void quantize_pitch(TPyHandle<AClip>,int,int,float)', 'path': ['Live', 'Clip', 'Clip', 'quantize_pitch()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Method'}, {'ref': 334, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.ram_mode_has_listener()', 'description': 'ram_mode_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;ram_mode&quot;. C++ signature :  bool ram_mode_has_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'ram_mode_has_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 335, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.remove_color_index_listener()', 'description': 'remove_color_index_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;color_index&quot;. C++ signature :  void remove_color_index_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'remove_color_index_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 336, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.remove_color_listener()', 'description': 'remove_color_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;color&quot;. C++ signature :  void remove_color_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'remove_color_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 337, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.remove_end_marker_listener()', 'description': 'remove_end_marker_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;end_marker&quot;. C++ signature :  void remove_end_marker_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'remove_end_marker_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 338, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.remove_end_time_listener()', 'description': 'remove_end_time_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;end_time&quot;. C++ signature :  void remove_end_time_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'remove_end_time_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 339, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.remove_file_path_listener()', 'description': 'remove_file_path_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;file_path&quot;. C++ signature :  void remove_file_path_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'remove_file_path_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 340, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.remove_gain_listener()', 'description': 'remove_gain_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;gain&quot;. C++ signature :  void remove_gain_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'remove_gain_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 341, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.remove_groove_listener()', 'description': 'remove_groove_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;groove&quot;. C++ signature :  void remove_groove_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'remove_groove_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 342, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.remove_has_envelopes_listener()', 'description': 'remove_has_envelopes_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;has_envelopes&quot;. C++ signature :  void remove_has_envelopes_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'remove_has_envelopes_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 343, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.remove_is_overdubbing_listener()', 'description': 'remove_is_overdubbing_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_overdubbing&quot;. C++ signature :  void remove_is_overdubbing_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'remove_is_overdubbing_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 344, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.remove_is_recording_listener()', 'description': 'remove_is_recording_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_recording&quot;. C++ signature :  void remove_is_recording_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'remove_is_recording_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 345, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.remove_launch_mode_listener()', 'description': 'remove_launch_mode_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;launch_mode&quot;. C++ signature :  void remove_launch_mode_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'remove_launch_mode_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 346, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.remove_launch_quantization_listener()', 'description': 'remove_launch_quantization_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;launch_quantization&quot;. C++ signature :  void remove_launch_quantization_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'remove_launch_quantization_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 347, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.remove_legato_listener()', 'description': 'remove_legato_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;legato&quot;. C++ signature :  void remove_legato_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'remove_legato_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 348, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.remove_loop_end_listener()', 'description': 'remove_loop_end_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;loop_end&quot;. C++ signature :  void remove_loop_end_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'remove_loop_end_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 349, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.remove_loop_jump_listener()', 'description': 'remove_loop_jump_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;loop_jump&quot;. C++ signature :  void remove_loop_jump_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'remove_loop_jump_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 350, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.remove_loop_start_listener()', 'description': 'remove_loop_start_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;loop_start&quot;. C++ signature :  void remove_loop_start_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'remove_loop_start_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 351, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.remove_looping_listener()', 'description': 'remove_looping_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;looping&quot;. C++ signature :  void remove_looping_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'remove_looping_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 352, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.remove_muted_listener()', 'description': 'remove_muted_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;muted&quot;. C++ signature :  void remove_muted_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'remove_muted_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 353, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.remove_name_listener()', 'description': 'remove_name_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'remove_name_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 354, 'tag': 'Method', 'name': 'Live.Clip.Clip.remove_notes()', 'description': 'remove_notes( (Clip)arg1, (float)arg2, (int)arg3, (float)arg4, (int)arg5) -> None : Delete all notes starting in the given pitch- and time range. C++ signature :  void remove_notes(TPyHandle<AClip>,double,int,double,int)', 'path': ['Live', 'Clip', 'Clip', 'remove_notes()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Method'}, {'ref': 355, 'tag': 'Method', 'name': 'Live.Clip.Clip.remove_notes_by_id()', 'description': 'remove_notes_by_id( (Clip)arg1, (object)arg2) -> None : Delete all notes matching the given note IDs. This function should NOT be used to implement modification of existing notes (i.e. in combination with add_new_notes), as that leads to loss of per-note events. apply_note_modifications must be used instead for modifying existing notes. C++ signature :  void remove_notes_by_id(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'remove_notes_by_id()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Method'}, {'ref': 356, 'tag': 'Method', 'name': 'Live.Clip.Clip.remove_notes_extended()', 'description': 'remove_notes_extended( (Clip)arg1, (int)from_pitch, (int)pitch_span, (float)from_time, (float)time_span) -> None : Delete all notes starting in the given pitch and time range. This function should NOT be used to implement modification of existing notes (i.e. in combination with add_new_notes), as that leads to loss of per-note events. apply_note_modifications must be used instead for modifying existing notes. C++ signature :  void remove_notes_extended(TPyHandle<AClip>,int,int,double,double)', 'path': ['Live', 'Clip', 'Clip', 'remove_notes_extended()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Method'}, {'ref': 357, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.remove_notes_listener()', 'description': 'remove_notes_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;notes&quot;. C++ signature :  void remove_notes_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'remove_notes_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 358, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.remove_pitch_coarse_listener()', 'description': 'remove_pitch_coarse_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;pitch_coarse&quot;. C++ signature :  void remove_pitch_coarse_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'remove_pitch_coarse_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 359, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.remove_pitch_fine_listener()', 'description': 'remove_pitch_fine_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;pitch_fine&quot;. C++ signature :  void remove_pitch_fine_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'remove_pitch_fine_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 360, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.remove_playing_position_listener()', 'description': 'remove_playing_position_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;playing_position&quot;. C++ signature :  void remove_playing_position_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'remove_playing_position_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 361, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.remove_playing_status_listener()', 'description': 'remove_playing_status_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;playing_status&quot;. C++ signature :  void remove_playing_status_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'remove_playing_status_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 362, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.remove_position_listener()', 'description': 'remove_position_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;position&quot;. C++ signature :  void remove_position_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'remove_position_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 363, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.remove_ram_mode_listener()', 'description': 'remove_ram_mode_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;ram_mode&quot;. C++ signature :  void remove_ram_mode_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'remove_ram_mode_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 364, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.remove_signature_denominator_listener()', 'description': 'remove_signature_denominator_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;signature_denominator&quot;. C++ signature :  void remove_signature_denominator_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'remove_signature_denominator_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 365, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.remove_signature_numerator_listener()', 'description': 'remove_signature_numerator_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;signature_numerator&quot;. C++ signature :  void remove_signature_numerator_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'remove_signature_numerator_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 366, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.remove_start_marker_listener()', 'description': 'remove_start_marker_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;start_marker&quot;. C++ signature :  void remove_start_marker_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'remove_start_marker_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 367, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.remove_velocity_amount_listener()', 'description': 'remove_velocity_amount_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;velocity_amount&quot;. C++ signature :  void remove_velocity_amount_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'remove_velocity_amount_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 368, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.remove_warp_markers_listener()', 'description': 'remove_warp_markers_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;warp_markers&quot;. C++ signature :  void remove_warp_markers_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'remove_warp_markers_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 369, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.remove_warp_mode_listener()', 'description': 'remove_warp_mode_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;warp_mode&quot;. C++ signature :  void remove_warp_mode_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'remove_warp_mode_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 370, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.remove_warping_listener()', 'description': 'remove_warping_listener( (Clip)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;warping&quot;. C++ signature :  void remove_warping_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'remove_warping_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 371, 'tag': 'Method', 'name': 'Live.Clip.Clip.replace_selected_notes()', 'description': 'replace_selected_notes( (Clip)arg1, (tuple)arg2) -> None : Called with a tuple of tuples where each inner tuple represents a note in the same format as returned by get_selected_notes. The notes described that way will then be used to replace the old selection. C++ signature :  void replace_selected_notes(TPyHandle<AClip>,boost::python::tuple)', 'path': ['Live', 'Clip', 'Clip', 'replace_selected_notes()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Method'}, {'ref': 372, 'tag': 'Method', 'name': 'Live.Clip.Clip.sample_to_beat_time()', 'description': 'sample_to_beat_time( (Clip)self, (float)sample_time) -> float : Available for AudioClips only. Converts the given sample time to beat time. Raises an error if the sample is not warped. C++ signature :  double sample_to_beat_time(TPyHandle<AClip>,double)', 'path': ['Live', 'Clip', 'Clip', 'sample_to_beat_time()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Method'}, {'ref': 373, 'tag': 'Method', 'name': 'Live.Clip.Clip.scrub()', 'description': "scrub( (Clip)self, (float)scrub_position) -> None : Scrubs inside a clip. scrub_position defines the position in beats that the scrub will start from. The scrub will continue until stop_scrub is called. Global quantization applies to the scrub's position and length. C++ signature :  void scrub(TPyHandle<AClip>,double)", 'path': ['Live', 'Clip', 'Clip', 'scrub()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Method'}, {'ref': 374, 'tag': 'Method', 'name': 'Live.Clip.Clip.seconds_to_sample_time()', 'description': 'seconds_to_sample_time( (Clip)self, (float)seconds) -> float : Available for AudioClips only. Converts the given seconds to sample time. Raises an error if the sample is warped. C++ signature :  double seconds_to_sample_time(TPyHandle<AClip>,double)', 'path': ['Live', 'Clip', 'Clip', 'seconds_to_sample_time()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Method'}, {'ref': 375, 'tag': 'Method', 'name': 'Live.Clip.Clip.select_all_notes()', 'description': 'select_all_notes( (Clip)arg1) -> None : Selects all notes present in the clip. C++ signature :  void select_all_notes(TPyHandle<AClip>)', 'path': ['Live', 'Clip', 'Clip', 'select_all_notes()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Method'}, {'ref': 376, 'tag': 'Method', 'name': 'Live.Clip.Clip.set_fire_button_state()', 'description': "set_fire_button_state( (Clip)arg1, (bool)arg2) -> None : Set the clip's fire button state directly. Supports all launch modes. C++ signature :  void set_fire_button_state(TPyHandle<AClip>,bool)", 'path': ['Live', 'Clip', 'Clip', 'set_fire_button_state()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Method'}, {'ref': 377, 'tag': 'Method', 'name': 'Live.Clip.Clip.set_notes()', 'description': 'set_notes( (Clip)arg1, (tuple)arg2) -> None : Called with a tuple of tuples where each inner tuple represents a note in the same format as returned by get_notes. The notes described that way will then be added to the clip. C++ signature :  void set_notes(TPyHandle<AClip>,boost::python::tuple)', 'path': ['Live', 'Clip', 'Clip', 'set_notes()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Method'}, {'ref': 378, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.signature_denominator_has_listener()', 'description': 'signature_denominator_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;signature_denominator&quot;. C++ signature :  bool signature_denominator_has_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'signature_denominator_has_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 379, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.signature_numerator_has_listener()', 'description': 'signature_numerator_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;signature_numerator&quot;. C++ signature :  bool signature_numerator_has_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'signature_numerator_has_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 380, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.start_marker_has_listener()', 'description': 'start_marker_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;start_marker&quot;. C++ signature :  bool start_marker_has_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'start_marker_has_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 381, 'tag': 'Method', 'name': 'Live.Clip.Clip.stop()', 'description': 'stop( (Clip)arg1) -> None : Stop playing this Clip. C++ signature :  void stop(TPyHandle<AClip>)', 'path': ['Live', 'Clip', 'Clip', 'stop()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Method'}, {'ref': 382, 'tag': 'Method', 'name': 'Live.Clip.Clip.stop_scrub()', 'description': 'stop_scrub( (Clip)arg1) -> None : Stops the current scrub. C++ signature :  void stop_scrub(TPyHandle<AClip>)', 'path': ['Live', 'Clip', 'Clip', 'stop_scrub()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'Method'}, {'ref': 383, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.velocity_amount_has_listener()', 'description': 'velocity_amount_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;velocity_amount&quot;. C++ signature :  bool velocity_amount_has_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'velocity_amount_has_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 384, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.warp_markers_has_listener()', 'description': 'warp_markers_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;warp_markers&quot;. C++ signature :  bool warp_markers_has_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'warp_markers_has_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 385, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.warp_mode_has_listener()', 'description': 'warp_mode_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;warp_mode&quot;. C++ signature :  bool warp_mode_has_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'warp_mode_has_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 386, 'tag': 'listener Method', 'name': 'Live.Clip.Clip.warping_has_listener()', 'description': 'warping_has_listener( (Clip)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;warping&quot;. C++ signature :  bool warping_has_listener(TPyHandle<AClip>,boost::python::api::object)', 'path': ['Live', 'Clip', 'Clip', 'warping_has_listener()'], 'hirachy': 3, 'ref_parent': 210, 'children': [], 'group': 'listener Method'}, {'ref': 387, 'tag': 'Class', 'name': 'Live.Clip.Clip.View', 'description': 'Representing the view aspects of a Clip.', 'path': ['Live', 'Clip', 'Clip', 'View'], 'hirachy': 3, 'ref_parent': 210, 'children': [388, 389, 390, 391, 392, 393, 394, 395], 'group': None}, {'ref': 388, 'tag': 'Property', 'name': 'Live.Clip.Clip.View._live_ptr', 'description': None, 'path': ['Live', 'Clip', 'Clip', 'View', '_live_ptr'], 'hirachy': 4, 'ref_parent': 387, 'children': [], 'group': 'Property'}, {'ref': 389, 'tag': 'Property', 'name': 'Live.Clip.Clip.View.canonical_parent', 'description': 'Get the canonical parent of the clip view.', 'path': ['Live', 'Clip', 'Clip', 'View', 'canonical_parent'], 'hirachy': 4, 'ref_parent': 387, 'children': [], 'group': 'Property'}, {'ref': 390, 'tag': 'Property', 'name': 'Live.Clip.Clip.View.grid_is_triplet', 'description': 'Get/set wether the grid is showing in triplet mode.', 'path': ['Live', 'Clip', 'Clip', 'View', 'grid_is_triplet'], 'hirachy': 4, 'ref_parent': 387, 'children': [], 'group': 'Property'}, {'ref': 391, 'tag': 'Property', 'name': 'Live.Clip.Clip.View.grid_quantization', 'description': 'Get/set clip grid quantization resolution.', 'path': ['Live', 'Clip', 'Clip', 'View', 'grid_quantization'], 'hirachy': 4, 'ref_parent': 387, 'children': [], 'group': 'Property'}, {'ref': 392, 'tag': 'Method', 'name': 'Live.Clip.Clip.View.hide_envelope()', 'description': 'hide_envelope( (View)arg1) -> None : Hide the envelope view. C++ signature :  void hide_envelope(TPyViewData<AClip>)', 'path': ['Live', 'Clip', 'Clip', 'View', 'hide_envelope()'], 'hirachy': 4, 'ref_parent': 387, 'children': [], 'group': 'Method'}, {'ref': 393, 'tag': 'Method', 'name': 'Live.Clip.Clip.View.select_envelope_parameter()', 'description': 'select_envelope_parameter( (View)arg1, (DeviceParameter)arg2) -> None : Select the given device parameter in the envelope view. C++ signature :  void select_envelope_parameter(TPyViewData<AClip>,TPyHandle<ATimeableValue>)', 'path': ['Live', 'Clip', 'Clip', 'View', 'select_envelope_parameter()'], 'hirachy': 4, 'ref_parent': 387, 'children': [], 'group': 'Method'}, {'ref': 394, 'tag': 'Method', 'name': 'Live.Clip.Clip.View.show_envelope()', 'description': 'show_envelope( (View)arg1) -> None : Show the envelope view. C++ signature :  void show_envelope(TPyViewData<AClip>)', 'path': ['Live', 'Clip', 'Clip', 'View', 'show_envelope()'], 'hirachy': 4, 'ref_parent': 387, 'children': [], 'group': 'Method'}, {'ref': 395, 'tag': 'Method', 'name': 'Live.Clip.Clip.View.show_loop()', 'description': 'show_loop( (View)arg1) -> None : Show the entire loop in the detail view. C++ signature :  void show_loop(TPyViewData<AClip>)', 'path': ['Live', 'Clip', 'Clip', 'View', 'show_loop()'], 'hirachy': 4, 'ref_parent': 387, 'children': [], 'group': 'Method'}, {'ref': 396, 'tag': 'Class', 'name': 'Live.Clip.ClipLaunchQuantization', 'description': None, 'path': ['Live', 'Clip', 'ClipLaunchQuantization'], 'hirachy': 2, 'ref_parent': 206, 'children': [397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411], 'group': None}, {'ref': 397, 'tag': 'Value', 'name': 'Live.Clip.ClipLaunchQuantization.q_2_bars', 'description': None, 'path': ['Live', 'Clip', 'ClipLaunchQuantization', 'q_2_bars'], 'hirachy': 3, 'ref_parent': 396, 'children': [], 'group': 'Value'}, {'ref': 398, 'tag': 'Value', 'name': 'Live.Clip.ClipLaunchQuantization.q_4_bars', 'description': None, 'path': ['Live', 'Clip', 'ClipLaunchQuantization', 'q_4_bars'], 'hirachy': 3, 'ref_parent': 396, 'children': [], 'group': 'Value'}, {'ref': 399, 'tag': 'Value', 'name': 'Live.Clip.ClipLaunchQuantization.q_8_bars', 'description': None, 'path': ['Live', 'Clip', 'ClipLaunchQuantization', 'q_8_bars'], 'hirachy': 3, 'ref_parent': 396, 'children': [], 'group': 'Value'}, {'ref': 400, 'tag': 'Value', 'name': 'Live.Clip.ClipLaunchQuantization.q_bar', 'description': None, 'path': ['Live', 'Clip', 'ClipLaunchQuantization', 'q_bar'], 'hirachy': 3, 'ref_parent': 396, 'children': [], 'group': 'Value'}, {'ref': 401, 'tag': 'Value', 'name': 'Live.Clip.ClipLaunchQuantization.q_eighth', 'description': None, 'path': ['Live', 'Clip', 'ClipLaunchQuantization', 'q_eighth'], 'hirachy': 3, 'ref_parent': 396, 'children': [], 'group': 'Value'}, {'ref': 402, 'tag': 'Value', 'name': 'Live.Clip.ClipLaunchQuantization.q_eighth_triplet', 'description': None, 'path': ['Live', 'Clip', 'ClipLaunchQuantization', 'q_eighth_triplet'], 'hirachy': 3, 'ref_parent': 396, 'children': [], 'group': 'Value'}, {'ref': 403, 'tag': 'Value', 'name': 'Live.Clip.ClipLaunchQuantization.q_global', 'description': None, 'path': ['Live', 'Clip', 'ClipLaunchQuantization', 'q_global'], 'hirachy': 3, 'ref_parent': 396, 'children': [], 'group': 'Value'}, {'ref': 404, 'tag': 'Value', 'name': 'Live.Clip.ClipLaunchQuantization.q_half', 'description': None, 'path': ['Live', 'Clip', 'ClipLaunchQuantization', 'q_half'], 'hirachy': 3, 'ref_parent': 396, 'children': [], 'group': 'Value'}, {'ref': 405, 'tag': 'Value', 'name': 'Live.Clip.ClipLaunchQuantization.q_half_triplet', 'description': None, 'path': ['Live', 'Clip', 'ClipLaunchQuantization', 'q_half_triplet'], 'hirachy': 3, 'ref_parent': 396, 'children': [], 'group': 'Value'}, {'ref': 406, 'tag': 'Value', 'name': 'Live.Clip.ClipLaunchQuantization.q_none', 'description': None, 'path': ['Live', 'Clip', 'ClipLaunchQuantization', 'q_none'], 'hirachy': 3, 'ref_parent': 396, 'children': [], 'group': 'Value'}, {'ref': 407, 'tag': 'Value', 'name': 'Live.Clip.ClipLaunchQuantization.q_quarter', 'description': None, 'path': ['Live', 'Clip', 'ClipLaunchQuantization', 'q_quarter'], 'hirachy': 3, 'ref_parent': 396, 'children': [], 'group': 'Value'}, {'ref': 408, 'tag': 'Value', 'name': 'Live.Clip.ClipLaunchQuantization.q_quarter_triplet', 'description': None, 'path': ['Live', 'Clip', 'ClipLaunchQuantization', 'q_quarter_triplet'], 'hirachy': 3, 'ref_parent': 396, 'children': [], 'group': 'Value'}, {'ref': 409, 'tag': 'Value', 'name': 'Live.Clip.ClipLaunchQuantization.q_sixteenth', 'description': None, 'path': ['Live', 'Clip', 'ClipLaunchQuantization', 'q_sixteenth'], 'hirachy': 3, 'ref_parent': 396, 'children': [], 'group': 'Value'}, {'ref': 410, 'tag': 'Value', 'name': 'Live.Clip.ClipLaunchQuantization.q_sixteenth_triplet', 'description': None, 'path': ['Live', 'Clip', 'ClipLaunchQuantization', 'q_sixteenth_triplet'], 'hirachy': 3, 'ref_parent': 396, 'children': [], 'group': 'Value'}, {'ref': 411, 'tag': 'Value', 'name': 'Live.Clip.ClipLaunchQuantization.q_thirtysecond', 'description': None, 'path': ['Live', 'Clip', 'ClipLaunchQuantization', 'q_thirtysecond'], 'hirachy': 3, 'ref_parent': 396, 'children': [], 'group': 'Value'}, {'ref': 412, 'tag': 'Class', 'name': 'Live.Clip.GridQuantization', 'description': None, 'path': ['Live', 'Clip', 'GridQuantization'], 'hirachy': 2, 'ref_parent': 206, 'children': [413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423], 'group': None}, {'ref': 413, 'tag': 'Value', 'name': 'Live.Clip.GridQuantization.count', 'description': None, 'path': ['Live', 'Clip', 'GridQuantization', 'count'], 'hirachy': 3, 'ref_parent': 412, 'children': [], 'group': 'Value'}, {'ref': 414, 'tag': 'Value', 'name': 'Live.Clip.GridQuantization.g_2_bars', 'description': None, 'path': ['Live', 'Clip', 'GridQuantization', 'g_2_bars'], 'hirachy': 3, 'ref_parent': 412, 'children': [], 'group': 'Value'}, {'ref': 415, 'tag': 'Value', 'name': 'Live.Clip.GridQuantization.g_4_bars', 'description': None, 'path': ['Live', 'Clip', 'GridQuantization', 'g_4_bars'], 'hirachy': 3, 'ref_parent': 412, 'children': [], 'group': 'Value'}, {'ref': 416, 'tag': 'Value', 'name': 'Live.Clip.GridQuantization.g_8_bars', 'description': None, 'path': ['Live', 'Clip', 'GridQuantization', 'g_8_bars'], 'hirachy': 3, 'ref_parent': 412, 'children': [], 'group': 'Value'}, {'ref': 417, 'tag': 'Value', 'name': 'Live.Clip.GridQuantization.g_bar', 'description': None, 'path': ['Live', 'Clip', 'GridQuantization', 'g_bar'], 'hirachy': 3, 'ref_parent': 412, 'children': [], 'group': 'Value'}, {'ref': 418, 'tag': 'Value', 'name': 'Live.Clip.GridQuantization.g_eighth', 'description': None, 'path': ['Live', 'Clip', 'GridQuantization', 'g_eighth'], 'hirachy': 3, 'ref_parent': 412, 'children': [], 'group': 'Value'}, {'ref': 419, 'tag': 'Value', 'name': 'Live.Clip.GridQuantization.g_half', 'description': None, 'path': ['Live', 'Clip', 'GridQuantization', 'g_half'], 'hirachy': 3, 'ref_parent': 412, 'children': [], 'group': 'Value'}, {'ref': 420, 'tag': 'Value', 'name': 'Live.Clip.GridQuantization.g_quarter', 'description': None, 'path': ['Live', 'Clip', 'GridQuantization', 'g_quarter'], 'hirachy': 3, 'ref_parent': 412, 'children': [], 'group': 'Value'}, {'ref': 421, 'tag': 'Value', 'name': 'Live.Clip.GridQuantization.g_sixteenth', 'description': None, 'path': ['Live', 'Clip', 'GridQuantization', 'g_sixteenth'], 'hirachy': 3, 'ref_parent': 412, 'children': [], 'group': 'Value'}, {'ref': 422, 'tag': 'Value', 'name': 'Live.Clip.GridQuantization.g_thirtysecond', 'description': None, 'path': ['Live', 'Clip', 'GridQuantization', 'g_thirtysecond'], 'hirachy': 3, 'ref_parent': 412, 'children': [], 'group': 'Value'}, {'ref': 423, 'tag': 'Value', 'name': 'Live.Clip.GridQuantization.no_grid', 'description': None, 'path': ['Live', 'Clip', 'GridQuantization', 'no_grid'], 'hirachy': 3, 'ref_parent': 412, 'children': [], 'group': 'Value'}, {'ref': 424, 'tag': 'Class', 'name': 'Live.Clip.LaunchMode', 'description': None, 'path': ['Live', 'Clip', 'LaunchMode'], 'hirachy': 2, 'ref_parent': 206, 'children': [425, 426, 427, 428], 'group': None}, {'ref': 425, 'tag': 'Value', 'name': 'Live.Clip.LaunchMode.gate', 'description': None, 'path': ['Live', 'Clip', 'LaunchMode', 'gate'], 'hirachy': 3, 'ref_parent': 424, 'children': [], 'group': 'Value'}, {'ref': 426, 'tag': 'Value', 'name': 'Live.Clip.LaunchMode.repeat', 'description': None, 'path': ['Live', 'Clip', 'LaunchMode', 'repeat'], 'hirachy': 3, 'ref_parent': 424, 'children': [], 'group': 'Value'}, {'ref': 427, 'tag': 'Value', 'name': 'Live.Clip.LaunchMode.toggle', 'description': None, 'path': ['Live', 'Clip', 'LaunchMode', 'toggle'], 'hirachy': 3, 'ref_parent': 424, 'children': [], 'group': 'Value'}, {'ref': 428, 'tag': 'Value', 'name': 'Live.Clip.LaunchMode.trigger', 'description': None, 'path': ['Live', 'Clip', 'LaunchMode', 'trigger'], 'hirachy': 3, 'ref_parent': 424, 'children': [], 'group': 'Value'}, {'ref': 429, 'tag': 'Class', 'name': 'Live.Clip.MidiNote', 'description': 'An object representing a MIDI Note', 'path': ['Live', 'Clip', 'MidiNote'], 'hirachy': 2, 'ref_parent': 206, 'children': [430, 431, 432, 433, 434, 435, 436, 437, 438], 'group': None}, {'ref': 430, 'tag': 'Property', 'name': 'Live.Clip.MidiNote.duration', 'description': None, 'path': ['Live', 'Clip', 'MidiNote', 'duration'], 'hirachy': 3, 'ref_parent': 429, 'children': [], 'group': 'Property'}, {'ref': 431, 'tag': 'Property', 'name': 'Live.Clip.MidiNote.mute', 'description': None, 'path': ['Live', 'Clip', 'MidiNote', 'mute'], 'hirachy': 3, 'ref_parent': 429, 'children': [], 'group': 'Property'}, {'ref': 432, 'tag': 'Property', 'name': 'Live.Clip.MidiNote.note_id', 'description': "A numerical ID that's unique within the originating clip of the note. Not to beused directly, but important for other API calls, namely apply_note_modifications.", 'path': ['Live', 'Clip', 'MidiNote', 'note_id'], 'hirachy': 3, 'ref_parent': 429, 'children': [], 'group': 'Property'}, {'ref': 433, 'tag': 'Property', 'name': 'Live.Clip.MidiNote.pitch', 'description': None, 'path': ['Live', 'Clip', 'MidiNote', 'pitch'], 'hirachy': 3, 'ref_parent': 429, 'children': [], 'group': 'Property'}, {'ref': 434, 'tag': 'Property', 'name': 'Live.Clip.MidiNote.probability', 'description': None, 'path': ['Live', 'Clip', 'MidiNote', 'probability'], 'hirachy': 3, 'ref_parent': 429, 'children': [], 'group': 'Property'}, {'ref': 435, 'tag': 'Property', 'name': 'Live.Clip.MidiNote.release_velocity', 'description': None, 'path': ['Live', 'Clip', 'MidiNote', 'release_velocity'], 'hirachy': 3, 'ref_parent': 429, 'children': [], 'group': 'Property'}, {'ref': 436, 'tag': 'Property', 'name': 'Live.Clip.MidiNote.start_time', 'description': None, 'path': ['Live', 'Clip', 'MidiNote', 'start_time'], 'hirachy': 3, 'ref_parent': 429, 'children': [], 'group': 'Property'}, {'ref': 437, 'tag': 'Property', 'name': 'Live.Clip.MidiNote.velocity', 'description': None, 'path': ['Live', 'Clip', 'MidiNote', 'velocity'], 'hirachy': 3, 'ref_parent': 429, 'children': [], 'group': 'Property'}, {'ref': 438, 'tag': 'Property', 'name': 'Live.Clip.MidiNote.velocity_deviation', 'description': None, 'path': ['Live', 'Clip', 'MidiNote', 'velocity_deviation'], 'hirachy': 3, 'ref_parent': 429, 'children': [], 'group': 'Property'}, {'ref': 439, 'tag': 'Class', 'name': 'Live.Clip.MidiNoteSpecification', 'description': 'An object specifying the data for creating a MIDI note. To be used with the add_new_notes function.', 'path': ['Live', 'Clip', 'MidiNoteSpecification'], 'hirachy': 2, 'ref_parent': 206, 'children': [], 'group': None}, {'ref': 440, 'tag': 'Class', 'name': 'Live.Clip.MidiNoteVector', 'description': 'A container for holding MIDI notes from Live.', 'path': ['Live', 'Clip', 'MidiNoteVector'], 'hirachy': 2, 'ref_parent': 206, 'children': [441, 442], 'group': None}, {'ref': 441, 'tag': 'Method', 'name': 'Live.Clip.MidiNoteVector.append()', 'description': 'append( (MidiNoteVector)arg1, (object)arg2) -> None : C++ signature :  void append(std::__1::vector<NClipApi::TNoteInfo, std::__1::allocator<NClipApi::TNoteInfo> > {lvalue},boost::python::api::object)', 'path': ['Live', 'Clip', 'MidiNoteVector', 'append()'], 'hirachy': 3, 'ref_parent': 440, 'children': [], 'group': 'Method'}, {'ref': 442, 'tag': 'Method', 'name': 'Live.Clip.MidiNoteVector.extend()', 'description': 'extend( (MidiNoteVector)arg1, (object)arg2) -> None : C++ signature :  void extend(std::__1::vector<NClipApi::TNoteInfo, std::__1::allocator<NClipApi::TNoteInfo> > {lvalue},boost::python::api::object)', 'path': ['Live', 'Clip', 'MidiNoteVector', 'extend()'], 'hirachy': 3, 'ref_parent': 440, 'children': [], 'group': 'Method'}, {'ref': 443, 'tag': 'Class', 'name': 'Live.Clip.WarpMarker', 'description': 'This class represents a WarpMarker type.', 'path': ['Live', 'Clip', 'WarpMarker'], 'hirachy': 2, 'ref_parent': 206, 'children': [444, 445], 'group': None}, {'ref': 444, 'tag': 'Property', 'name': 'Live.Clip.WarpMarker.beat_time', 'description': "A WarpMarker's beat time.", 'path': ['Live', 'Clip', 'WarpMarker', 'beat_time'], 'hirachy': 3, 'ref_parent': 443, 'children': [], 'group': 'Property'}, {'ref': 445, 'tag': 'Property', 'name': 'Live.Clip.WarpMarker.sample_time', 'description': "A WarpMarker's sample time.", 'path': ['Live', 'Clip', 'WarpMarker', 'sample_time'], 'hirachy': 3, 'ref_parent': 443, 'children': [], 'group': 'Property'}, {'ref': 446, 'tag': 'Class', 'name': 'Live.Clip.WarpMarkerVector', 'description': 'A container for returning warp markers from Live.', 'path': ['Live', 'Clip', 'WarpMarkerVector'], 'hirachy': 2, 'ref_parent': 206, 'children': [447, 448], 'group': None}, {'ref': 447, 'tag': 'Method', 'name': 'Live.Clip.WarpMarkerVector.append()', 'description': 'append( (WarpMarkerVector)arg1, (object)arg2) -> None : C++ signature :  void append(std::__1::vector<NApiHelpers::TWarpMarker, std::__1::allocator<NApiHelpers::TWarpMarker> > {lvalue},boost::python::api::object)', 'path': ['Live', 'Clip', 'WarpMarkerVector', 'append()'], 'hirachy': 3, 'ref_parent': 446, 'children': [], 'group': 'Method'}, {'ref': 448, 'tag': 'Method', 'name': 'Live.Clip.WarpMarkerVector.extend()', 'description': 'extend( (WarpMarkerVector)arg1, (object)arg2) -> None : C++ signature :  void extend(std::__1::vector<NApiHelpers::TWarpMarker, std::__1::allocator<NApiHelpers::TWarpMarker> > {lvalue},boost::python::api::object)', 'path': ['Live', 'Clip', 'WarpMarkerVector', 'extend()'], 'hirachy': 3, 'ref_parent': 446, 'children': [], 'group': 'Method'}, {'ref': 449, 'tag': 'Class', 'name': 'Live.Clip.WarpMode', 'description': None, 'path': ['Live', 'Clip', 'WarpMode'], 'hirachy': 2, 'ref_parent': 206, 'children': [450, 451, 452, 453, 454, 455, 456, 457], 'group': None}, {'ref': 450, 'tag': 'Value', 'name': 'Live.Clip.WarpMode.beats', 'description': None, 'path': ['Live', 'Clip', 'WarpMode', 'beats'], 'hirachy': 3, 'ref_parent': 449, 'children': [], 'group': 'Value'}, {'ref': 451, 'tag': 'Value', 'name': 'Live.Clip.WarpMode.complex', 'description': None, 'path': ['Live', 'Clip', 'WarpMode', 'complex'], 'hirachy': 3, 'ref_parent': 449, 'children': [], 'group': 'Value'}, {'ref': 452, 'tag': 'Value', 'name': 'Live.Clip.WarpMode.complex_pro', 'description': None, 'path': ['Live', 'Clip', 'WarpMode', 'complex_pro'], 'hirachy': 3, 'ref_parent': 449, 'children': [], 'group': 'Value'}, {'ref': 453, 'tag': 'Value', 'name': 'Live.Clip.WarpMode.count', 'description': None, 'path': ['Live', 'Clip', 'WarpMode', 'count'], 'hirachy': 3, 'ref_parent': 449, 'children': [], 'group': 'Value'}, {'ref': 454, 'tag': 'Value', 'name': 'Live.Clip.WarpMode.repitch', 'description': None, 'path': ['Live', 'Clip', 'WarpMode', 'repitch'], 'hirachy': 3, 'ref_parent': 449, 'children': [], 'group': 'Value'}, {'ref': 455, 'tag': 'Value', 'name': 'Live.Clip.WarpMode.rex', 'description': None, 'path': ['Live', 'Clip', 'WarpMode', 'rex'], 'hirachy': 3, 'ref_parent': 449, 'children': [], 'group': 'Value'}, {'ref': 456, 'tag': 'Value', 'name': 'Live.Clip.WarpMode.texture', 'description': None, 'path': ['Live', 'Clip', 'WarpMode', 'texture'], 'hirachy': 3, 'ref_parent': 449, 'children': [], 'group': 'Value'}, {'ref': 457, 'tag': 'Value', 'name': 'Live.Clip.WarpMode.tones', 'description': None, 'path': ['Live', 'Clip', 'WarpMode', 'tones'], 'hirachy': 3, 'ref_parent': 449, 'children': [], 'group': 'Value'}, {'ref': 458, 'tag': 'Module', 'name': 'Live.ClipSlot', 'description': None, 'path': ['Live', 'ClipSlot'], 'hirachy': 1, 'ref_parent': 0, 'children': [459, 501], 'group': None}, {'ref': 459, 'tag': 'Class', 'name': 'Live.ClipSlot.ClipSlot', 'description': 'This class represents an entry in Lives Session view matrix.', 'path': ['Live', 'ClipSlot', 'ClipSlot'], 'hirachy': 2, 'ref_parent': 458, 'children': [460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500], 'group': None}, {'ref': 460, 'tag': 'Property', 'name': 'Live.ClipSlot.ClipSlot._live_ptr', 'description': None, 'path': ['Live', 'ClipSlot', 'ClipSlot', '_live_ptr'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'Property'}, {'ref': 461, 'tag': 'Property', 'name': 'Live.ClipSlot.ClipSlot.canonical_parent', 'description': 'Get the canonical parent of the ClipSlot.', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'canonical_parent'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'Property'}, {'ref': 462, 'tag': 'Property', 'name': 'Live.ClipSlot.ClipSlot.clip', 'description': 'Returns the Clip which this clipslots currently owns. Might be None.', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'clip'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'Property'}, {'ref': 463, 'tag': 'Property', 'name': 'Live.ClipSlot.ClipSlot.color', 'description': 'Returns the canonical color for the clip slot or None if it does not exist.', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'color'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'Property'}, {'ref': 464, 'tag': 'Property', 'name': 'Live.ClipSlot.ClipSlot.color_index', 'description': 'Returns the canonical color index for the clip slot or None if it does not exist.', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'color_index'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'Property'}, {'ref': 465, 'tag': 'Property', 'name': 'Live.ClipSlot.ClipSlot.controls_other_clips', 'description': 'Returns true if firing this slot will fire clips in other slots.Can only be true for slots in group tracks.', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'controls_other_clips'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'Property'}, {'ref': 466, 'tag': 'Property', 'name': 'Live.ClipSlot.ClipSlot.has_clip', 'description': 'Returns true if this Clipslot owns a Clip.', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'has_clip'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'Property'}, {'ref': 467, 'tag': 'Property', 'name': 'Live.ClipSlot.ClipSlot.has_stop_button', 'description': 'Get/Set if this Clip has a stop button, which will, if fired, stop anyother Clip that is currently playing the Track we do belong to.', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'has_stop_button'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'Property'}, {'ref': 468, 'tag': 'Property', 'name': 'Live.ClipSlot.ClipSlot.is_group_slot', 'description': 'Returns whether this clip slot is a group track slot (group slot).', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'is_group_slot'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'Property'}, {'ref': 469, 'tag': 'Property', 'name': 'Live.ClipSlot.ClipSlot.is_playing', 'description': 'Returns whether the clip associated with the slot is playing.', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'is_playing'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'Property'}, {'ref': 470, 'tag': 'Property', 'name': 'Live.ClipSlot.ClipSlot.is_recording', 'description': 'Returns whether the clip associated with the slot is recording.', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'is_recording'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'Property'}, {'ref': 471, 'tag': 'Property', 'name': 'Live.ClipSlot.ClipSlot.is_triggered', 'description': 'Const access to the triggering state of the clip slot.', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'is_triggered'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'Property'}, {'ref': 472, 'tag': 'Property', 'name': 'Live.ClipSlot.ClipSlot.playing_status', 'description': 'Const access to the playing state of the clip slot.Can be either stopped, playing, or recording.', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'playing_status'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'Property'}, {'ref': 473, 'tag': 'Property', 'name': 'Live.ClipSlot.ClipSlot.will_record_on_start', 'description': 'returns true if the clip slot will record on being fired.', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'will_record_on_start'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'Property'}, {'ref': 474, 'tag': 'listener Method', 'name': 'Live.ClipSlot.ClipSlot.add_color_index_listener()', 'description': 'add_color_index_listener( (ClipSlot)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;color_index&quot; has changed. C++ signature :  void add_color_index_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'add_color_index_listener()'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'listener Method'}, {'ref': 475, 'tag': 'listener Method', 'name': 'Live.ClipSlot.ClipSlot.add_color_listener()', 'description': 'add_color_listener( (ClipSlot)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;color&quot; has changed. C++ signature :  void add_color_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'add_color_listener()'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'listener Method'}, {'ref': 476, 'tag': 'listener Method', 'name': 'Live.ClipSlot.ClipSlot.add_controls_other_clips_listener()', 'description': 'add_controls_other_clips_listener( (ClipSlot)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;controls_other_clips&quot; has changed. C++ signature :  void add_controls_other_clips_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'add_controls_other_clips_listener()'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'listener Method'}, {'ref': 477, 'tag': 'listener Method', 'name': 'Live.ClipSlot.ClipSlot.add_has_clip_listener()', 'description': 'add_has_clip_listener( (ClipSlot)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;has_clip&quot; has changed. C++ signature :  void add_has_clip_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'add_has_clip_listener()'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'listener Method'}, {'ref': 478, 'tag': 'listener Method', 'name': 'Live.ClipSlot.ClipSlot.add_has_stop_button_listener()', 'description': 'add_has_stop_button_listener( (ClipSlot)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;has_stop_button&quot; has changed. C++ signature :  void add_has_stop_button_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'add_has_stop_button_listener()'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'listener Method'}, {'ref': 479, 'tag': 'listener Method', 'name': 'Live.ClipSlot.ClipSlot.add_is_triggered_listener()', 'description': 'add_is_triggered_listener( (ClipSlot)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_triggered&quot; has changed. C++ signature :  void add_is_triggered_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'add_is_triggered_listener()'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'listener Method'}, {'ref': 480, 'tag': 'listener Method', 'name': 'Live.ClipSlot.ClipSlot.add_playing_status_listener()', 'description': 'add_playing_status_listener( (ClipSlot)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;playing_status&quot; has changed. C++ signature :  void add_playing_status_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'add_playing_status_listener()'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'listener Method'}, {'ref': 481, 'tag': 'listener Method', 'name': 'Live.ClipSlot.ClipSlot.color_has_listener()', 'description': 'color_has_listener( (ClipSlot)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;color&quot;. C++ signature :  bool color_has_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'color_has_listener()'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'listener Method'}, {'ref': 482, 'tag': 'listener Method', 'name': 'Live.ClipSlot.ClipSlot.color_index_has_listener()', 'description': 'color_index_has_listener( (ClipSlot)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;color_index&quot;. C++ signature :  bool color_index_has_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'color_index_has_listener()'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'listener Method'}, {'ref': 483, 'tag': 'listener Method', 'name': 'Live.ClipSlot.ClipSlot.controls_other_clips_has_listener()', 'description': 'controls_other_clips_has_listener( (ClipSlot)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;controls_other_clips&quot;. C++ signature :  bool controls_other_clips_has_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'controls_other_clips_has_listener()'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'listener Method'}, {'ref': 484, 'tag': 'Method', 'name': 'Live.ClipSlot.ClipSlot.create_clip()', 'description': 'create_clip( (ClipSlot)arg1, (float)arg2) -> None : Creates an empty clip with the given length in the slot. Throws an error when called on non-empty slots or slots in non-MIDI tracks. C++ signature :  void create_clip(TPyHandle<AGroupAndClipSlotBase>,double)', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'create_clip()'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'Method'}, {'ref': 485, 'tag': 'Method', 'name': 'Live.ClipSlot.ClipSlot.delete_clip()', 'description': 'delete_clip( (ClipSlot)arg1) -> None : Removes the clip contained in the slot. Raises an exception if the slot was empty. C++ signature :  void delete_clip(TPyHandle<AGroupAndClipSlotBase>)', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'delete_clip()'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'Method'}, {'ref': 486, 'tag': 'Method', 'name': 'Live.ClipSlot.ClipSlot.duplicate_clip_to()', 'description': "duplicate_clip_to( (ClipSlot)arg1, (ClipSlot)arg2) -> None : Duplicates the slot's clip to the passed in target slot. Overrides the target's clip if it's not empty. Raises an exception if the (source) slot itself is empty, or if source and target have different track types (audio vs. MIDI). Also raises if the source or target slot is in a group track (so called group slot). C++ signature :  void duplicate_clip_to(TPyHandle<AGroupAndClipSlotBase>,TPyHandle<AGroupAndClipSlotBase>)", 'path': ['Live', 'ClipSlot', 'ClipSlot', 'duplicate_clip_to()'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'Method'}, {'ref': 487, 'tag': 'Method', 'name': 'Live.ClipSlot.ClipSlot.fire()', 'description': "fire( (ClipSlot)arg1) -> None : Fire a Clip if this Clipslot owns one, else trigger the stop button, if we have one. C++ signature :  void fire(TPyHandle<AGroupAndClipSlotBase>)fire( (ClipSlot)self [, (float)record_length=1.7976931348623157e+308 [, (int)launch_quantization=-2147483648 [, (bool)force_legato=False]]]) -> None : If 'record_length' is passed, the clip will be refired after the given recording length.  Raises an error if the slot owns a clip. 'launch_quantization' determines the quantization of global transport that is applied overriding the value in the song. 'force_legato' will make the clip play inmediatelly. The playhead will be moved to keep the clip synchronized. C++ signature :  void fire(TPyHandle<AGroupAndClipSlotBase> [,double=1.7976931348623157e+308 [,int=-2147483648 [,bool=False]]])", 'path': ['Live', 'ClipSlot', 'ClipSlot', 'fire()'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'Method'}, {'ref': 488, 'tag': 'listener Method', 'name': 'Live.ClipSlot.ClipSlot.has_clip_has_listener()', 'description': 'has_clip_has_listener( (ClipSlot)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;has_clip&quot;. C++ signature :  bool has_clip_has_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'has_clip_has_listener()'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'listener Method'}, {'ref': 489, 'tag': 'listener Method', 'name': 'Live.ClipSlot.ClipSlot.has_stop_button_has_listener()', 'description': 'has_stop_button_has_listener( (ClipSlot)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;has_stop_button&quot;. C++ signature :  bool has_stop_button_has_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'has_stop_button_has_listener()'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'listener Method'}, {'ref': 490, 'tag': 'listener Method', 'name': 'Live.ClipSlot.ClipSlot.is_triggered_has_listener()', 'description': 'is_triggered_has_listener( (ClipSlot)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_triggered&quot;. C++ signature :  bool is_triggered_has_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'is_triggered_has_listener()'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'listener Method'}, {'ref': 491, 'tag': 'listener Method', 'name': 'Live.ClipSlot.ClipSlot.playing_status_has_listener()', 'description': 'playing_status_has_listener( (ClipSlot)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;playing_status&quot;. C++ signature :  bool playing_status_has_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'playing_status_has_listener()'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'listener Method'}, {'ref': 492, 'tag': 'listener Method', 'name': 'Live.ClipSlot.ClipSlot.remove_color_index_listener()', 'description': 'remove_color_index_listener( (ClipSlot)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;color_index&quot;. C++ signature :  void remove_color_index_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'remove_color_index_listener()'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'listener Method'}, {'ref': 493, 'tag': 'listener Method', 'name': 'Live.ClipSlot.ClipSlot.remove_color_listener()', 'description': 'remove_color_listener( (ClipSlot)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;color&quot;. C++ signature :  void remove_color_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'remove_color_listener()'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'listener Method'}, {'ref': 494, 'tag': 'listener Method', 'name': 'Live.ClipSlot.ClipSlot.remove_controls_other_clips_listener()', 'description': 'remove_controls_other_clips_listener( (ClipSlot)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;controls_other_clips&quot;. C++ signature :  void remove_controls_other_clips_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'remove_controls_other_clips_listener()'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'listener Method'}, {'ref': 495, 'tag': 'listener Method', 'name': 'Live.ClipSlot.ClipSlot.remove_has_clip_listener()', 'description': 'remove_has_clip_listener( (ClipSlot)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;has_clip&quot;. C++ signature :  void remove_has_clip_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'remove_has_clip_listener()'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'listener Method'}, {'ref': 496, 'tag': 'listener Method', 'name': 'Live.ClipSlot.ClipSlot.remove_has_stop_button_listener()', 'description': 'remove_has_stop_button_listener( (ClipSlot)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;has_stop_button&quot;. C++ signature :  void remove_has_stop_button_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'remove_has_stop_button_listener()'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'listener Method'}, {'ref': 497, 'tag': 'listener Method', 'name': 'Live.ClipSlot.ClipSlot.remove_is_triggered_listener()', 'description': 'remove_is_triggered_listener( (ClipSlot)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_triggered&quot;. C++ signature :  void remove_is_triggered_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'remove_is_triggered_listener()'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'listener Method'}, {'ref': 498, 'tag': 'listener Method', 'name': 'Live.ClipSlot.ClipSlot.remove_playing_status_listener()', 'description': 'remove_playing_status_listener( (ClipSlot)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;playing_status&quot;. C++ signature :  void remove_playing_status_listener(TPyHandle<AGroupAndClipSlotBase>,boost::python::api::object)', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'remove_playing_status_listener()'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'listener Method'}, {'ref': 499, 'tag': 'Method', 'name': 'Live.ClipSlot.ClipSlot.set_fire_button_state()', 'description': "set_fire_button_state( (ClipSlot)arg1, (bool)arg2) -> None : Set the clipslot's fire button state directly. Supports all launch modes. C++ signature :  void set_fire_button_state(TPyHandle<AGroupAndClipSlotBase>,bool)", 'path': ['Live', 'ClipSlot', 'ClipSlot', 'set_fire_button_state()'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'Method'}, {'ref': 500, 'tag': 'Method', 'name': 'Live.ClipSlot.ClipSlot.stop()', 'description': 'stop( (ClipSlot)arg1) -> None : Stop playing the contained Clip, if there is a Clip and its currently playing. C++ signature :  void stop(TPyHandle<AGroupAndClipSlotBase>)', 'path': ['Live', 'ClipSlot', 'ClipSlot', 'stop()'], 'hirachy': 3, 'ref_parent': 459, 'children': [], 'group': 'Method'}, {'ref': 501, 'tag': 'Class', 'name': 'Live.ClipSlot.ClipSlotPlayingState', 'description': '', 'path': ['Live', 'ClipSlot', 'ClipSlotPlayingState'], 'hirachy': 2, 'ref_parent': 458, 'children': [502, 503, 504], 'group': None}, {'ref': 502, 'tag': 'Value', 'name': 'Live.ClipSlot.ClipSlotPlayingState.recording', 'description': '', 'path': ['Live', 'ClipSlot', 'ClipSlotPlayingState', 'recording'], 'hirachy': 3, 'ref_parent': 501, 'children': [], 'group': 'Value'}, {'ref': 503, 'tag': 'Value', 'name': 'Live.ClipSlot.ClipSlotPlayingState.started', 'description': '', 'path': ['Live', 'ClipSlot', 'ClipSlotPlayingState', 'started'], 'hirachy': 3, 'ref_parent': 501, 'children': [], 'group': 'Value'}, {'ref': 504, 'tag': 'Value', 'name': 'Live.ClipSlot.ClipSlotPlayingState.stopped', 'description': '', 'path': ['Live', 'ClipSlot', 'ClipSlotPlayingState', 'stopped'], 'hirachy': 3, 'ref_parent': 501, 'children': [], 'group': 'Value'}, {'ref': 505, 'tag': 'Module', 'name': 'Live.CompressorDevice', 'description': None, 'path': ['Live', 'CompressorDevice'], 'hirachy': 1, 'ref_parent': 0, 'children': [506], 'group': None}, {'ref': 506, 'tag': 'Class', 'name': 'Live.CompressorDevice.CompressorDevice', 'description': 'This class represents a Compressor device.', 'path': ['Live', 'CompressorDevice', 'CompressorDevice'], 'hirachy': 2, 'ref_parent': 505, 'children': [507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544], 'group': None}, {'ref': 507, 'tag': 'Property', 'name': 'Live.CompressorDevice.CompressorDevice._live_ptr', 'description': None, 'path': ['Live', 'CompressorDevice', 'CompressorDevice', '_live_ptr'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'Property'}, {'ref': 508, 'tag': 'Property', 'name': 'Live.CompressorDevice.CompressorDevice.available_input_routing_channels', 'description': 'Return a list of source channels for input routing in the sidechain.', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'available_input_routing_channels'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'Property'}, {'ref': 509, 'tag': 'Property', 'name': 'Live.CompressorDevice.CompressorDevice.available_input_routing_types', 'description': 'Return a list of source types for input routing in the sidechain.', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'available_input_routing_types'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'Property'}, {'ref': 510, 'tag': 'Property', 'name': 'Live.CompressorDevice.CompressorDevice.can_have_chains', 'description': 'Returns true if the device is a rack.', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'can_have_chains'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'Property'}, {'ref': 511, 'tag': 'Property', 'name': 'Live.CompressorDevice.CompressorDevice.can_have_drum_pads', 'description': 'Returns true if the device is a drum rack.', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'can_have_drum_pads'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'Property'}, {'ref': 512, 'tag': 'Property', 'name': 'Live.CompressorDevice.CompressorDevice.canonical_parent', 'description': 'Get the canonical parent of the Device.', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'canonical_parent'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'Property'}, {'ref': 513, 'tag': 'Property', 'name': 'Live.CompressorDevice.CompressorDevice.class_display_name', 'description': "Return const access to the name of the device's class name as displayed in Live's browser and device chain", 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'class_display_name'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'Property'}, {'ref': 514, 'tag': 'Property', 'name': 'Live.CompressorDevice.CompressorDevice.class_name', 'description': "Return const access to the name of the device's class.", 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'class_name'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'Property'}, {'ref': 515, 'tag': 'Property', 'name': 'Live.CompressorDevice.CompressorDevice.input_routing_channel', 'description': "Get and set the current source channel for input routing in the sidechain.Raises ValueError if the channel isn't one of the current values inavailable_input_routing_channels.", 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'input_routing_channel'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'Property'}, {'ref': 516, 'tag': 'Property', 'name': 'Live.CompressorDevice.CompressorDevice.input_routing_type', 'description': "Get and set the current source type for input routing in the sidechain.Raises ValueError if the type isn't one of the current values inavailable_input_routing_types.", 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'input_routing_type'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'Property'}, {'ref': 517, 'tag': 'Property', 'name': 'Live.CompressorDevice.CompressorDevice.is_active', 'description': "Return const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off.", 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'is_active'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'Property'}, {'ref': 518, 'tag': 'Property', 'name': 'Live.CompressorDevice.CompressorDevice.name', 'description': 'Return access to the name of the device.', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'name'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'Property'}, {'ref': 519, 'tag': 'Property', 'name': 'Live.CompressorDevice.CompressorDevice.parameters', 'description': 'Const access to the list of available automatable parameters for this device.', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'parameters'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'Property'}, {'ref': 520, 'tag': 'Property', 'name': 'Live.CompressorDevice.CompressorDevice.type', 'description': 'Return the type of the device.', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'type'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'Property'}, {'ref': 521, 'tag': 'Property', 'name': 'Live.CompressorDevice.CompressorDevice.view', 'description': 'Representing the view aspects of a device.', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'view'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'Property'}, {'ref': 522, 'tag': 'listener Method', 'name': 'Live.CompressorDevice.CompressorDevice.add_available_input_routing_channels_listener()', 'description': 'add_available_input_routing_channels_listener( (CompressorDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;available_input_routing_channels&quot; has changed. C++ signature :  void add_available_input_routing_channels_listener(TCompressorDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'add_available_input_routing_channels_listener()'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'listener Method'}, {'ref': 523, 'tag': 'listener Method', 'name': 'Live.CompressorDevice.CompressorDevice.add_available_input_routing_types_listener()', 'description': 'add_available_input_routing_types_listener( (CompressorDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;available_input_routing_types&quot; has changed. C++ signature :  void add_available_input_routing_types_listener(TCompressorDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'add_available_input_routing_types_listener()'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'listener Method'}, {'ref': 524, 'tag': 'listener Method', 'name': 'Live.CompressorDevice.CompressorDevice.add_input_routing_channel_listener()', 'description': 'add_input_routing_channel_listener( (CompressorDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;input_routing_channel&quot; has changed. C++ signature :  void add_input_routing_channel_listener(TCompressorDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'add_input_routing_channel_listener()'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'listener Method'}, {'ref': 525, 'tag': 'listener Method', 'name': 'Live.CompressorDevice.CompressorDevice.add_input_routing_type_listener()', 'description': 'add_input_routing_type_listener( (CompressorDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;input_routing_type&quot; has changed. C++ signature :  void add_input_routing_type_listener(TCompressorDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'add_input_routing_type_listener()'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'listener Method'}, {'ref': 526, 'tag': 'listener Method', 'name': 'Live.CompressorDevice.CompressorDevice.add_is_active_listener()', 'description': 'add_is_active_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_active&quot; has changed. C++ signature :  void add_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'add_is_active_listener()'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'listener Method'}, {'ref': 527, 'tag': 'listener Method', 'name': 'Live.CompressorDevice.CompressorDevice.add_name_listener()', 'description': 'add_name_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'add_name_listener()'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'listener Method'}, {'ref': 528, 'tag': 'listener Method', 'name': 'Live.CompressorDevice.CompressorDevice.add_parameters_listener()', 'description': 'add_parameters_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;parameters&quot; has changed. C++ signature :  void add_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'add_parameters_listener()'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'listener Method'}, {'ref': 529, 'tag': 'listener Method', 'name': 'Live.CompressorDevice.CompressorDevice.available_input_routing_channels_has_listener()', 'description': 'available_input_routing_channels_has_listener( (CompressorDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;available_input_routing_channels&quot;. C++ signature :  bool available_input_routing_channels_has_listener(TCompressorDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'available_input_routing_channels_has_listener()'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'listener Method'}, {'ref': 530, 'tag': 'listener Method', 'name': 'Live.CompressorDevice.CompressorDevice.available_input_routing_types_has_listener()', 'description': 'available_input_routing_types_has_listener( (CompressorDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;available_input_routing_types&quot;. C++ signature :  bool available_input_routing_types_has_listener(TCompressorDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'available_input_routing_types_has_listener()'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'listener Method'}, {'ref': 531, 'tag': 'listener Method', 'name': 'Live.CompressorDevice.CompressorDevice.input_routing_channel_has_listener()', 'description': 'input_routing_channel_has_listener( (CompressorDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;input_routing_channel&quot;. C++ signature :  bool input_routing_channel_has_listener(TCompressorDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'input_routing_channel_has_listener()'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'listener Method'}, {'ref': 532, 'tag': 'listener Method', 'name': 'Live.CompressorDevice.CompressorDevice.input_routing_type_has_listener()', 'description': 'input_routing_type_has_listener( (CompressorDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;input_routing_type&quot;. C++ signature :  bool input_routing_type_has_listener(TCompressorDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'input_routing_type_has_listener()'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'listener Method'}, {'ref': 533, 'tag': 'listener Method', 'name': 'Live.CompressorDevice.CompressorDevice.is_active_has_listener()', 'description': 'is_active_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_active&quot;. C++ signature :  bool is_active_has_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'is_active_has_listener()'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'listener Method'}, {'ref': 534, 'tag': 'listener Method', 'name': 'Live.CompressorDevice.CompressorDevice.name_has_listener()', 'description': 'name_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'name_has_listener()'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'listener Method'}, {'ref': 535, 'tag': 'listener Method', 'name': 'Live.CompressorDevice.CompressorDevice.parameters_has_listener()', 'description': 'parameters_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;parameters&quot;. C++ signature :  bool parameters_has_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'parameters_has_listener()'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'listener Method'}, {'ref': 536, 'tag': 'listener Method', 'name': 'Live.CompressorDevice.CompressorDevice.remove_available_input_routing_channels_listener()', 'description': 'remove_available_input_routing_channels_listener( (CompressorDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;available_input_routing_channels&quot;. C++ signature :  void remove_available_input_routing_channels_listener(TCompressorDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'remove_available_input_routing_channels_listener()'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'listener Method'}, {'ref': 537, 'tag': 'listener Method', 'name': 'Live.CompressorDevice.CompressorDevice.remove_available_input_routing_types_listener()', 'description': 'remove_available_input_routing_types_listener( (CompressorDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;available_input_routing_types&quot;. C++ signature :  void remove_available_input_routing_types_listener(TCompressorDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'remove_available_input_routing_types_listener()'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'listener Method'}, {'ref': 538, 'tag': 'listener Method', 'name': 'Live.CompressorDevice.CompressorDevice.remove_input_routing_channel_listener()', 'description': 'remove_input_routing_channel_listener( (CompressorDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;input_routing_channel&quot;. C++ signature :  void remove_input_routing_channel_listener(TCompressorDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'remove_input_routing_channel_listener()'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'listener Method'}, {'ref': 539, 'tag': 'listener Method', 'name': 'Live.CompressorDevice.CompressorDevice.remove_input_routing_type_listener()', 'description': 'remove_input_routing_type_listener( (CompressorDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;input_routing_type&quot;. C++ signature :  void remove_input_routing_type_listener(TCompressorDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'remove_input_routing_type_listener()'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'listener Method'}, {'ref': 540, 'tag': 'listener Method', 'name': 'Live.CompressorDevice.CompressorDevice.remove_is_active_listener()', 'description': 'remove_is_active_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_active&quot;. C++ signature :  void remove_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'remove_is_active_listener()'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'listener Method'}, {'ref': 541, 'tag': 'listener Method', 'name': 'Live.CompressorDevice.CompressorDevice.remove_name_listener()', 'description': 'remove_name_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'remove_name_listener()'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'listener Method'}, {'ref': 542, 'tag': 'listener Method', 'name': 'Live.CompressorDevice.CompressorDevice.remove_parameters_listener()', 'description': 'remove_parameters_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;parameters&quot;. C++ signature :  void remove_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'remove_parameters_listener()'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'listener Method'}, {'ref': 543, 'tag': 'Method', 'name': 'Live.CompressorDevice.CompressorDevice.store_chosen_bank()', 'description': 'store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -> None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle<ADevice>,int,int)', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'store_chosen_bank()'], 'hirachy': 3, 'ref_parent': 506, 'children': [], 'group': 'Method'}, {'ref': 544, 'tag': 'Class', 'name': 'Live.CompressorDevice.CompressorDevice.View', 'description': 'Representing the view aspects of a Compressor device.', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'View'], 'hirachy': 3, 'ref_parent': 506, 'children': [545, 546, 547, 548, 549, 550], 'group': None}, {'ref': 545, 'tag': 'Property', 'name': 'Live.CompressorDevice.CompressorDevice.View._live_ptr', 'description': None, 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'View', '_live_ptr'], 'hirachy': 4, 'ref_parent': 544, 'children': [], 'group': 'Property'}, {'ref': 546, 'tag': 'Property', 'name': 'Live.CompressorDevice.CompressorDevice.View.canonical_parent', 'description': 'Get the canonical parent of the View.', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'View', 'canonical_parent'], 'hirachy': 4, 'ref_parent': 544, 'children': [], 'group': 'Property'}, {'ref': 547, 'tag': 'Property', 'name': 'Live.CompressorDevice.CompressorDevice.View.is_collapsed', 'description': 'Get/Set/Listen if the device is shown collapsed in the device chain.', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'View', 'is_collapsed'], 'hirachy': 4, 'ref_parent': 544, 'children': [], 'group': 'Property'}, {'ref': 548, 'tag': 'listener Method', 'name': 'Live.CompressorDevice.CompressorDevice.View.add_is_collapsed_listener()', 'description': 'add_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_collapsed&quot; has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'View', 'add_is_collapsed_listener()'], 'hirachy': 4, 'ref_parent': 544, 'children': [], 'group': 'listener Method'}, {'ref': 549, 'tag': 'listener Method', 'name': 'Live.CompressorDevice.CompressorDevice.View.is_collapsed_has_listener()', 'description': 'is_collapsed_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_collapsed&quot;. C++ signature :  bool is_collapsed_has_listener(TPyViewData<ADevice>,boost::python::api::object)', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'View', 'is_collapsed_has_listener()'], 'hirachy': 4, 'ref_parent': 544, 'children': [], 'group': 'listener Method'}, {'ref': 550, 'tag': 'listener Method', 'name': 'Live.CompressorDevice.CompressorDevice.View.remove_is_collapsed_listener()', 'description': 'remove_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_collapsed&quot;. C++ signature :  void remove_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)', 'path': ['Live', 'CompressorDevice', 'CompressorDevice', 'View', 'remove_is_collapsed_listener()'], 'hirachy': 4, 'ref_parent': 544, 'children': [], 'group': 'listener Method'}, {'ref': 551, 'tag': 'Module', 'name': 'Live.Conversions', 'description': None, 'path': ['Live', 'Conversions'], 'hirachy': 1, 'ref_parent': 0, 'children': [552, 553, 554, 555, 556, 557, 558, 559], 'group': None}, {'ref': 552, 'tag': 'Built-In', 'name': 'Live.Conversions.audio_to_midi_clip()', 'description': 'audio_to_midi_clip( (Song)song, (Clip)audio_clip, (int)audio_to_midi_type) -> None : Creates a MIDI clip in a new MIDI track with the notes extracted from the given audio_clip. The `audio_to_midi_type` decides which algorithm is used in the process. Raises error when called with an inconvertible clip or invalid `audio_to_midi_type`. C++ signature :  void audio_to_midi_clip(TPyHandle<ASong>,TPyHandle<AClip>,int)', 'path': ['Live', 'Conversions', 'audio_to_midi_clip()'], 'hirachy': 2, 'ref_parent': 551, 'children': [], 'group': None}, {'ref': 553, 'tag': 'Built-In', 'name': 'Live.Conversions.create_drum_rack_from_audio_clip()', 'description': 'create_drum_rack_from_audio_clip( (Song)song, (Clip)audio_clip) -> None : Creates a new track with a drum rack with a simpler on the first pad with the specified audio clip. C++ signature :  void create_drum_rack_from_audio_clip(TPyHandle<ASong>,TPyHandle<AClip>)', 'path': ['Live', 'Conversions', 'create_drum_rack_from_audio_clip()'], 'hirachy': 2, 'ref_parent': 551, 'children': [], 'group': None}, {'ref': 554, 'tag': 'Built-In', 'name': 'Live.Conversions.create_midi_track_from_drum_pad()', 'description': "create_midi_track_from_drum_pad( (Song)song, (DrumPad)drum_pad) -> None : Creates a new Midi track containing the specified Drum Pad's device chain. C++ signature :  void create_midi_track_from_drum_pad(TPyHandle<ASong>,TPyHandle<ADrumGroupDevicePad>)", 'path': ['Live', 'Conversions', 'create_midi_track_from_drum_pad()'], 'hirachy': 2, 'ref_parent': 551, 'children': [], 'group': None}, {'ref': 555, 'tag': 'Built-In', 'name': 'Live.Conversions.create_midi_track_with_simpler()', 'description': 'create_midi_track_with_simpler( (Song)song, (Clip)audio_clip) -> None : Creates a new Midi track with a simpler including the specified audio clip. C++ signature :  void create_midi_track_with_simpler(TPyHandle<ASong>,TPyHandle<AClip>)', 'path': ['Live', 'Conversions', 'create_midi_track_with_simpler()'], 'hirachy': 2, 'ref_parent': 551, 'children': [], 'group': None}, {'ref': 556, 'tag': 'Built-In', 'name': 'Live.Conversions.is_convertible_to_midi()', 'description': 'is_convertible_to_midi( (Song)song, (Clip)audio_clip) -> bool : Returns whether `audio_clip` can be converted to MIDI. Raises error when called with a MIDI clip C++ signature :  bool is_convertible_to_midi(TPyHandle<ASong>,TPyHandle<AClip>)', 'path': ['Live', 'Conversions', 'is_convertible_to_midi()'], 'hirachy': 2, 'ref_parent': 551, 'children': [], 'group': None}, {'ref': 557, 'tag': 'Built-In', 'name': 'Live.Conversions.move_devices_on_track_to_new_drum_rack_pad()', 'description': 'move_devices_on_track_to_new_drum_rack_pad( (Song)song, (int)track_index) -> LomObject : Moves the entire device chain of the track according to the track index onto the C1 (note 36) drum pad of a new drum rack in a new track.If the track associated with the track index does not contain any devices nothing changes (i.e. a new track and new drum rack are not created). C++ signature :  TWeakPtr<TPyHandleBase> move_devices_on_track_to_new_drum_rack_pad(TPyHandle<ASong>,int)', 'path': ['Live', 'Conversions', 'move_devices_on_track_to_new_drum_rack_pad()'], 'hirachy': 2, 'ref_parent': 551, 'children': [], 'group': None}, {'ref': 558, 'tag': 'Built-In', 'name': 'Live.Conversions.sliced_simpler_to_drum_rack()', 'description': 'sliced_simpler_to_drum_rack( (Song)song, (SimplerDevice)simpler) -> None : Converts the Simpler into a Drum Rack, assigning each slice to a drum pad. Calling it on a non-sliced simpler raises an error. C++ signature :  void sliced_simpler_to_drum_rack(TPyHandle<ASong>,TSimplerDevicePyHandle)', 'path': ['Live', 'Conversions', 'sliced_simpler_to_drum_rack()'], 'hirachy': 2, 'ref_parent': 551, 'children': [], 'group': None}, {'ref': 559, 'tag': 'Class', 'name': 'Live.Conversions.AudioToMidiType', 'description': None, 'path': ['Live', 'Conversions', 'AudioToMidiType'], 'hirachy': 2, 'ref_parent': 551, 'children': [560, 561, 562], 'group': None}, {'ref': 560, 'tag': 'Value', 'name': 'Live.Conversions.AudioToMidiType.drums_to_midi', 'description': None, 'path': ['Live', 'Conversions', 'AudioToMidiType', 'drums_to_midi'], 'hirachy': 3, 'ref_parent': 559, 'children': [], 'group': 'Value'}, {'ref': 561, 'tag': 'Value', 'name': 'Live.Conversions.AudioToMidiType.harmony_to_midi', 'description': None, 'path': ['Live', 'Conversions', 'AudioToMidiType', 'harmony_to_midi'], 'hirachy': 3, 'ref_parent': 559, 'children': [], 'group': 'Value'}, {'ref': 562, 'tag': 'Value', 'name': 'Live.Conversions.AudioToMidiType.melody_to_midi', 'description': None, 'path': ['Live', 'Conversions', 'AudioToMidiType', 'melody_to_midi'], 'hirachy': 3, 'ref_parent': 559, 'children': [], 'group': 'Value'}, {'ref': 563, 'tag': 'Module', 'name': 'Live.Device', 'description': None, 'path': ['Live', 'Device'], 'hirachy': 1, 'ref_parent': 0, 'children': [564, 567, 596], 'group': None}, {'ref': 564, 'tag': 'Class', 'name': 'Live.Device.ATimeableValueVector', 'description': None, 'path': ['Live', 'Device', 'ATimeableValueVector'], 'hirachy': 2, 'ref_parent': 563, 'children': [565, 566], 'group': None}, {'ref': 565, 'tag': 'Method', 'name': 'Live.Device.ATimeableValueVector.append()', 'description': 'append( (ATimeableValueVector)arg1, (object)arg2) -> None : C++ signature :  void append(std::__1::vector<TWeakPtr<ATimeableValue>, std::__1::allocator<TWeakPtr<ATimeableValue> > > {lvalue},boost::python::api::object)', 'path': ['Live', 'Device', 'ATimeableValueVector', 'append()'], 'hirachy': 3, 'ref_parent': 564, 'children': [], 'group': 'Method'}, {'ref': 566, 'tag': 'Method', 'name': 'Live.Device.ATimeableValueVector.extend()', 'description': 'extend( (ATimeableValueVector)arg1, (object)arg2) -> None : C++ signature :  void extend(std::__1::vector<TWeakPtr<ATimeableValue>, std::__1::allocator<TWeakPtr<ATimeableValue> > > {lvalue},boost::python::api::object)', 'path': ['Live', 'Device', 'ATimeableValueVector', 'extend()'], 'hirachy': 3, 'ref_parent': 564, 'children': [], 'group': 'Method'}, {'ref': 567, 'tag': 'Class', 'name': 'Live.Device.Device', 'description': 'This class represents a MIDI or Audio DSP-Device in Live.', 'path': ['Live', 'Device', 'Device'], 'hirachy': 2, 'ref_parent': 563, 'children': [568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589], 'group': None}, {'ref': 568, 'tag': 'Property', 'name': 'Live.Device.Device._live_ptr', 'description': None, 'path': ['Live', 'Device', 'Device', '_live_ptr'], 'hirachy': 3, 'ref_parent': 567, 'children': [], 'group': 'Property'}, {'ref': 569, 'tag': 'Property', 'name': 'Live.Device.Device.can_have_chains', 'description': 'Returns true if the device is a rack.', 'path': ['Live', 'Device', 'Device', 'can_have_chains'], 'hirachy': 3, 'ref_parent': 567, 'children': [], 'group': 'Property'}, {'ref': 570, 'tag': 'Property', 'name': 'Live.Device.Device.can_have_drum_pads', 'description': 'Returns true if the device is a drum rack.', 'path': ['Live', 'Device', 'Device', 'can_have_drum_pads'], 'hirachy': 3, 'ref_parent': 567, 'children': [], 'group': 'Property'}, {'ref': 571, 'tag': 'Property', 'name': 'Live.Device.Device.canonical_parent', 'description': 'Get the canonical parent of the Device.', 'path': ['Live', 'Device', 'Device', 'canonical_parent'], 'hirachy': 3, 'ref_parent': 567, 'children': [], 'group': 'Property'}, {'ref': 572, 'tag': 'Property', 'name': 'Live.Device.Device.class_display_name', 'description': "Return const access to the name of the device's class name as displayed in Live's browser and device chain", 'path': ['Live', 'Device', 'Device', 'class_display_name'], 'hirachy': 3, 'ref_parent': 567, 'children': [], 'group': 'Property'}, {'ref': 573, 'tag': 'Property', 'name': 'Live.Device.Device.class_name', 'description': "Return const access to the name of the device's class.", 'path': ['Live', 'Device', 'Device', 'class_name'], 'hirachy': 3, 'ref_parent': 567, 'children': [], 'group': 'Property'}, {'ref': 574, 'tag': 'Property', 'name': 'Live.Device.Device.is_active', 'description': "Return const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off.", 'path': ['Live', 'Device', 'Device', 'is_active'], 'hirachy': 3, 'ref_parent': 567, 'children': [], 'group': 'Property'}, {'ref': 575, 'tag': 'Property', 'name': 'Live.Device.Device.name', 'description': 'Return access to the name of the device.', 'path': ['Live', 'Device', 'Device', 'name'], 'hirachy': 3, 'ref_parent': 567, 'children': [], 'group': 'Property'}, {'ref': 576, 'tag': 'Property', 'name': 'Live.Device.Device.parameters', 'description': 'Const access to the list of available automatable parameters for this device.', 'path': ['Live', 'Device', 'Device', 'parameters'], 'hirachy': 3, 'ref_parent': 567, 'children': [], 'group': 'Property'}, {'ref': 577, 'tag': 'Property', 'name': 'Live.Device.Device.type', 'description': 'Return the type of the device.', 'path': ['Live', 'Device', 'Device', 'type'], 'hirachy': 3, 'ref_parent': 567, 'children': [], 'group': 'Property'}, {'ref': 578, 'tag': 'Property', 'name': 'Live.Device.Device.view', 'description': 'Representing the view aspects of a device.', 'path': ['Live', 'Device', 'Device', 'view'], 'hirachy': 3, 'ref_parent': 567, 'children': [], 'group': 'Property'}, {'ref': 579, 'tag': 'listener Method', 'name': 'Live.Device.Device.add_is_active_listener()', 'description': 'add_is_active_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_active&quot; has changed. C++ signature :  void add_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'Device', 'Device', 'add_is_active_listener()'], 'hirachy': 3, 'ref_parent': 567, 'children': [], 'group': 'listener Method'}, {'ref': 580, 'tag': 'listener Method', 'name': 'Live.Device.Device.add_name_listener()', 'description': 'add_name_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'Device', 'Device', 'add_name_listener()'], 'hirachy': 3, 'ref_parent': 567, 'children': [], 'group': 'listener Method'}, {'ref': 581, 'tag': 'listener Method', 'name': 'Live.Device.Device.add_parameters_listener()', 'description': 'add_parameters_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;parameters&quot; has changed. C++ signature :  void add_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'Device', 'Device', 'add_parameters_listener()'], 'hirachy': 3, 'ref_parent': 567, 'children': [], 'group': 'listener Method'}, {'ref': 582, 'tag': 'listener Method', 'name': 'Live.Device.Device.is_active_has_listener()', 'description': 'is_active_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_active&quot;. C++ signature :  bool is_active_has_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'Device', 'Device', 'is_active_has_listener()'], 'hirachy': 3, 'ref_parent': 567, 'children': [], 'group': 'listener Method'}, {'ref': 583, 'tag': 'listener Method', 'name': 'Live.Device.Device.name_has_listener()', 'description': 'name_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'Device', 'Device', 'name_has_listener()'], 'hirachy': 3, 'ref_parent': 567, 'children': [], 'group': 'listener Method'}, {'ref': 584, 'tag': 'listener Method', 'name': 'Live.Device.Device.parameters_has_listener()', 'description': 'parameters_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;parameters&quot;. C++ signature :  bool parameters_has_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'Device', 'Device', 'parameters_has_listener()'], 'hirachy': 3, 'ref_parent': 567, 'children': [], 'group': 'listener Method'}, {'ref': 585, 'tag': 'listener Method', 'name': 'Live.Device.Device.remove_is_active_listener()', 'description': 'remove_is_active_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_active&quot;. C++ signature :  void remove_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'Device', 'Device', 'remove_is_active_listener()'], 'hirachy': 3, 'ref_parent': 567, 'children': [], 'group': 'listener Method'}, {'ref': 586, 'tag': 'listener Method', 'name': 'Live.Device.Device.remove_name_listener()', 'description': 'remove_name_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'Device', 'Device', 'remove_name_listener()'], 'hirachy': 3, 'ref_parent': 567, 'children': [], 'group': 'listener Method'}, {'ref': 587, 'tag': 'listener Method', 'name': 'Live.Device.Device.remove_parameters_listener()', 'description': 'remove_parameters_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;parameters&quot;. C++ signature :  void remove_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'Device', 'Device', 'remove_parameters_listener()'], 'hirachy': 3, 'ref_parent': 567, 'children': [], 'group': 'listener Method'}, {'ref': 588, 'tag': 'Method', 'name': 'Live.Device.Device.store_chosen_bank()', 'description': 'store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -> None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle<ADevice>,int,int)', 'path': ['Live', 'Device', 'Device', 'store_chosen_bank()'], 'hirachy': 3, 'ref_parent': 567, 'children': [], 'group': 'Method'}, {'ref': 589, 'tag': 'Class', 'name': 'Live.Device.Device.View', 'description': 'Representing the view aspects of a device.', 'path': ['Live', 'Device', 'Device', 'View'], 'hirachy': 3, 'ref_parent': 567, 'children': [590, 591, 592, 593, 594, 595], 'group': None}, {'ref': 590, 'tag': 'Property', 'name': 'Live.Device.Device.View._live_ptr', 'description': None, 'path': ['Live', 'Device', 'Device', 'View', '_live_ptr'], 'hirachy': 4, 'ref_parent': 589, 'children': [], 'group': 'Property'}, {'ref': 591, 'tag': 'Property', 'name': 'Live.Device.Device.View.canonical_parent', 'description': 'Get the canonical parent of the View.', 'path': ['Live', 'Device', 'Device', 'View', 'canonical_parent'], 'hirachy': 4, 'ref_parent': 589, 'children': [], 'group': 'Property'}, {'ref': 592, 'tag': 'Property', 'name': 'Live.Device.Device.View.is_collapsed', 'description': 'Get/Set/Listen if the device is shown collapsed in the device chain.', 'path': ['Live', 'Device', 'Device', 'View', 'is_collapsed'], 'hirachy': 4, 'ref_parent': 589, 'children': [], 'group': 'Property'}, {'ref': 593, 'tag': 'listener Method', 'name': 'Live.Device.Device.View.add_is_collapsed_listener()', 'description': 'add_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_collapsed&quot; has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)', 'path': ['Live', 'Device', 'Device', 'View', 'add_is_collapsed_listener()'], 'hirachy': 4, 'ref_parent': 589, 'children': [], 'group': 'listener Method'}, {'ref': 594, 'tag': 'listener Method', 'name': 'Live.Device.Device.View.is_collapsed_has_listener()', 'description': 'is_collapsed_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_collapsed&quot;. C++ signature :  bool is_collapsed_has_listener(TPyViewData<ADevice>,boost::python::api::object)', 'path': ['Live', 'Device', 'Device', 'View', 'is_collapsed_has_listener()'], 'hirachy': 4, 'ref_parent': 589, 'children': [], 'group': 'listener Method'}, {'ref': 595, 'tag': 'listener Method', 'name': 'Live.Device.Device.View.remove_is_collapsed_listener()', 'description': 'remove_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_collapsed&quot;. C++ signature :  void remove_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)', 'path': ['Live', 'Device', 'Device', 'View', 'remove_is_collapsed_listener()'], 'hirachy': 4, 'ref_parent': 589, 'children': [], 'group': 'listener Method'}, {'ref': 596, 'tag': 'Class', 'name': 'Live.Device.DeviceType', 'description': 'The type of the device.', 'path': ['Live', 'Device', 'DeviceType'], 'hirachy': 2, 'ref_parent': 563, 'children': [597, 598, 599, 600], 'group': None}, {'ref': 597, 'tag': 'Value', 'name': 'Live.Device.DeviceType.audio_effect', 'description': 'The type of the device.', 'path': ['Live', 'Device', 'DeviceType', 'audio_effect'], 'hirachy': 3, 'ref_parent': 596, 'children': [], 'group': 'Value'}, {'ref': 598, 'tag': 'Value', 'name': 'Live.Device.DeviceType.instrument', 'description': 'The type of the device.', 'path': ['Live', 'Device', 'DeviceType', 'instrument'], 'hirachy': 3, 'ref_parent': 596, 'children': [], 'group': 'Value'}, {'ref': 599, 'tag': 'Value', 'name': 'Live.Device.DeviceType.midi_effect', 'description': 'The type of the device.', 'path': ['Live', 'Device', 'DeviceType', 'midi_effect'], 'hirachy': 3, 'ref_parent': 596, 'children': [], 'group': 'Value'}, {'ref': 600, 'tag': 'Value', 'name': 'Live.Device.DeviceType.undefined', 'description': 'The type of the device.', 'path': ['Live', 'Device', 'DeviceType', 'undefined'], 'hirachy': 3, 'ref_parent': 596, 'children': [], 'group': 'Value'}, {'ref': 601, 'tag': 'Module', 'name': 'Live.DeviceIO', 'description': None, 'path': ['Live', 'DeviceIO'], 'hirachy': 1, 'ref_parent': 0, 'children': [602], 'group': None}, {'ref': 602, 'tag': 'Class', 'name': 'Live.DeviceIO.DeviceIO', 'description': 'This class represents a specific input or output bus of a device.', 'path': ['Live', 'DeviceIO', 'DeviceIO'], 'hirachy': 2, 'ref_parent': 601, 'children': [603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621], 'group': None}, {'ref': 603, 'tag': 'Property', 'name': 'Live.DeviceIO.DeviceIO._live_ptr', 'description': None, 'path': ['Live', 'DeviceIO', 'DeviceIO', '_live_ptr'], 'hirachy': 3, 'ref_parent': 602, 'children': [], 'group': 'Property'}, {'ref': 604, 'tag': 'Property', 'name': 'Live.DeviceIO.DeviceIO.available_routing_channels', 'description': 'Return a list of channels for this IO endpoint.', 'path': ['Live', 'DeviceIO', 'DeviceIO', 'available_routing_channels'], 'hirachy': 3, 'ref_parent': 602, 'children': [], 'group': 'Property'}, {'ref': 605, 'tag': 'Property', 'name': 'Live.DeviceIO.DeviceIO.available_routing_types', 'description': 'Return a list of available routing types for this IO endpoint.', 'path': ['Live', 'DeviceIO', 'DeviceIO', 'available_routing_types'], 'hirachy': 3, 'ref_parent': 602, 'children': [], 'group': 'Property'}, {'ref': 606, 'tag': 'Property', 'name': 'Live.DeviceIO.DeviceIO.canonical_parent', 'description': 'Get the canonical parent of the device IO.', 'path': ['Live', 'DeviceIO', 'DeviceIO', 'canonical_parent'], 'hirachy': 3, 'ref_parent': 602, 'children': [], 'group': 'Property'}, {'ref': 607, 'tag': 'Property', 'name': 'Live.DeviceIO.DeviceIO.default_external_routing_channel_is_none', 'description': 'Get and set whether the default routing channel for External routing types is none.', 'path': ['Live', 'DeviceIO', 'DeviceIO', 'default_external_routing_channel_is_none'], 'hirachy': 3, 'ref_parent': 602, 'children': [], 'group': 'Property'}, {'ref': 608, 'tag': 'Property', 'name': 'Live.DeviceIO.DeviceIO.routing_channel', 'description': "Get and set the current routing channel.Raises ValueError if the channel isn't one of the current values inavailable_routing_channels.", 'path': ['Live', 'DeviceIO', 'DeviceIO', 'routing_channel'], 'hirachy': 3, 'ref_parent': 602, 'children': [], 'group': 'Property'}, {'ref': 609, 'tag': 'Property', 'name': 'Live.DeviceIO.DeviceIO.routing_type', 'description': "Get and set the current routing type.Raises ValueError if the type isn't one of the current values inavailable_routing_types.", 'path': ['Live', 'DeviceIO', 'DeviceIO', 'routing_type'], 'hirachy': 3, 'ref_parent': 602, 'children': [], 'group': 'Property'}, {'ref': 610, 'tag': 'listener Method', 'name': 'Live.DeviceIO.DeviceIO.add_available_routing_channels_listener()', 'description': 'add_available_routing_channels_listener( (DeviceIO)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;available_routing_channels&quot; has changed. C++ signature :  void add_available_routing_channels_listener(TPyHandle<AMxDRoutable>,boost::python::api::object)', 'path': ['Live', 'DeviceIO', 'DeviceIO', 'add_available_routing_channels_listener()'], 'hirachy': 3, 'ref_parent': 602, 'children': [], 'group': 'listener Method'}, {'ref': 611, 'tag': 'listener Method', 'name': 'Live.DeviceIO.DeviceIO.add_available_routing_types_listener()', 'description': 'add_available_routing_types_listener( (DeviceIO)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;available_routing_types&quot; has changed. C++ signature :  void add_available_routing_types_listener(TPyHandle<AMxDRoutable>,boost::python::api::object)', 'path': ['Live', 'DeviceIO', 'DeviceIO', 'add_available_routing_types_listener()'], 'hirachy': 3, 'ref_parent': 602, 'children': [], 'group': 'listener Method'}, {'ref': 612, 'tag': 'listener Method', 'name': 'Live.DeviceIO.DeviceIO.add_routing_channel_listener()', 'description': 'add_routing_channel_listener( (DeviceIO)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;routing_channel&quot; has changed. C++ signature :  void add_routing_channel_listener(TPyHandle<AMxDRoutable>,boost::python::api::object)', 'path': ['Live', 'DeviceIO', 'DeviceIO', 'add_routing_channel_listener()'], 'hirachy': 3, 'ref_parent': 602, 'children': [], 'group': 'listener Method'}, {'ref': 613, 'tag': 'listener Method', 'name': 'Live.DeviceIO.DeviceIO.add_routing_type_listener()', 'description': 'add_routing_type_listener( (DeviceIO)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;routing_type&quot; has changed. C++ signature :  void add_routing_type_listener(TPyHandle<AMxDRoutable>,boost::python::api::object)', 'path': ['Live', 'DeviceIO', 'DeviceIO', 'add_routing_type_listener()'], 'hirachy': 3, 'ref_parent': 602, 'children': [], 'group': 'listener Method'}, {'ref': 614, 'tag': 'listener Method', 'name': 'Live.DeviceIO.DeviceIO.available_routing_channels_has_listener()', 'description': 'available_routing_channels_has_listener( (DeviceIO)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;available_routing_channels&quot;. C++ signature :  bool available_routing_channels_has_listener(TPyHandle<AMxDRoutable>,boost::python::api::object)', 'path': ['Live', 'DeviceIO', 'DeviceIO', 'available_routing_channels_has_listener()'], 'hirachy': 3, 'ref_parent': 602, 'children': [], 'group': 'listener Method'}, {'ref': 615, 'tag': 'listener Method', 'name': 'Live.DeviceIO.DeviceIO.available_routing_types_has_listener()', 'description': 'available_routing_types_has_listener( (DeviceIO)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;available_routing_types&quot;. C++ signature :  bool available_routing_types_has_listener(TPyHandle<AMxDRoutable>,boost::python::api::object)', 'path': ['Live', 'DeviceIO', 'DeviceIO', 'available_routing_types_has_listener()'], 'hirachy': 3, 'ref_parent': 602, 'children': [], 'group': 'listener Method'}, {'ref': 616, 'tag': 'listener Method', 'name': 'Live.DeviceIO.DeviceIO.remove_available_routing_channels_listener()', 'description': 'remove_available_routing_channels_listener( (DeviceIO)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;available_routing_channels&quot;. C++ signature :  void remove_available_routing_channels_listener(TPyHandle<AMxDRoutable>,boost::python::api::object)', 'path': ['Live', 'DeviceIO', 'DeviceIO', 'remove_available_routing_channels_listener()'], 'hirachy': 3, 'ref_parent': 602, 'children': [], 'group': 'listener Method'}, {'ref': 617, 'tag': 'listener Method', 'name': 'Live.DeviceIO.DeviceIO.remove_available_routing_types_listener()', 'description': 'remove_available_routing_types_listener( (DeviceIO)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;available_routing_types&quot;. C++ signature :  void remove_available_routing_types_listener(TPyHandle<AMxDRoutable>,boost::python::api::object)', 'path': ['Live', 'DeviceIO', 'DeviceIO', 'remove_available_routing_types_listener()'], 'hirachy': 3, 'ref_parent': 602, 'children': [], 'group': 'listener Method'}, {'ref': 618, 'tag': 'listener Method', 'name': 'Live.DeviceIO.DeviceIO.remove_routing_channel_listener()', 'description': 'remove_routing_channel_listener( (DeviceIO)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;routing_channel&quot;. C++ signature :  void remove_routing_channel_listener(TPyHandle<AMxDRoutable>,boost::python::api::object)', 'path': ['Live', 'DeviceIO', 'DeviceIO', 'remove_routing_channel_listener()'], 'hirachy': 3, 'ref_parent': 602, 'children': [], 'group': 'listener Method'}, {'ref': 619, 'tag': 'listener Method', 'name': 'Live.DeviceIO.DeviceIO.remove_routing_type_listener()', 'description': 'remove_routing_type_listener( (DeviceIO)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;routing_type&quot;. C++ signature :  void remove_routing_type_listener(TPyHandle<AMxDRoutable>,boost::python::api::object)', 'path': ['Live', 'DeviceIO', 'DeviceIO', 'remove_routing_type_listener()'], 'hirachy': 3, 'ref_parent': 602, 'children': [], 'group': 'listener Method'}, {'ref': 620, 'tag': 'listener Method', 'name': 'Live.DeviceIO.DeviceIO.routing_channel_has_listener()', 'description': 'routing_channel_has_listener( (DeviceIO)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;routing_channel&quot;. C++ signature :  bool routing_channel_has_listener(TPyHandle<AMxDRoutable>,boost::python::api::object)', 'path': ['Live', 'DeviceIO', 'DeviceIO', 'routing_channel_has_listener()'], 'hirachy': 3, 'ref_parent': 602, 'children': [], 'group': 'listener Method'}, {'ref': 621, 'tag': 'listener Method', 'name': 'Live.DeviceIO.DeviceIO.routing_type_has_listener()', 'description': 'routing_type_has_listener( (DeviceIO)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;routing_type&quot;. C++ signature :  bool routing_type_has_listener(TPyHandle<AMxDRoutable>,boost::python::api::object)', 'path': ['Live', 'DeviceIO', 'DeviceIO', 'routing_type_has_listener()'], 'hirachy': 3, 'ref_parent': 602, 'children': [], 'group': 'listener Method'}, {'ref': 622, 'tag': 'Module', 'name': 'Live.DeviceParameter', 'description': None, 'path': ['Live', 'DeviceParameter'], 'hirachy': 1, 'ref_parent': 0, 'children': [623, 627, 657], 'group': None}, {'ref': 623, 'tag': 'Class', 'name': 'Live.DeviceParameter.AutomationState', 'description': None, 'path': ['Live', 'DeviceParameter', 'AutomationState'], 'hirachy': 2, 'ref_parent': 622, 'children': [624, 625, 626], 'group': None}, {'ref': 624, 'tag': 'Value', 'name': 'Live.DeviceParameter.AutomationState.none', 'description': None, 'path': ['Live', 'DeviceParameter', 'AutomationState', 'none'], 'hirachy': 3, 'ref_parent': 623, 'children': [], 'group': 'Value'}, {'ref': 625, 'tag': 'Value', 'name': 'Live.DeviceParameter.AutomationState.overridden', 'description': None, 'path': ['Live', 'DeviceParameter', 'AutomationState', 'overridden'], 'hirachy': 3, 'ref_parent': 623, 'children': [], 'group': 'Value'}, {'ref': 626, 'tag': 'Value', 'name': 'Live.DeviceParameter.AutomationState.playing', 'description': None, 'path': ['Live', 'DeviceParameter', 'AutomationState', 'playing'], 'hirachy': 3, 'ref_parent': 623, 'children': [], 'group': 'Value'}, {'ref': 627, 'tag': 'Class', 'name': 'Live.DeviceParameter.DeviceParameter', 'description': 'This class represents a (automatable) parameter within a MIDI orAudio DSP-Device.', 'path': ['Live', 'DeviceParameter', 'DeviceParameter'], 'hirachy': 2, 'ref_parent': 622, 'children': [628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656], 'group': None}, {'ref': 628, 'tag': 'Property', 'name': 'Live.DeviceParameter.DeviceParameter._live_ptr', 'description': None, 'path': ['Live', 'DeviceParameter', 'DeviceParameter', '_live_ptr'], 'hirachy': 3, 'ref_parent': 627, 'children': [], 'group': 'Property'}, {'ref': 629, 'tag': 'Property', 'name': 'Live.DeviceParameter.DeviceParameter.automation_state', 'description': 'Returns state of type AutomationState.', 'path': ['Live', 'DeviceParameter', 'DeviceParameter', 'automation_state'], 'hirachy': 3, 'ref_parent': 627, 'children': [], 'group': 'Property'}, {'ref': 630, 'tag': 'Property', 'name': 'Live.DeviceParameter.DeviceParameter.canonical_parent', 'description': 'Get the canonical parent of the device parameter.', 'path': ['Live', 'DeviceParameter', 'DeviceParameter', 'canonical_parent'], 'hirachy': 3, 'ref_parent': 627, 'children': [], 'group': 'Property'}, {'ref': 631, 'tag': 'Property', 'name': 'Live.DeviceParameter.DeviceParameter.default_value', 'description': "Return the default value for this parameter.  A Default value is onlyavailable for non-quantized parameter types (see 'is_quantized').", 'path': ['Live', 'DeviceParameter', 'DeviceParameter', 'default_value'], 'hirachy': 3, 'ref_parent': 627, 'children': [], 'group': 'Property'}, {'ref': 632, 'tag': 'Property', 'name': 'Live.DeviceParameter.DeviceParameter.is_enabled', 'description': 'Returns false if the parameter has been macro mapped or disabled by Max.', 'path': ['Live', 'DeviceParameter', 'DeviceParameter', 'is_enabled'], 'hirachy': 3, 'ref_parent': 627, 'children': [], 'group': 'Property'}, {'ref': 633, 'tag': 'Property', 'name': 'Live.DeviceParameter.DeviceParameter.is_quantized', 'description': 'Returns True, if this value is a boolean or integer like switch.Non quantized values are continues float values.', 'path': ['Live', 'DeviceParameter', 'DeviceParameter', 'is_quantized'], 'hirachy': 3, 'ref_parent': 627, 'children': [], 'group': 'Property'}, {'ref': 634, 'tag': 'Property', 'name': 'Live.DeviceParameter.DeviceParameter.max', 'description': 'Returns const access to the upper value of the allowed range forthis parameter', 'path': ['Live', 'DeviceParameter', 'DeviceParameter', 'max'], 'hirachy': 3, 'ref_parent': 627, 'children': [], 'group': 'Property'}, {'ref': 635, 'tag': 'Property', 'name': 'Live.DeviceParameter.DeviceParameter.min', 'description': 'Returns const access to the lower value of the allowed range forthis parameter', 'path': ['Live', 'DeviceParameter', 'DeviceParameter', 'min'], 'hirachy': 3, 'ref_parent': 627, 'children': [], 'group': 'Property'}, {'ref': 636, 'tag': 'Property', 'name': 'Live.DeviceParameter.DeviceParameter.name', 'description': 'Returns const access the name of this parameter, as visible in Livesautomation choosers.', 'path': ['Live', 'DeviceParameter', 'DeviceParameter', 'name'], 'hirachy': 3, 'ref_parent': 627, 'children': [], 'group': 'Property'}, {'ref': 637, 'tag': 'Property', 'name': 'Live.DeviceParameter.DeviceParameter.original_name', 'description': 'Returns const access the original name of this parameter, unaffected ofany renamings.', 'path': ['Live', 'DeviceParameter', 'DeviceParameter', 'original_name'], 'hirachy': 3, 'ref_parent': 627, 'children': [], 'group': 'Property'}, {'ref': 638, 'tag': 'Property', 'name': 'Live.DeviceParameter.DeviceParameter.state', 'description': "Returns the state of the parameter:- enabled - the parameter's value can be changed,- irrelevant - the parameter is enabled, but value changes will not take any effect until it gets enabled,- disabled - the parameter's value cannot be changed.", 'path': ['Live', 'DeviceParameter', 'DeviceParameter', 'state'], 'hirachy': 3, 'ref_parent': 627, 'children': [], 'group': 'Property'}, {'ref': 639, 'tag': 'Property', 'name': 'Live.DeviceParameter.DeviceParameter.value', 'description': 'Get/Set the current value (as visible in the GUI) this parameter.The value must be inside the min/max properties of this device.', 'path': ['Live', 'DeviceParameter', 'DeviceParameter', 'value'], 'hirachy': 3, 'ref_parent': 627, 'children': [], 'group': 'Property'}, {'ref': 640, 'tag': 'Property', 'name': 'Live.DeviceParameter.DeviceParameter.value_items', 'description': "Return the list of possible values for this parameter. Raises an error if 'is_quantized' is False.", 'path': ['Live', 'DeviceParameter', 'DeviceParameter', 'value_items'], 'hirachy': 3, 'ref_parent': 627, 'children': [], 'group': 'Property'}, {'ref': 641, 'tag': 'listener Method', 'name': 'Live.DeviceParameter.DeviceParameter.add_automation_state_listener()', 'description': 'add_automation_state_listener( (DeviceParameter)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;automation_state&quot; has changed. C++ signature :  void add_automation_state_listener(TPyHandle<ATimeableValue>,boost::python::api::object)', 'path': ['Live', 'DeviceParameter', 'DeviceParameter', 'add_automation_state_listener()'], 'hirachy': 3, 'ref_parent': 627, 'children': [], 'group': 'listener Method'}, {'ref': 642, 'tag': 'listener Method', 'name': 'Live.DeviceParameter.DeviceParameter.add_name_listener()', 'description': 'add_name_listener( (DeviceParameter)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TPyHandle<ATimeableValue>,boost::python::api::object)', 'path': ['Live', 'DeviceParameter', 'DeviceParameter', 'add_name_listener()'], 'hirachy': 3, 'ref_parent': 627, 'children': [], 'group': 'listener Method'}, {'ref': 643, 'tag': 'listener Method', 'name': 'Live.DeviceParameter.DeviceParameter.add_state_listener()', 'description': 'add_state_listener( (DeviceParameter)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;state&quot; has changed. C++ signature :  void add_state_listener(TPyHandle<ATimeableValue>,boost::python::api::object)', 'path': ['Live', 'DeviceParameter', 'DeviceParameter', 'add_state_listener()'], 'hirachy': 3, 'ref_parent': 627, 'children': [], 'group': 'listener Method'}, {'ref': 644, 'tag': 'listener Method', 'name': 'Live.DeviceParameter.DeviceParameter.add_value_listener()', 'description': 'add_value_listener( (DeviceParameter)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;value&quot; has changed. C++ signature :  void add_value_listener(TPyHandle<ATimeableValue>,boost::python::api::object)', 'path': ['Live', 'DeviceParameter', 'DeviceParameter', 'add_value_listener()'], 'hirachy': 3, 'ref_parent': 627, 'children': [], 'group': 'listener Method'}, {'ref': 645, 'tag': 'listener Method', 'name': 'Live.DeviceParameter.DeviceParameter.automation_state_has_listener()', 'description': 'automation_state_has_listener( (DeviceParameter)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;automation_state&quot;. C++ signature :  bool automation_state_has_listener(TPyHandle<ATimeableValue>,boost::python::api::object)', 'path': ['Live', 'DeviceParameter', 'DeviceParameter', 'automation_state_has_listener()'], 'hirachy': 3, 'ref_parent': 627, 'children': [], 'group': 'listener Method'}, {'ref': 646, 'tag': 'Method', 'name': 'Live.DeviceParameter.DeviceParameter.begin_gesture()', 'description': 'begin_gesture( (DeviceParameter)arg1) -> None : Notify the begin of a modification of the parameter, when a sequence of modifications have to be consider a consistent group -- for Sexample, when recording automation. C++ signature :  void begin_gesture(TPyHandle<ATimeableValue>)', 'path': ['Live', 'DeviceParameter', 'DeviceParameter', 'begin_gesture()'], 'hirachy': 3, 'ref_parent': 627, 'children': [], 'group': 'Method'}, {'ref': 647, 'tag': 'Method', 'name': 'Live.DeviceParameter.DeviceParameter.end_gesture()', 'description': 'end_gesture( (DeviceParameter)arg1) -> None : Notify the end of a modification of the parameter. See begin_gesture. C++ signature :  void end_gesture(TPyHandle<ATimeableValue>)', 'path': ['Live', 'DeviceParameter', 'DeviceParameter', 'end_gesture()'], 'hirachy': 3, 'ref_parent': 627, 'children': [], 'group': 'Method'}, {'ref': 648, 'tag': 'listener Method', 'name': 'Live.DeviceParameter.DeviceParameter.name_has_listener()', 'description': 'name_has_listener( (DeviceParameter)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TPyHandle<ATimeableValue>,boost::python::api::object)', 'path': ['Live', 'DeviceParameter', 'DeviceParameter', 'name_has_listener()'], 'hirachy': 3, 'ref_parent': 627, 'children': [], 'group': 'listener Method'}, {'ref': 649, 'tag': 'Method', 'name': 'Live.DeviceParameter.DeviceParameter.re_enable_automation()', 'description': 're_enable_automation( (DeviceParameter)arg1) -> None : Reenable automation for this parameter. C++ signature :  void re_enable_automation(TPyHandle<ATimeableValue>)', 'path': ['Live', 'DeviceParameter', 'DeviceParameter', 're_enable_automation()'], 'hirachy': 3, 'ref_parent': 627, 'children': [], 'group': 'Method'}, {'ref': 650, 'tag': 'listener Method', 'name': 'Live.DeviceParameter.DeviceParameter.remove_automation_state_listener()', 'description': 'remove_automation_state_listener( (DeviceParameter)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;automation_state&quot;. C++ signature :  void remove_automation_state_listener(TPyHandle<ATimeableValue>,boost::python::api::object)', 'path': ['Live', 'DeviceParameter', 'DeviceParameter', 'remove_automation_state_listener()'], 'hirachy': 3, 'ref_parent': 627, 'children': [], 'group': 'listener Method'}, {'ref': 651, 'tag': 'listener Method', 'name': 'Live.DeviceParameter.DeviceParameter.remove_name_listener()', 'description': 'remove_name_listener( (DeviceParameter)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TPyHandle<ATimeableValue>,boost::python::api::object)', 'path': ['Live', 'DeviceParameter', 'DeviceParameter', 'remove_name_listener()'], 'hirachy': 3, 'ref_parent': 627, 'children': [], 'group': 'listener Method'}, {'ref': 652, 'tag': 'listener Method', 'name': 'Live.DeviceParameter.DeviceParameter.remove_state_listener()', 'description': 'remove_state_listener( (DeviceParameter)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;state&quot;. C++ signature :  void remove_state_listener(TPyHandle<ATimeableValue>,boost::python::api::object)', 'path': ['Live', 'DeviceParameter', 'DeviceParameter', 'remove_state_listener()'], 'hirachy': 3, 'ref_parent': 627, 'children': [], 'group': 'listener Method'}, {'ref': 653, 'tag': 'listener Method', 'name': 'Live.DeviceParameter.DeviceParameter.remove_value_listener()', 'description': 'remove_value_listener( (DeviceParameter)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;value&quot;. C++ signature :  void remove_value_listener(TPyHandle<ATimeableValue>,boost::python::api::object)', 'path': ['Live', 'DeviceParameter', 'DeviceParameter', 'remove_value_listener()'], 'hirachy': 3, 'ref_parent': 627, 'children': [], 'group': 'listener Method'}, {'ref': 654, 'tag': 'listener Method', 'name': 'Live.DeviceParameter.DeviceParameter.state_has_listener()', 'description': 'state_has_listener( (DeviceParameter)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;state&quot;. C++ signature :  bool state_has_listener(TPyHandle<ATimeableValue>,boost::python::api::object)', 'path': ['Live', 'DeviceParameter', 'DeviceParameter', 'state_has_listener()'], 'hirachy': 3, 'ref_parent': 627, 'children': [], 'group': 'listener Method'}, {'ref': 655, 'tag': 'Method', 'name': 'Live.DeviceParameter.DeviceParameter.str_for_value()', 'description': "str_for_value( (DeviceParameter)arg1, (float)arg2) -> unicode : Return a string representation of the given value. To be used for display purposes only.  This value can include characters like 'db' or 'hz', depending on the type of the parameter. C++ signature :  TString str_for_value(TPyHandle<ATimeableValue>,float)", 'path': ['Live', 'DeviceParameter', 'DeviceParameter', 'str_for_value()'], 'hirachy': 3, 'ref_parent': 627, 'children': [], 'group': 'Method'}, {'ref': 656, 'tag': 'listener Method', 'name': 'Live.DeviceParameter.DeviceParameter.value_has_listener()', 'description': 'value_has_listener( (DeviceParameter)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;value&quot;. C++ signature :  bool value_has_listener(TPyHandle<ATimeableValue>,boost::python::api::object)', 'path': ['Live', 'DeviceParameter', 'DeviceParameter', 'value_has_listener()'], 'hirachy': 3, 'ref_parent': 627, 'children': [], 'group': 'listener Method'}, {'ref': 657, 'tag': 'Class', 'name': 'Live.DeviceParameter.ParameterState', 'description': None, 'path': ['Live', 'DeviceParameter', 'ParameterState'], 'hirachy': 2, 'ref_parent': 622, 'children': [658, 659, 660], 'group': None}, {'ref': 658, 'tag': 'Value', 'name': 'Live.DeviceParameter.ParameterState.disabled', 'description': None, 'path': ['Live', 'DeviceParameter', 'ParameterState', 'disabled'], 'hirachy': 3, 'ref_parent': 657, 'children': [], 'group': 'Value'}, {'ref': 659, 'tag': 'Value', 'name': 'Live.DeviceParameter.ParameterState.enabled', 'description': None, 'path': ['Live', 'DeviceParameter', 'ParameterState', 'enabled'], 'hirachy': 3, 'ref_parent': 657, 'children': [], 'group': 'Value'}, {'ref': 660, 'tag': 'Value', 'name': 'Live.DeviceParameter.ParameterState.irrelevant', 'description': None, 'path': ['Live', 'DeviceParameter', 'ParameterState', 'irrelevant'], 'hirachy': 3, 'ref_parent': 657, 'children': [], 'group': 'Value'}, {'ref': 661, 'tag': 'Module', 'name': 'Live.DrumChain', 'description': None, 'path': ['Live', 'DrumChain'], 'hirachy': 1, 'ref_parent': 0, 'children': [662], 'group': None}, {'ref': 662, 'tag': 'Class', 'name': 'Live.DrumChain.DrumChain', 'description': 'This class represents a drum group device chain in Live.', 'path': ['Live', 'DrumChain', 'DrumChain'], 'hirachy': 2, 'ref_parent': 661, 'children': [663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710], 'group': None}, {'ref': 663, 'tag': 'Property', 'name': 'Live.DrumChain.DrumChain._live_ptr', 'description': None, 'path': ['Live', 'DrumChain', 'DrumChain', '_live_ptr'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'Property'}, {'ref': 664, 'tag': 'Property', 'name': 'Live.DrumChain.DrumChain.canonical_parent', 'description': 'Get the canonical parent of the chain.', 'path': ['Live', 'DrumChain', 'DrumChain', 'canonical_parent'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'Property'}, {'ref': 665, 'tag': 'Property', 'name': 'Live.DrumChain.DrumChain.choke_group', 'description': "Access to the chain's choke group setting.", 'path': ['Live', 'DrumChain', 'DrumChain', 'choke_group'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'Property'}, {'ref': 666, 'tag': 'Property', 'name': 'Live.DrumChain.DrumChain.color', 'description': 'Access the color index of the Chain.', 'path': ['Live', 'DrumChain', 'DrumChain', 'color'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'Property'}, {'ref': 667, 'tag': 'Property', 'name': 'Live.DrumChain.DrumChain.color_index', 'description': 'Access the color index of the Chain.', 'path': ['Live', 'DrumChain', 'DrumChain', 'color_index'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'Property'}, {'ref': 668, 'tag': 'Property', 'name': 'Live.DrumChain.DrumChain.devices', 'description': 'Return const access to all available Devices that are present in the chains', 'path': ['Live', 'DrumChain', 'DrumChain', 'devices'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'Property'}, {'ref': 669, 'tag': 'Property', 'name': 'Live.DrumChain.DrumChain.has_audio_input', 'description': 'return True, if this Chain can be feed with an Audio signal. This istrue for all Audio Chains.', 'path': ['Live', 'DrumChain', 'DrumChain', 'has_audio_input'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'Property'}, {'ref': 670, 'tag': 'Property', 'name': 'Live.DrumChain.DrumChain.has_audio_output', 'description': 'return True, if this Chain sends out an Audio signal. This istrue for all Audio Chains, and MIDI chains with an Instrument.', 'path': ['Live', 'DrumChain', 'DrumChain', 'has_audio_output'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'Property'}, {'ref': 671, 'tag': 'Property', 'name': 'Live.DrumChain.DrumChain.has_midi_input', 'description': 'return True, if this Chain can be feed with an Audio signal. This istrue for all MIDI Chains.', 'path': ['Live', 'DrumChain', 'DrumChain', 'has_midi_input'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'Property'}, {'ref': 672, 'tag': 'Property', 'name': 'Live.DrumChain.DrumChain.has_midi_output', 'description': 'return True, if this Chain sends out MIDI events. This istrue for all MIDI Chains with no Instruments.', 'path': ['Live', 'DrumChain', 'DrumChain', 'has_midi_output'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'Property'}, {'ref': 673, 'tag': 'Property', 'name': 'Live.DrumChain.DrumChain.is_auto_colored', 'description': 'Get/set access to the auto color flag of the Chain.If True, the Chain will always have the same color as the containingTrack or Chain.', 'path': ['Live', 'DrumChain', 'DrumChain', 'is_auto_colored'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'Property'}, {'ref': 674, 'tag': 'Property', 'name': 'Live.DrumChain.DrumChain.mixer_device', 'description': "Return access to the mixer device that holds the chain's mixer parameters:the Volume, Pan, and Sendamounts.", 'path': ['Live', 'DrumChain', 'DrumChain', 'mixer_device'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'Property'}, {'ref': 675, 'tag': 'Property', 'name': 'Live.DrumChain.DrumChain.mute', 'description': 'Mute/unmute the chain.', 'path': ['Live', 'DrumChain', 'DrumChain', 'mute'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'Property'}, {'ref': 676, 'tag': 'Property', 'name': 'Live.DrumChain.DrumChain.muted_via_solo', 'description': 'Return const access to whether this chain is muted due to some other chainbeing soloed.', 'path': ['Live', 'DrumChain', 'DrumChain', 'muted_via_solo'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'Property'}, {'ref': 677, 'tag': 'Property', 'name': 'Live.DrumChain.DrumChain.name', 'description': 'Read/write access to the name of the Chain, as visible in the track header.', 'path': ['Live', 'DrumChain', 'DrumChain', 'name'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'Property'}, {'ref': 678, 'tag': 'Property', 'name': 'Live.DrumChain.DrumChain.out_note', 'description': 'Access to the MIDI note sent to the devices in the chain.', 'path': ['Live', 'DrumChain', 'DrumChain', 'out_note'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'Property'}, {'ref': 679, 'tag': 'Property', 'name': 'Live.DrumChain.DrumChain.solo', 'description': 'Get/Set the solo status of the chain. Note that this will not disable thesolo state of any other Chain in the same rack. If you want exclusive solo, you have to disable the solo state of the other Chains manually.', 'path': ['Live', 'DrumChain', 'DrumChain', 'solo'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'Property'}, {'ref': 680, 'tag': 'listener Method', 'name': 'Live.DrumChain.DrumChain.add_choke_group_listener()', 'description': 'add_choke_group_listener( (DrumChain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;choke_group&quot; has changed. C++ signature :  void add_choke_group_listener(TDrumChainPyHandle,boost::python::api::object)', 'path': ['Live', 'DrumChain', 'DrumChain', 'add_choke_group_listener()'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'listener Method'}, {'ref': 681, 'tag': 'listener Method', 'name': 'Live.DrumChain.DrumChain.add_color_index_listener()', 'description': 'add_color_index_listener( (Chain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;color_index&quot; has changed. C++ signature :  void add_color_index_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'DrumChain', 'DrumChain', 'add_color_index_listener()'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'listener Method'}, {'ref': 682, 'tag': 'listener Method', 'name': 'Live.DrumChain.DrumChain.add_color_listener()', 'description': 'add_color_listener( (Chain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;color&quot; has changed. C++ signature :  void add_color_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'DrumChain', 'DrumChain', 'add_color_listener()'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'listener Method'}, {'ref': 683, 'tag': 'listener Method', 'name': 'Live.DrumChain.DrumChain.add_devices_listener()', 'description': 'add_devices_listener( (Chain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;devices&quot; has changed. C++ signature :  void add_devices_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'DrumChain', 'DrumChain', 'add_devices_listener()'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'listener Method'}, {'ref': 684, 'tag': 'listener Method', 'name': 'Live.DrumChain.DrumChain.add_is_auto_colored_listener()', 'description': 'add_is_auto_colored_listener( (Chain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_auto_colored&quot; has changed. C++ signature :  void add_is_auto_colored_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'DrumChain', 'DrumChain', 'add_is_auto_colored_listener()'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'listener Method'}, {'ref': 685, 'tag': 'listener Method', 'name': 'Live.DrumChain.DrumChain.add_mute_listener()', 'description': 'add_mute_listener( (Chain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;mute&quot; has changed. C++ signature :  void add_mute_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'DrumChain', 'DrumChain', 'add_mute_listener()'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'listener Method'}, {'ref': 686, 'tag': 'listener Method', 'name': 'Live.DrumChain.DrumChain.add_muted_via_solo_listener()', 'description': 'add_muted_via_solo_listener( (Chain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;muted_via_solo&quot; has changed. C++ signature :  void add_muted_via_solo_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'DrumChain', 'DrumChain', 'add_muted_via_solo_listener()'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'listener Method'}, {'ref': 687, 'tag': 'listener Method', 'name': 'Live.DrumChain.DrumChain.add_name_listener()', 'description': 'add_name_listener( (Chain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'DrumChain', 'DrumChain', 'add_name_listener()'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'listener Method'}, {'ref': 688, 'tag': 'listener Method', 'name': 'Live.DrumChain.DrumChain.add_out_note_listener()', 'description': 'add_out_note_listener( (DrumChain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;out_note&quot; has changed. C++ signature :  void add_out_note_listener(TDrumChainPyHandle,boost::python::api::object)', 'path': ['Live', 'DrumChain', 'DrumChain', 'add_out_note_listener()'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'listener Method'}, {'ref': 689, 'tag': 'listener Method', 'name': 'Live.DrumChain.DrumChain.add_solo_listener()', 'description': 'add_solo_listener( (Chain)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;solo&quot; has changed. C++ signature :  void add_solo_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'DrumChain', 'DrumChain', 'add_solo_listener()'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'listener Method'}, {'ref': 690, 'tag': 'listener Method', 'name': 'Live.DrumChain.DrumChain.choke_group_has_listener()', 'description': 'choke_group_has_listener( (DrumChain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;choke_group&quot;. C++ signature :  bool choke_group_has_listener(TDrumChainPyHandle,boost::python::api::object)', 'path': ['Live', 'DrumChain', 'DrumChain', 'choke_group_has_listener()'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'listener Method'}, {'ref': 691, 'tag': 'listener Method', 'name': 'Live.DrumChain.DrumChain.color_has_listener()', 'description': 'color_has_listener( (Chain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;color&quot;. C++ signature :  bool color_has_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'DrumChain', 'DrumChain', 'color_has_listener()'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'listener Method'}, {'ref': 692, 'tag': 'listener Method', 'name': 'Live.DrumChain.DrumChain.color_index_has_listener()', 'description': 'color_index_has_listener( (Chain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;color_index&quot;. C++ signature :  bool color_index_has_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'DrumChain', 'DrumChain', 'color_index_has_listener()'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'listener Method'}, {'ref': 693, 'tag': 'Method', 'name': 'Live.DrumChain.DrumChain.delete_device()', 'description': 'delete_device( (Chain)arg1, (int)arg2) -> None : Remove a device identified by its index from the chain. Throws runtime error if bad index.  C++ signature :  void delete_device(TChainPyHandle,int)', 'path': ['Live', 'DrumChain', 'DrumChain', 'delete_device()'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'Method'}, {'ref': 694, 'tag': 'listener Method', 'name': 'Live.DrumChain.DrumChain.devices_has_listener()', 'description': 'devices_has_listener( (Chain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;devices&quot;. C++ signature :  bool devices_has_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'DrumChain', 'DrumChain', 'devices_has_listener()'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'listener Method'}, {'ref': 695, 'tag': 'listener Method', 'name': 'Live.DrumChain.DrumChain.is_auto_colored_has_listener()', 'description': 'is_auto_colored_has_listener( (Chain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_auto_colored&quot;. C++ signature :  bool is_auto_colored_has_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'DrumChain', 'DrumChain', 'is_auto_colored_has_listener()'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'listener Method'}, {'ref': 696, 'tag': 'listener Method', 'name': 'Live.DrumChain.DrumChain.mute_has_listener()', 'description': 'mute_has_listener( (Chain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;mute&quot;. C++ signature :  bool mute_has_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'DrumChain', 'DrumChain', 'mute_has_listener()'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'listener Method'}, {'ref': 697, 'tag': 'listener Method', 'name': 'Live.DrumChain.DrumChain.muted_via_solo_has_listener()', 'description': 'muted_via_solo_has_listener( (Chain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;muted_via_solo&quot;. C++ signature :  bool muted_via_solo_has_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'DrumChain', 'DrumChain', 'muted_via_solo_has_listener()'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'listener Method'}, {'ref': 698, 'tag': 'listener Method', 'name': 'Live.DrumChain.DrumChain.name_has_listener()', 'description': 'name_has_listener( (Chain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'DrumChain', 'DrumChain', 'name_has_listener()'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'listener Method'}, {'ref': 699, 'tag': 'listener Method', 'name': 'Live.DrumChain.DrumChain.out_note_has_listener()', 'description': 'out_note_has_listener( (DrumChain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;out_note&quot;. C++ signature :  bool out_note_has_listener(TDrumChainPyHandle,boost::python::api::object)', 'path': ['Live', 'DrumChain', 'DrumChain', 'out_note_has_listener()'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'listener Method'}, {'ref': 700, 'tag': 'listener Method', 'name': 'Live.DrumChain.DrumChain.remove_choke_group_listener()', 'description': 'remove_choke_group_listener( (DrumChain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;choke_group&quot;. C++ signature :  void remove_choke_group_listener(TDrumChainPyHandle,boost::python::api::object)', 'path': ['Live', 'DrumChain', 'DrumChain', 'remove_choke_group_listener()'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'listener Method'}, {'ref': 701, 'tag': 'listener Method', 'name': 'Live.DrumChain.DrumChain.remove_color_index_listener()', 'description': 'remove_color_index_listener( (Chain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;color_index&quot;. C++ signature :  void remove_color_index_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'DrumChain', 'DrumChain', 'remove_color_index_listener()'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'listener Method'}, {'ref': 702, 'tag': 'listener Method', 'name': 'Live.DrumChain.DrumChain.remove_color_listener()', 'description': 'remove_color_listener( (Chain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;color&quot;. C++ signature :  void remove_color_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'DrumChain', 'DrumChain', 'remove_color_listener()'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'listener Method'}, {'ref': 703, 'tag': 'listener Method', 'name': 'Live.DrumChain.DrumChain.remove_devices_listener()', 'description': 'remove_devices_listener( (Chain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;devices&quot;. C++ signature :  void remove_devices_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'DrumChain', 'DrumChain', 'remove_devices_listener()'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'listener Method'}, {'ref': 704, 'tag': 'listener Method', 'name': 'Live.DrumChain.DrumChain.remove_is_auto_colored_listener()', 'description': 'remove_is_auto_colored_listener( (Chain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_auto_colored&quot;. C++ signature :  void remove_is_auto_colored_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'DrumChain', 'DrumChain', 'remove_is_auto_colored_listener()'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'listener Method'}, {'ref': 705, 'tag': 'listener Method', 'name': 'Live.DrumChain.DrumChain.remove_mute_listener()', 'description': 'remove_mute_listener( (Chain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;mute&quot;. C++ signature :  void remove_mute_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'DrumChain', 'DrumChain', 'remove_mute_listener()'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'listener Method'}, {'ref': 706, 'tag': 'listener Method', 'name': 'Live.DrumChain.DrumChain.remove_muted_via_solo_listener()', 'description': 'remove_muted_via_solo_listener( (Chain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;muted_via_solo&quot;. C++ signature :  void remove_muted_via_solo_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'DrumChain', 'DrumChain', 'remove_muted_via_solo_listener()'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'listener Method'}, {'ref': 707, 'tag': 'listener Method', 'name': 'Live.DrumChain.DrumChain.remove_name_listener()', 'description': 'remove_name_listener( (Chain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'DrumChain', 'DrumChain', 'remove_name_listener()'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'listener Method'}, {'ref': 708, 'tag': 'listener Method', 'name': 'Live.DrumChain.DrumChain.remove_out_note_listener()', 'description': 'remove_out_note_listener( (DrumChain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;out_note&quot;. C++ signature :  void remove_out_note_listener(TDrumChainPyHandle,boost::python::api::object)', 'path': ['Live', 'DrumChain', 'DrumChain', 'remove_out_note_listener()'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'listener Method'}, {'ref': 709, 'tag': 'listener Method', 'name': 'Live.DrumChain.DrumChain.remove_solo_listener()', 'description': 'remove_solo_listener( (Chain)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;solo&quot;. C++ signature :  void remove_solo_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'DrumChain', 'DrumChain', 'remove_solo_listener()'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'listener Method'}, {'ref': 710, 'tag': 'listener Method', 'name': 'Live.DrumChain.DrumChain.solo_has_listener()', 'description': 'solo_has_listener( (Chain)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;solo&quot;. C++ signature :  bool solo_has_listener(TChainPyHandle,boost::python::api::object)', 'path': ['Live', 'DrumChain', 'DrumChain', 'solo_has_listener()'], 'hirachy': 3, 'ref_parent': 662, 'children': [], 'group': 'listener Method'}, {'ref': 711, 'tag': 'Module', 'name': 'Live.DrumPad', 'description': None, 'path': ['Live', 'DrumPad'], 'hirachy': 1, 'ref_parent': 0, 'children': [712], 'group': None}, {'ref': 712, 'tag': 'Class', 'name': 'Live.DrumPad.DrumPad', 'description': 'This class represents a drum group device pad in Live.', 'path': ['Live', 'DrumPad', 'DrumPad'], 'hirachy': 2, 'ref_parent': 711, 'children': [713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732], 'group': None}, {'ref': 713, 'tag': 'Property', 'name': 'Live.DrumPad.DrumPad._live_ptr', 'description': None, 'path': ['Live', 'DrumPad', 'DrumPad', '_live_ptr'], 'hirachy': 3, 'ref_parent': 712, 'children': [], 'group': 'Property'}, {'ref': 714, 'tag': 'Property', 'name': 'Live.DrumPad.DrumPad.canonical_parent', 'description': 'Get the canonical parent of the drum pad.', 'path': ['Live', 'DrumPad', 'DrumPad', 'canonical_parent'], 'hirachy': 3, 'ref_parent': 712, 'children': [], 'group': 'Property'}, {'ref': 715, 'tag': 'Property', 'name': 'Live.DrumPad.DrumPad.chains', 'description': 'Return const access to the list of chains in this drum pad.', 'path': ['Live', 'DrumPad', 'DrumPad', 'chains'], 'hirachy': 3, 'ref_parent': 712, 'children': [], 'group': 'Property'}, {'ref': 716, 'tag': 'Property', 'name': 'Live.DrumPad.DrumPad.mute', 'description': 'Mute/unmute the pad.', 'path': ['Live', 'DrumPad', 'DrumPad', 'mute'], 'hirachy': 3, 'ref_parent': 712, 'children': [], 'group': 'Property'}, {'ref': 717, 'tag': 'Property', 'name': 'Live.DrumPad.DrumPad.name', 'description': "Return const access to the drum pad's name. It depends on the contained chains.", 'path': ['Live', 'DrumPad', 'DrumPad', 'name'], 'hirachy': 3, 'ref_parent': 712, 'children': [], 'group': 'Property'}, {'ref': 718, 'tag': 'Property', 'name': 'Live.DrumPad.DrumPad.note', 'description': 'Get the MIDI note of the drum pad.', 'path': ['Live', 'DrumPad', 'DrumPad', 'note'], 'hirachy': 3, 'ref_parent': 712, 'children': [], 'group': 'Property'}, {'ref': 719, 'tag': 'Property', 'name': 'Live.DrumPad.DrumPad.solo', 'description': 'Solo/unsolo the pad.', 'path': ['Live', 'DrumPad', 'DrumPad', 'solo'], 'hirachy': 3, 'ref_parent': 712, 'children': [], 'group': 'Property'}, {'ref': 720, 'tag': 'listener Method', 'name': 'Live.DrumPad.DrumPad.add_chains_listener()', 'description': 'add_chains_listener( (DrumPad)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;chains&quot; has changed. C++ signature :  void add_chains_listener(TPyHandle<ADrumGroupDevicePad>,boost::python::api::object)', 'path': ['Live', 'DrumPad', 'DrumPad', 'add_chains_listener()'], 'hirachy': 3, 'ref_parent': 712, 'children': [], 'group': 'listener Method'}, {'ref': 721, 'tag': 'listener Method', 'name': 'Live.DrumPad.DrumPad.add_mute_listener()', 'description': 'add_mute_listener( (DrumPad)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;mute&quot; has changed. C++ signature :  void add_mute_listener(TPyHandle<ADrumGroupDevicePad>,boost::python::api::object)', 'path': ['Live', 'DrumPad', 'DrumPad', 'add_mute_listener()'], 'hirachy': 3, 'ref_parent': 712, 'children': [], 'group': 'listener Method'}, {'ref': 722, 'tag': 'listener Method', 'name': 'Live.DrumPad.DrumPad.add_name_listener()', 'description': 'add_name_listener( (DrumPad)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TPyHandle<ADrumGroupDevicePad>,boost::python::api::object)', 'path': ['Live', 'DrumPad', 'DrumPad', 'add_name_listener()'], 'hirachy': 3, 'ref_parent': 712, 'children': [], 'group': 'listener Method'}, {'ref': 723, 'tag': 'listener Method', 'name': 'Live.DrumPad.DrumPad.add_solo_listener()', 'description': 'add_solo_listener( (DrumPad)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;solo&quot; has changed. C++ signature :  void add_solo_listener(TPyHandle<ADrumGroupDevicePad>,boost::python::api::object)', 'path': ['Live', 'DrumPad', 'DrumPad', 'add_solo_listener()'], 'hirachy': 3, 'ref_parent': 712, 'children': [], 'group': 'listener Method'}, {'ref': 724, 'tag': 'listener Method', 'name': 'Live.DrumPad.DrumPad.chains_has_listener()', 'description': 'chains_has_listener( (DrumPad)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;chains&quot;. C++ signature :  bool chains_has_listener(TPyHandle<ADrumGroupDevicePad>,boost::python::api::object)', 'path': ['Live', 'DrumPad', 'DrumPad', 'chains_has_listener()'], 'hirachy': 3, 'ref_parent': 712, 'children': [], 'group': 'listener Method'}, {'ref': 725, 'tag': 'Method', 'name': 'Live.DrumPad.DrumPad.delete_all_chains()', 'description': 'delete_all_chains( (DrumPad)arg1) -> None : Deletes all chains associated with a drum pad. This is equivalent to deleting a drum rack pad in Live. C++ signature :  void delete_all_chains(TPyHandle<ADrumGroupDevicePad>)', 'path': ['Live', 'DrumPad', 'DrumPad', 'delete_all_chains()'], 'hirachy': 3, 'ref_parent': 712, 'children': [], 'group': 'Method'}, {'ref': 726, 'tag': 'listener Method', 'name': 'Live.DrumPad.DrumPad.mute_has_listener()', 'description': 'mute_has_listener( (DrumPad)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;mute&quot;. C++ signature :  bool mute_has_listener(TPyHandle<ADrumGroupDevicePad>,boost::python::api::object)', 'path': ['Live', 'DrumPad', 'DrumPad', 'mute_has_listener()'], 'hirachy': 3, 'ref_parent': 712, 'children': [], 'group': 'listener Method'}, {'ref': 727, 'tag': 'listener Method', 'name': 'Live.DrumPad.DrumPad.name_has_listener()', 'description': 'name_has_listener( (DrumPad)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TPyHandle<ADrumGroupDevicePad>,boost::python::api::object)', 'path': ['Live', 'DrumPad', 'DrumPad', 'name_has_listener()'], 'hirachy': 3, 'ref_parent': 712, 'children': [], 'group': 'listener Method'}, {'ref': 728, 'tag': 'listener Method', 'name': 'Live.DrumPad.DrumPad.remove_chains_listener()', 'description': 'remove_chains_listener( (DrumPad)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;chains&quot;. C++ signature :  void remove_chains_listener(TPyHandle<ADrumGroupDevicePad>,boost::python::api::object)', 'path': ['Live', 'DrumPad', 'DrumPad', 'remove_chains_listener()'], 'hirachy': 3, 'ref_parent': 712, 'children': [], 'group': 'listener Method'}, {'ref': 729, 'tag': 'listener Method', 'name': 'Live.DrumPad.DrumPad.remove_mute_listener()', 'description': 'remove_mute_listener( (DrumPad)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;mute&quot;. C++ signature :  void remove_mute_listener(TPyHandle<ADrumGroupDevicePad>,boost::python::api::object)', 'path': ['Live', 'DrumPad', 'DrumPad', 'remove_mute_listener()'], 'hirachy': 3, 'ref_parent': 712, 'children': [], 'group': 'listener Method'}, {'ref': 730, 'tag': 'listener Method', 'name': 'Live.DrumPad.DrumPad.remove_name_listener()', 'description': 'remove_name_listener( (DrumPad)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TPyHandle<ADrumGroupDevicePad>,boost::python::api::object)', 'path': ['Live', 'DrumPad', 'DrumPad', 'remove_name_listener()'], 'hirachy': 3, 'ref_parent': 712, 'children': [], 'group': 'listener Method'}, {'ref': 731, 'tag': 'listener Method', 'name': 'Live.DrumPad.DrumPad.remove_solo_listener()', 'description': 'remove_solo_listener( (DrumPad)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;solo&quot;. C++ signature :  void remove_solo_listener(TPyHandle<ADrumGroupDevicePad>,boost::python::api::object)', 'path': ['Live', 'DrumPad', 'DrumPad', 'remove_solo_listener()'], 'hirachy': 3, 'ref_parent': 712, 'children': [], 'group': 'listener Method'}, {'ref': 732, 'tag': 'listener Method', 'name': 'Live.DrumPad.DrumPad.solo_has_listener()', 'description': 'solo_has_listener( (DrumPad)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;solo&quot;. C++ signature :  bool solo_has_listener(TPyHandle<ADrumGroupDevicePad>,boost::python::api::object)', 'path': ['Live', 'DrumPad', 'DrumPad', 'solo_has_listener()'], 'hirachy': 3, 'ref_parent': 712, 'children': [], 'group': 'listener Method'}, {'ref': 733, 'tag': 'Module', 'name': 'Live.Eq8Device', 'description': None, 'path': ['Live', 'Eq8Device'], 'hirachy': 1, 'ref_parent': 0, 'children': [734, 737, 782], 'group': None}, {'ref': 734, 'tag': 'Class', 'name': 'Live.Eq8Device.EditMode', 'description': None, 'path': ['Live', 'Eq8Device', 'EditMode'], 'hirachy': 2, 'ref_parent': 733, 'children': [735, 736], 'group': None}, {'ref': 735, 'tag': 'Value', 'name': 'Live.Eq8Device.EditMode.a', 'description': None, 'path': ['Live', 'Eq8Device', 'EditMode', 'a'], 'hirachy': 3, 'ref_parent': 734, 'children': [], 'group': 'Value'}, {'ref': 736, 'tag': 'Value', 'name': 'Live.Eq8Device.EditMode.b', 'description': None, 'path': ['Live', 'Eq8Device', 'EditMode', 'b'], 'hirachy': 3, 'ref_parent': 734, 'children': [], 'group': 'Value'}, {'ref': 737, 'tag': 'Class', 'name': 'Live.Eq8Device.Eq8Device', 'description': 'This class represents an Eq8 device.', 'path': ['Live', 'Eq8Device', 'Eq8Device'], 'hirachy': 2, 'ref_parent': 733, 'children': [738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771], 'group': None}, {'ref': 738, 'tag': 'Property', 'name': 'Live.Eq8Device.Eq8Device._live_ptr', 'description': None, 'path': ['Live', 'Eq8Device', 'Eq8Device', '_live_ptr'], 'hirachy': 3, 'ref_parent': 737, 'children': [], 'group': 'Property'}, {'ref': 739, 'tag': 'Property', 'name': 'Live.Eq8Device.Eq8Device.can_have_chains', 'description': 'Returns true if the device is a rack.', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'can_have_chains'], 'hirachy': 3, 'ref_parent': 737, 'children': [], 'group': 'Property'}, {'ref': 740, 'tag': 'Property', 'name': 'Live.Eq8Device.Eq8Device.can_have_drum_pads', 'description': 'Returns true if the device is a drum rack.', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'can_have_drum_pads'], 'hirachy': 3, 'ref_parent': 737, 'children': [], 'group': 'Property'}, {'ref': 741, 'tag': 'Property', 'name': 'Live.Eq8Device.Eq8Device.canonical_parent', 'description': 'Get the canonical parent of the Device.', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'canonical_parent'], 'hirachy': 3, 'ref_parent': 737, 'children': [], 'group': 'Property'}, {'ref': 742, 'tag': 'Property', 'name': 'Live.Eq8Device.Eq8Device.class_display_name', 'description': "Return const access to the name of the device's class name as displayed in Live's browser and device chain", 'path': ['Live', 'Eq8Device', 'Eq8Device', 'class_display_name'], 'hirachy': 3, 'ref_parent': 737, 'children': [], 'group': 'Property'}, {'ref': 743, 'tag': 'Property', 'name': 'Live.Eq8Device.Eq8Device.class_name', 'description': "Return const access to the name of the device's class.", 'path': ['Live', 'Eq8Device', 'Eq8Device', 'class_name'], 'hirachy': 3, 'ref_parent': 737, 'children': [], 'group': 'Property'}, {'ref': 744, 'tag': 'Property', 'name': 'Live.Eq8Device.Eq8Device.edit_mode', 'description': "Access to Eq8's edit mode.", 'path': ['Live', 'Eq8Device', 'Eq8Device', 'edit_mode'], 'hirachy': 3, 'ref_parent': 737, 'children': [], 'group': 'Property'}, {'ref': 745, 'tag': 'Property', 'name': 'Live.Eq8Device.Eq8Device.global_mode', 'description': "Access to Eq8's global mode.", 'path': ['Live', 'Eq8Device', 'Eq8Device', 'global_mode'], 'hirachy': 3, 'ref_parent': 737, 'children': [], 'group': 'Property'}, {'ref': 746, 'tag': 'Property', 'name': 'Live.Eq8Device.Eq8Device.is_active', 'description': "Return const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off.", 'path': ['Live', 'Eq8Device', 'Eq8Device', 'is_active'], 'hirachy': 3, 'ref_parent': 737, 'children': [], 'group': 'Property'}, {'ref': 747, 'tag': 'Property', 'name': 'Live.Eq8Device.Eq8Device.name', 'description': 'Return access to the name of the device.', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'name'], 'hirachy': 3, 'ref_parent': 737, 'children': [], 'group': 'Property'}, {'ref': 748, 'tag': 'Property', 'name': 'Live.Eq8Device.Eq8Device.oversample', 'description': "Access to Eq8's oversample value.", 'path': ['Live', 'Eq8Device', 'Eq8Device', 'oversample'], 'hirachy': 3, 'ref_parent': 737, 'children': [], 'group': 'Property'}, {'ref': 749, 'tag': 'Property', 'name': 'Live.Eq8Device.Eq8Device.parameters', 'description': 'Const access to the list of available automatable parameters for this device.', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'parameters'], 'hirachy': 3, 'ref_parent': 737, 'children': [], 'group': 'Property'}, {'ref': 750, 'tag': 'Property', 'name': 'Live.Eq8Device.Eq8Device.type', 'description': 'Return the type of the device.', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'type'], 'hirachy': 3, 'ref_parent': 737, 'children': [], 'group': 'Property'}, {'ref': 751, 'tag': 'Property', 'name': 'Live.Eq8Device.Eq8Device.view', 'description': 'Representing the view aspects of a device.', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'view'], 'hirachy': 3, 'ref_parent': 737, 'children': [], 'group': 'Property'}, {'ref': 752, 'tag': 'listener Method', 'name': 'Live.Eq8Device.Eq8Device.add_edit_mode_listener()', 'description': 'add_edit_mode_listener( (Eq8Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;edit_mode&quot; has changed. C++ signature :  void add_edit_mode_listener(TEq8DevicePyHandle,boost::python::api::object)', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'add_edit_mode_listener()'], 'hirachy': 3, 'ref_parent': 737, 'children': [], 'group': 'listener Method'}, {'ref': 753, 'tag': 'listener Method', 'name': 'Live.Eq8Device.Eq8Device.add_global_mode_listener()', 'description': 'add_global_mode_listener( (Eq8Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;global_mode&quot; has changed. C++ signature :  void add_global_mode_listener(TEq8DevicePyHandle,boost::python::api::object)', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'add_global_mode_listener()'], 'hirachy': 3, 'ref_parent': 737, 'children': [], 'group': 'listener Method'}, {'ref': 754, 'tag': 'listener Method', 'name': 'Live.Eq8Device.Eq8Device.add_is_active_listener()', 'description': 'add_is_active_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_active&quot; has changed. C++ signature :  void add_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'add_is_active_listener()'], 'hirachy': 3, 'ref_parent': 737, 'children': [], 'group': 'listener Method'}, {'ref': 755, 'tag': 'listener Method', 'name': 'Live.Eq8Device.Eq8Device.add_name_listener()', 'description': 'add_name_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'add_name_listener()'], 'hirachy': 3, 'ref_parent': 737, 'children': [], 'group': 'listener Method'}, {'ref': 756, 'tag': 'listener Method', 'name': 'Live.Eq8Device.Eq8Device.add_oversample_listener()', 'description': 'add_oversample_listener( (Eq8Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;oversample&quot; has changed. C++ signature :  void add_oversample_listener(TEq8DevicePyHandle,boost::python::api::object)', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'add_oversample_listener()'], 'hirachy': 3, 'ref_parent': 737, 'children': [], 'group': 'listener Method'}, {'ref': 757, 'tag': 'listener Method', 'name': 'Live.Eq8Device.Eq8Device.add_parameters_listener()', 'description': 'add_parameters_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;parameters&quot; has changed. C++ signature :  void add_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'add_parameters_listener()'], 'hirachy': 3, 'ref_parent': 737, 'children': [], 'group': 'listener Method'}, {'ref': 758, 'tag': 'listener Method', 'name': 'Live.Eq8Device.Eq8Device.edit_mode_has_listener()', 'description': 'edit_mode_has_listener( (Eq8Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;edit_mode&quot;. C++ signature :  bool edit_mode_has_listener(TEq8DevicePyHandle,boost::python::api::object)', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'edit_mode_has_listener()'], 'hirachy': 3, 'ref_parent': 737, 'children': [], 'group': 'listener Method'}, {'ref': 759, 'tag': 'listener Method', 'name': 'Live.Eq8Device.Eq8Device.global_mode_has_listener()', 'description': 'global_mode_has_listener( (Eq8Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;global_mode&quot;. C++ signature :  bool global_mode_has_listener(TEq8DevicePyHandle,boost::python::api::object)', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'global_mode_has_listener()'], 'hirachy': 3, 'ref_parent': 737, 'children': [], 'group': 'listener Method'}, {'ref': 760, 'tag': 'listener Method', 'name': 'Live.Eq8Device.Eq8Device.is_active_has_listener()', 'description': 'is_active_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_active&quot;. C++ signature :  bool is_active_has_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'is_active_has_listener()'], 'hirachy': 3, 'ref_parent': 737, 'children': [], 'group': 'listener Method'}, {'ref': 761, 'tag': 'listener Method', 'name': 'Live.Eq8Device.Eq8Device.name_has_listener()', 'description': 'name_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'name_has_listener()'], 'hirachy': 3, 'ref_parent': 737, 'children': [], 'group': 'listener Method'}, {'ref': 762, 'tag': 'listener Method', 'name': 'Live.Eq8Device.Eq8Device.oversample_has_listener()', 'description': 'oversample_has_listener( (Eq8Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;oversample&quot;. C++ signature :  bool oversample_has_listener(TEq8DevicePyHandle,boost::python::api::object)', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'oversample_has_listener()'], 'hirachy': 3, 'ref_parent': 737, 'children': [], 'group': 'listener Method'}, {'ref': 763, 'tag': 'listener Method', 'name': 'Live.Eq8Device.Eq8Device.parameters_has_listener()', 'description': 'parameters_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;parameters&quot;. C++ signature :  bool parameters_has_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'parameters_has_listener()'], 'hirachy': 3, 'ref_parent': 737, 'children': [], 'group': 'listener Method'}, {'ref': 764, 'tag': 'listener Method', 'name': 'Live.Eq8Device.Eq8Device.remove_edit_mode_listener()', 'description': 'remove_edit_mode_listener( (Eq8Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;edit_mode&quot;. C++ signature :  void remove_edit_mode_listener(TEq8DevicePyHandle,boost::python::api::object)', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'remove_edit_mode_listener()'], 'hirachy': 3, 'ref_parent': 737, 'children': [], 'group': 'listener Method'}, {'ref': 765, 'tag': 'listener Method', 'name': 'Live.Eq8Device.Eq8Device.remove_global_mode_listener()', 'description': 'remove_global_mode_listener( (Eq8Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;global_mode&quot;. C++ signature :  void remove_global_mode_listener(TEq8DevicePyHandle,boost::python::api::object)', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'remove_global_mode_listener()'], 'hirachy': 3, 'ref_parent': 737, 'children': [], 'group': 'listener Method'}, {'ref': 766, 'tag': 'listener Method', 'name': 'Live.Eq8Device.Eq8Device.remove_is_active_listener()', 'description': 'remove_is_active_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_active&quot;. C++ signature :  void remove_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'remove_is_active_listener()'], 'hirachy': 3, 'ref_parent': 737, 'children': [], 'group': 'listener Method'}, {'ref': 767, 'tag': 'listener Method', 'name': 'Live.Eq8Device.Eq8Device.remove_name_listener()', 'description': 'remove_name_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'remove_name_listener()'], 'hirachy': 3, 'ref_parent': 737, 'children': [], 'group': 'listener Method'}, {'ref': 768, 'tag': 'listener Method', 'name': 'Live.Eq8Device.Eq8Device.remove_oversample_listener()', 'description': 'remove_oversample_listener( (Eq8Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;oversample&quot;. C++ signature :  void remove_oversample_listener(TEq8DevicePyHandle,boost::python::api::object)', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'remove_oversample_listener()'], 'hirachy': 3, 'ref_parent': 737, 'children': [], 'group': 'listener Method'}, {'ref': 769, 'tag': 'listener Method', 'name': 'Live.Eq8Device.Eq8Device.remove_parameters_listener()', 'description': 'remove_parameters_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;parameters&quot;. C++ signature :  void remove_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'remove_parameters_listener()'], 'hirachy': 3, 'ref_parent': 737, 'children': [], 'group': 'listener Method'}, {'ref': 770, 'tag': 'Method', 'name': 'Live.Eq8Device.Eq8Device.store_chosen_bank()', 'description': 'store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -> None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle<ADevice>,int,int)', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'store_chosen_bank()'], 'hirachy': 3, 'ref_parent': 737, 'children': [], 'group': 'Method'}, {'ref': 771, 'tag': 'Class', 'name': 'Live.Eq8Device.Eq8Device.View', 'description': 'Representing the view aspects of an Eq8 device.', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'View'], 'hirachy': 3, 'ref_parent': 737, 'children': [772, 773, 774, 775, 776, 777, 778, 779, 780, 781], 'group': None}, {'ref': 772, 'tag': 'Property', 'name': 'Live.Eq8Device.Eq8Device.View._live_ptr', 'description': None, 'path': ['Live', 'Eq8Device', 'Eq8Device', 'View', '_live_ptr'], 'hirachy': 4, 'ref_parent': 771, 'children': [], 'group': 'Property'}, {'ref': 773, 'tag': 'Property', 'name': 'Live.Eq8Device.Eq8Device.View.canonical_parent', 'description': 'Get the canonical parent of the View.', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'View', 'canonical_parent'], 'hirachy': 4, 'ref_parent': 771, 'children': [], 'group': 'Property'}, {'ref': 774, 'tag': 'Property', 'name': 'Live.Eq8Device.Eq8Device.View.is_collapsed', 'description': 'Get/Set/Listen if the device is shown collapsed in the device chain.', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'View', 'is_collapsed'], 'hirachy': 4, 'ref_parent': 771, 'children': [], 'group': 'Property'}, {'ref': 775, 'tag': 'Property', 'name': 'Live.Eq8Device.Eq8Device.View.selected_band', 'description': 'Access to the selected filter band.', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'View', 'selected_band'], 'hirachy': 4, 'ref_parent': 771, 'children': [], 'group': 'Property'}, {'ref': 776, 'tag': 'listener Method', 'name': 'Live.Eq8Device.Eq8Device.View.add_is_collapsed_listener()', 'description': 'add_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_collapsed&quot; has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'View', 'add_is_collapsed_listener()'], 'hirachy': 4, 'ref_parent': 771, 'children': [], 'group': 'listener Method'}, {'ref': 777, 'tag': 'listener Method', 'name': 'Live.Eq8Device.Eq8Device.View.add_selected_band_listener()', 'description': 'add_selected_band_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;selected_band&quot; has changed. C++ signature :  void add_selected_band_listener(TEq8DevicePyViewData,boost::python::api::object)', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'View', 'add_selected_band_listener()'], 'hirachy': 4, 'ref_parent': 771, 'children': [], 'group': 'listener Method'}, {'ref': 778, 'tag': 'listener Method', 'name': 'Live.Eq8Device.Eq8Device.View.is_collapsed_has_listener()', 'description': 'is_collapsed_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_collapsed&quot;. C++ signature :  bool is_collapsed_has_listener(TPyViewData<ADevice>,boost::python::api::object)', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'View', 'is_collapsed_has_listener()'], 'hirachy': 4, 'ref_parent': 771, 'children': [], 'group': 'listener Method'}, {'ref': 779, 'tag': 'listener Method', 'name': 'Live.Eq8Device.Eq8Device.View.remove_is_collapsed_listener()', 'description': 'remove_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_collapsed&quot;. C++ signature :  void remove_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'View', 'remove_is_collapsed_listener()'], 'hirachy': 4, 'ref_parent': 771, 'children': [], 'group': 'listener Method'}, {'ref': 780, 'tag': 'listener Method', 'name': 'Live.Eq8Device.Eq8Device.View.remove_selected_band_listener()', 'description': 'remove_selected_band_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;selected_band&quot;. C++ signature :  void remove_selected_band_listener(TEq8DevicePyViewData,boost::python::api::object)', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'View', 'remove_selected_band_listener()'], 'hirachy': 4, 'ref_parent': 771, 'children': [], 'group': 'listener Method'}, {'ref': 781, 'tag': 'listener Method', 'name': 'Live.Eq8Device.Eq8Device.View.selected_band_has_listener()', 'description': 'selected_band_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;selected_band&quot;. C++ signature :  bool selected_band_has_listener(TEq8DevicePyViewData,boost::python::api::object)', 'path': ['Live', 'Eq8Device', 'Eq8Device', 'View', 'selected_band_has_listener()'], 'hirachy': 4, 'ref_parent': 771, 'children': [], 'group': 'listener Method'}, {'ref': 782, 'tag': 'Class', 'name': 'Live.Eq8Device.GlobalMode', 'description': None, 'path': ['Live', 'Eq8Device', 'GlobalMode'], 'hirachy': 2, 'ref_parent': 733, 'children': [783, 784, 785], 'group': None}, {'ref': 783, 'tag': 'Value', 'name': 'Live.Eq8Device.GlobalMode.left_right', 'description': None, 'path': ['Live', 'Eq8Device', 'GlobalMode', 'left_right'], 'hirachy': 3, 'ref_parent': 782, 'children': [], 'group': 'Value'}, {'ref': 784, 'tag': 'Value', 'name': 'Live.Eq8Device.GlobalMode.mid_side', 'description': None, 'path': ['Live', 'Eq8Device', 'GlobalMode', 'mid_side'], 'hirachy': 3, 'ref_parent': 782, 'children': [], 'group': 'Value'}, {'ref': 785, 'tag': 'Value', 'name': 'Live.Eq8Device.GlobalMode.stereo', 'description': None, 'path': ['Live', 'Eq8Device', 'GlobalMode', 'stereo'], 'hirachy': 3, 'ref_parent': 782, 'children': [], 'group': 'Value'}, {'ref': 786, 'tag': 'Module', 'name': 'Live.Groove', 'description': None, 'path': ['Live', 'Groove'], 'hirachy': 1, 'ref_parent': 0, 'children': [787, 795], 'group': None}, {'ref': 787, 'tag': 'Class', 'name': 'Live.Groove.Base', 'description': None, 'path': ['Live', 'Groove', 'Base'], 'hirachy': 2, 'ref_parent': 786, 'children': [788, 789, 790, 791, 792, 793, 794], 'group': None}, {'ref': 788, 'tag': 'Value', 'name': 'Live.Groove.Base.count', 'description': None, 'path': ['Live', 'Groove', 'Base', 'count'], 'hirachy': 3, 'ref_parent': 787, 'children': [], 'group': 'Value'}, {'ref': 789, 'tag': 'Value', 'name': 'Live.Groove.Base.gb_eight', 'description': None, 'path': ['Live', 'Groove', 'Base', 'gb_eight'], 'hirachy': 3, 'ref_parent': 787, 'children': [], 'group': 'Value'}, {'ref': 790, 'tag': 'Value', 'name': 'Live.Groove.Base.gb_eight_triplet', 'description': None, 'path': ['Live', 'Groove', 'Base', 'gb_eight_triplet'], 'hirachy': 3, 'ref_parent': 787, 'children': [], 'group': 'Value'}, {'ref': 791, 'tag': 'Value', 'name': 'Live.Groove.Base.gb_four', 'description': None, 'path': ['Live', 'Groove', 'Base', 'gb_four'], 'hirachy': 3, 'ref_parent': 787, 'children': [], 'group': 'Value'}, {'ref': 792, 'tag': 'Value', 'name': 'Live.Groove.Base.gb_sixteen', 'description': None, 'path': ['Live', 'Groove', 'Base', 'gb_sixteen'], 'hirachy': 3, 'ref_parent': 787, 'children': [], 'group': 'Value'}, {'ref': 793, 'tag': 'Value', 'name': 'Live.Groove.Base.gb_sixteen_triplet', 'description': None, 'path': ['Live', 'Groove', 'Base', 'gb_sixteen_triplet'], 'hirachy': 3, 'ref_parent': 787, 'children': [], 'group': 'Value'}, {'ref': 794, 'tag': 'Value', 'name': 'Live.Groove.Base.gb_thirtytwo', 'description': None, 'path': ['Live', 'Groove', 'Base', 'gb_thirtytwo'], 'hirachy': 3, 'ref_parent': 787, 'children': [], 'group': 'Value'}, {'ref': 795, 'tag': 'Class', 'name': 'Live.Groove.Groove', 'description': 'This class represents a groove in Live.', 'path': ['Live', 'Groove', 'Groove'], 'hirachy': 2, 'ref_parent': 786, 'children': [796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817], 'group': None}, {'ref': 796, 'tag': 'Property', 'name': 'Live.Groove.Groove._live_ptr', 'description': None, 'path': ['Live', 'Groove', 'Groove', '_live_ptr'], 'hirachy': 3, 'ref_parent': 795, 'children': [], 'group': 'Property'}, {'ref': 797, 'tag': 'Property', 'name': 'Live.Groove.Groove.base', 'description': "Get/set the groove's base grid.", 'path': ['Live', 'Groove', 'Groove', 'base'], 'hirachy': 3, 'ref_parent': 795, 'children': [], 'group': 'Property'}, {'ref': 798, 'tag': 'Property', 'name': 'Live.Groove.Groove.name', 'description': "Read/write/listen access to the groove's name", 'path': ['Live', 'Groove', 'Groove', 'name'], 'hirachy': 3, 'ref_parent': 795, 'children': [], 'group': 'Property'}, {'ref': 799, 'tag': 'Property', 'name': 'Live.Groove.Groove.quantization_amount', 'description': "Read/write/listen access to the groove's quantization amount.", 'path': ['Live', 'Groove', 'Groove', 'quantization_amount'], 'hirachy': 3, 'ref_parent': 795, 'children': [], 'group': 'Property'}, {'ref': 800, 'tag': 'Property', 'name': 'Live.Groove.Groove.random_amount', 'description': "Read/write/listen access to the groove's random amount.", 'path': ['Live', 'Groove', 'Groove', 'random_amount'], 'hirachy': 3, 'ref_parent': 795, 'children': [], 'group': 'Property'}, {'ref': 801, 'tag': 'Property', 'name': 'Live.Groove.Groove.timing_amount', 'description': "Read/write/listen access to the groove's timing amount.", 'path': ['Live', 'Groove', 'Groove', 'timing_amount'], 'hirachy': 3, 'ref_parent': 795, 'children': [], 'group': 'Property'}, {'ref': 802, 'tag': 'Property', 'name': 'Live.Groove.Groove.velocity_amount', 'description': "Read/write/listen access to the groove's velocity amount.", 'path': ['Live', 'Groove', 'Groove', 'velocity_amount'], 'hirachy': 3, 'ref_parent': 795, 'children': [], 'group': 'Property'}, {'ref': 803, 'tag': 'listener Method', 'name': 'Live.Groove.Groove.add_name_listener()', 'description': 'add_name_listener( (Groove)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TPyHandle<AGroove>,boost::python::api::object)', 'path': ['Live', 'Groove', 'Groove', 'add_name_listener()'], 'hirachy': 3, 'ref_parent': 795, 'children': [], 'group': 'listener Method'}, {'ref': 804, 'tag': 'listener Method', 'name': 'Live.Groove.Groove.add_quantization_amount_listener()', 'description': 'add_quantization_amount_listener( (Groove)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;quantization_amount&quot; has changed. C++ signature :  void add_quantization_amount_listener(TPyHandle<AGroove>,boost::python::api::object)', 'path': ['Live', 'Groove', 'Groove', 'add_quantization_amount_listener()'], 'hirachy': 3, 'ref_parent': 795, 'children': [], 'group': 'listener Method'}, {'ref': 805, 'tag': 'listener Method', 'name': 'Live.Groove.Groove.add_random_amount_listener()', 'description': 'add_random_amount_listener( (Groove)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;random_amount&quot; has changed. C++ signature :  void add_random_amount_listener(TPyHandle<AGroove>,boost::python::api::object)', 'path': ['Live', 'Groove', 'Groove', 'add_random_amount_listener()'], 'hirachy': 3, 'ref_parent': 795, 'children': [], 'group': 'listener Method'}, {'ref': 806, 'tag': 'listener Method', 'name': 'Live.Groove.Groove.add_timing_amount_listener()', 'description': 'add_timing_amount_listener( (Groove)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;timing_amount&quot; has changed. C++ signature :  void add_timing_amount_listener(TPyHandle<AGroove>,boost::python::api::object)', 'path': ['Live', 'Groove', 'Groove', 'add_timing_amount_listener()'], 'hirachy': 3, 'ref_parent': 795, 'children': [], 'group': 'listener Method'}, {'ref': 807, 'tag': 'listener Method', 'name': 'Live.Groove.Groove.add_velocity_amount_listener()', 'description': 'add_velocity_amount_listener( (Groove)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;velocity_amount&quot; has changed. C++ signature :  void add_velocity_amount_listener(TPyHandle<AGroove>,boost::python::api::object)', 'path': ['Live', 'Groove', 'Groove', 'add_velocity_amount_listener()'], 'hirachy': 3, 'ref_parent': 795, 'children': [], 'group': 'listener Method'}, {'ref': 808, 'tag': 'listener Method', 'name': 'Live.Groove.Groove.name_has_listener()', 'description': 'name_has_listener( (Groove)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TPyHandle<AGroove>,boost::python::api::object)', 'path': ['Live', 'Groove', 'Groove', 'name_has_listener()'], 'hirachy': 3, 'ref_parent': 795, 'children': [], 'group': 'listener Method'}, {'ref': 809, 'tag': 'listener Method', 'name': 'Live.Groove.Groove.quantization_amount_has_listener()', 'description': 'quantization_amount_has_listener( (Groove)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;quantization_amount&quot;. C++ signature :  bool quantization_amount_has_listener(TPyHandle<AGroove>,boost::python::api::object)', 'path': ['Live', 'Groove', 'Groove', 'quantization_amount_has_listener()'], 'hirachy': 3, 'ref_parent': 795, 'children': [], 'group': 'listener Method'}, {'ref': 810, 'tag': 'listener Method', 'name': 'Live.Groove.Groove.random_amount_has_listener()', 'description': 'random_amount_has_listener( (Groove)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;random_amount&quot;. C++ signature :  bool random_amount_has_listener(TPyHandle<AGroove>,boost::python::api::object)', 'path': ['Live', 'Groove', 'Groove', 'random_amount_has_listener()'], 'hirachy': 3, 'ref_parent': 795, 'children': [], 'group': 'listener Method'}, {'ref': 811, 'tag': 'listener Method', 'name': 'Live.Groove.Groove.remove_name_listener()', 'description': 'remove_name_listener( (Groove)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TPyHandle<AGroove>,boost::python::api::object)', 'path': ['Live', 'Groove', 'Groove', 'remove_name_listener()'], 'hirachy': 3, 'ref_parent': 795, 'children': [], 'group': 'listener Method'}, {'ref': 812, 'tag': 'listener Method', 'name': 'Live.Groove.Groove.remove_quantization_amount_listener()', 'description': 'remove_quantization_amount_listener( (Groove)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;quantization_amount&quot;. C++ signature :  void remove_quantization_amount_listener(TPyHandle<AGroove>,boost::python::api::object)', 'path': ['Live', 'Groove', 'Groove', 'remove_quantization_amount_listener()'], 'hirachy': 3, 'ref_parent': 795, 'children': [], 'group': 'listener Method'}, {'ref': 813, 'tag': 'listener Method', 'name': 'Live.Groove.Groove.remove_random_amount_listener()', 'description': 'remove_random_amount_listener( (Groove)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;random_amount&quot;. C++ signature :  void remove_random_amount_listener(TPyHandle<AGroove>,boost::python::api::object)', 'path': ['Live', 'Groove', 'Groove', 'remove_random_amount_listener()'], 'hirachy': 3, 'ref_parent': 795, 'children': [], 'group': 'listener Method'}, {'ref': 814, 'tag': 'listener Method', 'name': 'Live.Groove.Groove.remove_timing_amount_listener()', 'description': 'remove_timing_amount_listener( (Groove)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;timing_amount&quot;. C++ signature :  void remove_timing_amount_listener(TPyHandle<AGroove>,boost::python::api::object)', 'path': ['Live', 'Groove', 'Groove', 'remove_timing_amount_listener()'], 'hirachy': 3, 'ref_parent': 795, 'children': [], 'group': 'listener Method'}, {'ref': 815, 'tag': 'listener Method', 'name': 'Live.Groove.Groove.remove_velocity_amount_listener()', 'description': 'remove_velocity_amount_listener( (Groove)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;velocity_amount&quot;. C++ signature :  void remove_velocity_amount_listener(TPyHandle<AGroove>,boost::python::api::object)', 'path': ['Live', 'Groove', 'Groove', 'remove_velocity_amount_listener()'], 'hirachy': 3, 'ref_parent': 795, 'children': [], 'group': 'listener Method'}, {'ref': 816, 'tag': 'listener Method', 'name': 'Live.Groove.Groove.timing_amount_has_listener()', 'description': 'timing_amount_has_listener( (Groove)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;timing_amount&quot;. C++ signature :  bool timing_amount_has_listener(TPyHandle<AGroove>,boost::python::api::object)', 'path': ['Live', 'Groove', 'Groove', 'timing_amount_has_listener()'], 'hirachy': 3, 'ref_parent': 795, 'children': [], 'group': 'listener Method'}, {'ref': 817, 'tag': 'listener Method', 'name': 'Live.Groove.Groove.velocity_amount_has_listener()', 'description': 'velocity_amount_has_listener( (Groove)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;velocity_amount&quot;. C++ signature :  bool velocity_amount_has_listener(TPyHandle<AGroove>,boost::python::api::object)', 'path': ['Live', 'Groove', 'Groove', 'velocity_amount_has_listener()'], 'hirachy': 3, 'ref_parent': 795, 'children': [], 'group': 'listener Method'}, {'ref': 818, 'tag': 'Module', 'name': 'Live.GroovePool', 'description': None, 'path': ['Live', 'GroovePool'], 'hirachy': 1, 'ref_parent': 0, 'children': [819], 'group': None}, {'ref': 819, 'tag': 'Class', 'name': 'Live.GroovePool.GroovePool', 'description': 'This class represents the groove pool in Live.', 'path': ['Live', 'GroovePool', 'GroovePool'], 'hirachy': 2, 'ref_parent': 818, 'children': [820, 821, 822, 823, 824], 'group': None}, {'ref': 820, 'tag': 'Property', 'name': 'Live.GroovePool.GroovePool._live_ptr', 'description': None, 'path': ['Live', 'GroovePool', 'GroovePool', '_live_ptr'], 'hirachy': 3, 'ref_parent': 819, 'children': [], 'group': 'Property'}, {'ref': 821, 'tag': 'Property', 'name': 'Live.GroovePool.GroovePool.grooves', 'description': 'Access to the list of grooves', 'path': ['Live', 'GroovePool', 'GroovePool', 'grooves'], 'hirachy': 3, 'ref_parent': 819, 'children': [], 'group': 'Property'}, {'ref': 822, 'tag': 'listener Method', 'name': 'Live.GroovePool.GroovePool.add_grooves_listener()', 'description': 'add_grooves_listener( (GroovePool)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;grooves&quot; has changed. C++ signature :  void add_grooves_listener(TPyHandle<AGroovePool>,boost::python::api::object)', 'path': ['Live', 'GroovePool', 'GroovePool', 'add_grooves_listener()'], 'hirachy': 3, 'ref_parent': 819, 'children': [], 'group': 'listener Method'}, {'ref': 823, 'tag': 'listener Method', 'name': 'Live.GroovePool.GroovePool.grooves_has_listener()', 'description': 'grooves_has_listener( (GroovePool)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;grooves&quot;. C++ signature :  bool grooves_has_listener(TPyHandle<AGroovePool>,boost::python::api::object)', 'path': ['Live', 'GroovePool', 'GroovePool', 'grooves_has_listener()'], 'hirachy': 3, 'ref_parent': 819, 'children': [], 'group': 'listener Method'}, {'ref': 824, 'tag': 'listener Method', 'name': 'Live.GroovePool.GroovePool.remove_grooves_listener()', 'description': 'remove_grooves_listener( (GroovePool)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;grooves&quot;. C++ signature :  void remove_grooves_listener(TPyHandle<AGroovePool>,boost::python::api::object)', 'path': ['Live', 'GroovePool', 'GroovePool', 'remove_grooves_listener()'], 'hirachy': 3, 'ref_parent': 819, 'children': [], 'group': 'listener Method'}, {'ref': 825, 'tag': 'Module', 'name': 'Live.HybridReverbDevice', 'description': None, 'path': ['Live', 'HybridReverbDevice'], 'hirachy': 1, 'ref_parent': 0, 'children': [826], 'group': None}, {'ref': 826, 'tag': 'Class', 'name': 'Live.HybridReverbDevice.HybridReverbDevice', 'description': 'This class represents a Hybrid Reverb device.', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice'], 'hirachy': 2, 'ref_parent': 825, 'children': [827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877], 'group': None}, {'ref': 827, 'tag': 'Property', 'name': 'Live.HybridReverbDevice.HybridReverbDevice._live_ptr', 'description': None, 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', '_live_ptr'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'Property'}, {'ref': 828, 'tag': 'Property', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.can_have_chains', 'description': 'Returns true if the device is a rack.', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'can_have_chains'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'Property'}, {'ref': 829, 'tag': 'Property', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.can_have_drum_pads', 'description': 'Returns true if the device is a drum rack.', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'can_have_drum_pads'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'Property'}, {'ref': 830, 'tag': 'Property', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.canonical_parent', 'description': 'Get the canonical parent of the Device.', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'canonical_parent'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'Property'}, {'ref': 831, 'tag': 'Property', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.class_display_name', 'description': "Return const access to the name of the device's class name as displayed in Live's browser and device chain", 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'class_display_name'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'Property'}, {'ref': 832, 'tag': 'Property', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.class_name', 'description': "Return const access to the name of the device's class.", 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'class_name'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'Property'}, {'ref': 833, 'tag': 'Property', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.ir_attack_time', 'description': 'Return the current IrAttackTime', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'ir_attack_time'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'Property'}, {'ref': 834, 'tag': 'Property', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.ir_category_index', 'description': 'Return the current IR category index', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'ir_category_index'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'Property'}, {'ref': 835, 'tag': 'Property', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.ir_category_list', 'description': 'Return the current IR categories list', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'ir_category_list'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'Property'}, {'ref': 836, 'tag': 'Property', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.ir_decay_time', 'description': 'Return the current IrDecayTime', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'ir_decay_time'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'Property'}, {'ref': 837, 'tag': 'Property', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.ir_file_index', 'description': 'Return the current IR file index', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'ir_file_index'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'Property'}, {'ref': 838, 'tag': 'Property', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.ir_file_list', 'description': 'Return the current IR file list', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'ir_file_list'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'Property'}, {'ref': 839, 'tag': 'Property', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.ir_size_factor', 'description': 'Return the current IrSizeFactor', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'ir_size_factor'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'Property'}, {'ref': 840, 'tag': 'Property', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.ir_time_shaping_on', 'description': 'Return the current IrTimeShapingOn', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'ir_time_shaping_on'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'Property'}, {'ref': 841, 'tag': 'Property', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.is_active', 'description': "Return const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off.", 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'is_active'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'Property'}, {'ref': 842, 'tag': 'Property', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.name', 'description': 'Return access to the name of the device.', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'name'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'Property'}, {'ref': 843, 'tag': 'Property', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.parameters', 'description': 'Const access to the list of available automatable parameters for this device.', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'parameters'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'Property'}, {'ref': 844, 'tag': 'Property', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.type', 'description': 'Return the type of the device.', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'type'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'Property'}, {'ref': 845, 'tag': 'Property', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.view', 'description': 'Representing the view aspects of a device.', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'view'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'Property'}, {'ref': 846, 'tag': 'listener Method', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.add_ir_attack_time_listener()', 'description': 'add_ir_attack_time_listener( (HybridReverbDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;ir_attack_time&quot; has changed. C++ signature :  void add_ir_attack_time_listener(THybridReverbDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'add_ir_attack_time_listener()'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'listener Method'}, {'ref': 847, 'tag': 'listener Method', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.add_ir_category_index_listener()', 'description': 'add_ir_category_index_listener( (HybridReverbDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;ir_category_index&quot; has changed. C++ signature :  void add_ir_category_index_listener(THybridReverbDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'add_ir_category_index_listener()'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'listener Method'}, {'ref': 848, 'tag': 'listener Method', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.add_ir_decay_time_listener()', 'description': 'add_ir_decay_time_listener( (HybridReverbDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;ir_decay_time&quot; has changed. C++ signature :  void add_ir_decay_time_listener(THybridReverbDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'add_ir_decay_time_listener()'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'listener Method'}, {'ref': 849, 'tag': 'listener Method', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.add_ir_file_index_listener()', 'description': 'add_ir_file_index_listener( (HybridReverbDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;ir_file_index&quot; has changed. C++ signature :  void add_ir_file_index_listener(THybridReverbDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'add_ir_file_index_listener()'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'listener Method'}, {'ref': 850, 'tag': 'listener Method', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.add_ir_file_list_listener()', 'description': 'add_ir_file_list_listener( (HybridReverbDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;ir_file_list&quot; has changed. C++ signature :  void add_ir_file_list_listener(THybridReverbDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'add_ir_file_list_listener()'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'listener Method'}, {'ref': 851, 'tag': 'listener Method', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.add_ir_size_factor_listener()', 'description': 'add_ir_size_factor_listener( (HybridReverbDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;ir_size_factor&quot; has changed. C++ signature :  void add_ir_size_factor_listener(THybridReverbDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'add_ir_size_factor_listener()'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'listener Method'}, {'ref': 852, 'tag': 'listener Method', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.add_ir_time_shaping_on_listener()', 'description': 'add_ir_time_shaping_on_listener( (HybridReverbDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;ir_time_shaping_on&quot; has changed. C++ signature :  void add_ir_time_shaping_on_listener(THybridReverbDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'add_ir_time_shaping_on_listener()'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'listener Method'}, {'ref': 853, 'tag': 'listener Method', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.add_is_active_listener()', 'description': 'add_is_active_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_active&quot; has changed. C++ signature :  void add_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'add_is_active_listener()'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'listener Method'}, {'ref': 854, 'tag': 'listener Method', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.add_name_listener()', 'description': 'add_name_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'add_name_listener()'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'listener Method'}, {'ref': 855, 'tag': 'listener Method', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.add_parameters_listener()', 'description': 'add_parameters_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;parameters&quot; has changed. C++ signature :  void add_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'add_parameters_listener()'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'listener Method'}, {'ref': 856, 'tag': 'listener Method', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.ir_attack_time_has_listener()', 'description': 'ir_attack_time_has_listener( (HybridReverbDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;ir_attack_time&quot;. C++ signature :  bool ir_attack_time_has_listener(THybridReverbDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'ir_attack_time_has_listener()'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'listener Method'}, {'ref': 857, 'tag': 'listener Method', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.ir_category_index_has_listener()', 'description': 'ir_category_index_has_listener( (HybridReverbDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;ir_category_index&quot;. C++ signature :  bool ir_category_index_has_listener(THybridReverbDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'ir_category_index_has_listener()'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'listener Method'}, {'ref': 858, 'tag': 'listener Method', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.ir_decay_time_has_listener()', 'description': 'ir_decay_time_has_listener( (HybridReverbDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;ir_decay_time&quot;. C++ signature :  bool ir_decay_time_has_listener(THybridReverbDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'ir_decay_time_has_listener()'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'listener Method'}, {'ref': 859, 'tag': 'listener Method', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.ir_file_index_has_listener()', 'description': 'ir_file_index_has_listener( (HybridReverbDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;ir_file_index&quot;. C++ signature :  bool ir_file_index_has_listener(THybridReverbDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'ir_file_index_has_listener()'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'listener Method'}, {'ref': 860, 'tag': 'listener Method', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.ir_file_list_has_listener()', 'description': 'ir_file_list_has_listener( (HybridReverbDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;ir_file_list&quot;. C++ signature :  bool ir_file_list_has_listener(THybridReverbDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'ir_file_list_has_listener()'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'listener Method'}, {'ref': 861, 'tag': 'listener Method', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.ir_size_factor_has_listener()', 'description': 'ir_size_factor_has_listener( (HybridReverbDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;ir_size_factor&quot;. C++ signature :  bool ir_size_factor_has_listener(THybridReverbDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'ir_size_factor_has_listener()'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'listener Method'}, {'ref': 862, 'tag': 'listener Method', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.ir_time_shaping_on_has_listener()', 'description': 'ir_time_shaping_on_has_listener( (HybridReverbDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;ir_time_shaping_on&quot;. C++ signature :  bool ir_time_shaping_on_has_listener(THybridReverbDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'ir_time_shaping_on_has_listener()'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'listener Method'}, {'ref': 863, 'tag': 'listener Method', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.is_active_has_listener()', 'description': 'is_active_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_active&quot;. C++ signature :  bool is_active_has_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'is_active_has_listener()'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'listener Method'}, {'ref': 864, 'tag': 'listener Method', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.name_has_listener()', 'description': 'name_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'name_has_listener()'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'listener Method'}, {'ref': 865, 'tag': 'listener Method', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.parameters_has_listener()', 'description': 'parameters_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;parameters&quot;. C++ signature :  bool parameters_has_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'parameters_has_listener()'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'listener Method'}, {'ref': 866, 'tag': 'listener Method', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.remove_ir_attack_time_listener()', 'description': 'remove_ir_attack_time_listener( (HybridReverbDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;ir_attack_time&quot;. C++ signature :  void remove_ir_attack_time_listener(THybridReverbDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'remove_ir_attack_time_listener()'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'listener Method'}, {'ref': 867, 'tag': 'listener Method', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.remove_ir_category_index_listener()', 'description': 'remove_ir_category_index_listener( (HybridReverbDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;ir_category_index&quot;. C++ signature :  void remove_ir_category_index_listener(THybridReverbDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'remove_ir_category_index_listener()'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'listener Method'}, {'ref': 868, 'tag': 'listener Method', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.remove_ir_decay_time_listener()', 'description': 'remove_ir_decay_time_listener( (HybridReverbDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;ir_decay_time&quot;. C++ signature :  void remove_ir_decay_time_listener(THybridReverbDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'remove_ir_decay_time_listener()'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'listener Method'}, {'ref': 869, 'tag': 'listener Method', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.remove_ir_file_index_listener()', 'description': 'remove_ir_file_index_listener( (HybridReverbDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;ir_file_index&quot;. C++ signature :  void remove_ir_file_index_listener(THybridReverbDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'remove_ir_file_index_listener()'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'listener Method'}, {'ref': 870, 'tag': 'listener Method', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.remove_ir_file_list_listener()', 'description': 'remove_ir_file_list_listener( (HybridReverbDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;ir_file_list&quot;. C++ signature :  void remove_ir_file_list_listener(THybridReverbDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'remove_ir_file_list_listener()'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'listener Method'}, {'ref': 871, 'tag': 'listener Method', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.remove_ir_size_factor_listener()', 'description': 'remove_ir_size_factor_listener( (HybridReverbDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;ir_size_factor&quot;. C++ signature :  void remove_ir_size_factor_listener(THybridReverbDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'remove_ir_size_factor_listener()'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'listener Method'}, {'ref': 872, 'tag': 'listener Method', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.remove_ir_time_shaping_on_listener()', 'description': 'remove_ir_time_shaping_on_listener( (HybridReverbDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;ir_time_shaping_on&quot;. C++ signature :  void remove_ir_time_shaping_on_listener(THybridReverbDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'remove_ir_time_shaping_on_listener()'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'listener Method'}, {'ref': 873, 'tag': 'listener Method', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.remove_is_active_listener()', 'description': 'remove_is_active_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_active&quot;. C++ signature :  void remove_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'remove_is_active_listener()'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'listener Method'}, {'ref': 874, 'tag': 'listener Method', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.remove_name_listener()', 'description': 'remove_name_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'remove_name_listener()'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'listener Method'}, {'ref': 875, 'tag': 'listener Method', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.remove_parameters_listener()', 'description': 'remove_parameters_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;parameters&quot;. C++ signature :  void remove_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'remove_parameters_listener()'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'listener Method'}, {'ref': 876, 'tag': 'Method', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.store_chosen_bank()', 'description': 'store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -> None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle<ADevice>,int,int)', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'store_chosen_bank()'], 'hirachy': 3, 'ref_parent': 826, 'children': [], 'group': 'Method'}, {'ref': 877, 'tag': 'Class', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.View', 'description': 'Representing the view aspects of a device.', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'View'], 'hirachy': 3, 'ref_parent': 826, 'children': [878, 879, 880, 881, 882, 883], 'group': None}, {'ref': 878, 'tag': 'Property', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.View._live_ptr', 'description': None, 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'View', '_live_ptr'], 'hirachy': 4, 'ref_parent': 877, 'children': [], 'group': 'Property'}, {'ref': 879, 'tag': 'Property', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.View.canonical_parent', 'description': 'Get the canonical parent of the View.', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'View', 'canonical_parent'], 'hirachy': 4, 'ref_parent': 877, 'children': [], 'group': 'Property'}, {'ref': 880, 'tag': 'Property', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.View.is_collapsed', 'description': 'Get/Set/Listen if the device is shown collapsed in the device chain.', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'View', 'is_collapsed'], 'hirachy': 4, 'ref_parent': 877, 'children': [], 'group': 'Property'}, {'ref': 881, 'tag': 'listener Method', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.View.add_is_collapsed_listener()', 'description': 'add_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_collapsed&quot; has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'View', 'add_is_collapsed_listener()'], 'hirachy': 4, 'ref_parent': 877, 'children': [], 'group': 'listener Method'}, {'ref': 882, 'tag': 'listener Method', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.View.is_collapsed_has_listener()', 'description': 'is_collapsed_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_collapsed&quot;. C++ signature :  bool is_collapsed_has_listener(TPyViewData<ADevice>,boost::python::api::object)', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'View', 'is_collapsed_has_listener()'], 'hirachy': 4, 'ref_parent': 877, 'children': [], 'group': 'listener Method'}, {'ref': 883, 'tag': 'listener Method', 'name': 'Live.HybridReverbDevice.HybridReverbDevice.View.remove_is_collapsed_listener()', 'description': 'remove_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_collapsed&quot;. C++ signature :  void remove_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)', 'path': ['Live', 'HybridReverbDevice', 'HybridReverbDevice', 'View', 'remove_is_collapsed_listener()'], 'hirachy': 4, 'ref_parent': 877, 'children': [], 'group': 'listener Method'}, {'ref': 884, 'tag': 'Module', 'name': 'Live.Listener', 'description': None, 'path': ['Live', 'Listener'], 'hirachy': 1, 'ref_parent': 0, 'children': [885, 890], 'group': None}, {'ref': 885, 'tag': 'Class', 'name': 'Live.Listener.ListenerHandle', 'description': 'This class represents a Python listener when connected to a Live property.', 'path': ['Live', 'Listener', 'ListenerHandle'], 'hirachy': 2, 'ref_parent': 884, 'children': [886, 887, 888, 889], 'group': None}, {'ref': 886, 'tag': 'Property', 'name': 'Live.Listener.ListenerHandle.listener_func', 'description': 'Returns the original function', 'path': ['Live', 'Listener', 'ListenerHandle', 'listener_func'], 'hirachy': 3, 'ref_parent': 885, 'children': [], 'group': 'Property'}, {'ref': 887, 'tag': 'Property', 'name': 'Live.Listener.ListenerHandle.listener_self', 'description': 'Returns the weak reference to original self, if it was a bound method', 'path': ['Live', 'Listener', 'ListenerHandle', 'listener_self'], 'hirachy': 3, 'ref_parent': 885, 'children': [], 'group': 'Property'}, {'ref': 888, 'tag': 'Property', 'name': 'Live.Listener.ListenerHandle.name', 'description': 'Prints the name of the property that this listener is connected to', 'path': ['Live', 'Listener', 'ListenerHandle', 'name'], 'hirachy': 3, 'ref_parent': 885, 'children': [], 'group': 'Property'}, {'ref': 889, 'tag': 'Method', 'name': 'Live.Listener.ListenerHandle.disconnect()', 'description': 'disconnect( (ListenerHandle)arg1) -> None : Disconnects the listener from its property C++ signature :  void disconnect(LPythonRemote {lvalue})', 'path': ['Live', 'Listener', 'ListenerHandle', 'disconnect()'], 'hirachy': 3, 'ref_parent': 885, 'children': [], 'group': 'Method'}, {'ref': 890, 'tag': 'Class', 'name': 'Live.Listener.ListenerVector', 'description': 'A read only container for accessing a list of listeners.', 'path': ['Live', 'Listener', 'ListenerVector'], 'hirachy': 2, 'ref_parent': 884, 'children': [891, 892], 'group': None}, {'ref': 891, 'tag': 'Method', 'name': 'Live.Listener.ListenerVector.append()', 'description': 'append( (ListenerVector)arg1, (object)arg2) -> None : C++ signature :  void append(std::__1::vector<TWeakPtr<LPythonRemote>, std::__1::allocator<TWeakPtr<LPythonRemote> > > {lvalue},boost::python::api::object)', 'path': ['Live', 'Listener', 'ListenerVector', 'append()'], 'hirachy': 3, 'ref_parent': 890, 'children': [], 'group': 'Method'}, {'ref': 892, 'tag': 'Method', 'name': 'Live.Listener.ListenerVector.extend()', 'description': 'extend( (ListenerVector)arg1, (object)arg2) -> None : C++ signature :  void extend(std::__1::vector<TWeakPtr<LPythonRemote>, std::__1::allocator<TWeakPtr<LPythonRemote> > > {lvalue},boost::python::api::object)', 'path': ['Live', 'Listener', 'ListenerVector', 'extend()'], 'hirachy': 3, 'ref_parent': 890, 'children': [], 'group': 'Method'}, {'ref': 893, 'tag': 'Module', 'name': 'Live.LomObject', 'description': None, 'path': ['Live', 'LomObject'], 'hirachy': 1, 'ref_parent': 0, 'children': [894], 'group': None}, {'ref': 894, 'tag': 'Class', 'name': 'Live.LomObject.LomObject', 'description': 'this is the base class for an object that is accessible via the LOM', 'path': ['Live', 'LomObject', 'LomObject'], 'hirachy': 2, 'ref_parent': 893, 'children': [895], 'group': None}, {'ref': 895, 'tag': 'Property', 'name': 'Live.LomObject.LomObject._live_ptr', 'description': None, 'path': ['Live', 'LomObject', 'LomObject', '_live_ptr'], 'hirachy': 3, 'ref_parent': 894, 'children': [], 'group': 'Property'}, {'ref': 896, 'tag': 'Module', 'name': 'Live.MaxDevice', 'description': None, 'path': ['Live', 'MaxDevice'], 'hirachy': 1, 'ref_parent': 0, 'children': [897], 'group': None}, {'ref': 897, 'tag': 'Class', 'name': 'Live.MaxDevice.MaxDevice', 'description': 'This class represents a Max for Live device.', 'path': ['Live', 'MaxDevice', 'MaxDevice'], 'hirachy': 2, 'ref_parent': 896, 'children': [898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942], 'group': None}, {'ref': 898, 'tag': 'Property', 'name': 'Live.MaxDevice.MaxDevice._live_ptr', 'description': None, 'path': ['Live', 'MaxDevice', 'MaxDevice', '_live_ptr'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'Property'}, {'ref': 899, 'tag': 'Property', 'name': 'Live.MaxDevice.MaxDevice.audio_inputs', 'description': 'Const access to a list of all audio inputs of the device.', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'audio_inputs'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'Property'}, {'ref': 900, 'tag': 'Property', 'name': 'Live.MaxDevice.MaxDevice.audio_outputs', 'description': 'Const access to a list of all audio outputs of the device.', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'audio_outputs'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'Property'}, {'ref': 901, 'tag': 'Property', 'name': 'Live.MaxDevice.MaxDevice.can_have_chains', 'description': 'Returns true if the device is a rack.', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'can_have_chains'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'Property'}, {'ref': 902, 'tag': 'Property', 'name': 'Live.MaxDevice.MaxDevice.can_have_drum_pads', 'description': 'Returns true if the device is a drum rack.', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'can_have_drum_pads'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'Property'}, {'ref': 903, 'tag': 'Property', 'name': 'Live.MaxDevice.MaxDevice.canonical_parent', 'description': 'Get the canonical parent of the Device.', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'canonical_parent'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'Property'}, {'ref': 904, 'tag': 'Property', 'name': 'Live.MaxDevice.MaxDevice.class_display_name', 'description': "Return const access to the name of the device's class name as displayed in Live's browser and device chain", 'path': ['Live', 'MaxDevice', 'MaxDevice', 'class_display_name'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'Property'}, {'ref': 905, 'tag': 'Property', 'name': 'Live.MaxDevice.MaxDevice.class_name', 'description': "Return const access to the name of the device's class.", 'path': ['Live', 'MaxDevice', 'MaxDevice', 'class_name'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'Property'}, {'ref': 906, 'tag': 'Property', 'name': 'Live.MaxDevice.MaxDevice.is_active', 'description': "Return const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off.", 'path': ['Live', 'MaxDevice', 'MaxDevice', 'is_active'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'Property'}, {'ref': 907, 'tag': 'Property', 'name': 'Live.MaxDevice.MaxDevice.midi_inputs', 'description': 'Const access to a list of all midi outputs of the device.', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'midi_inputs'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'Property'}, {'ref': 908, 'tag': 'Property', 'name': 'Live.MaxDevice.MaxDevice.midi_outputs', 'description': 'Const access to a list of all midi outputs of the device.', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'midi_outputs'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'Property'}, {'ref': 909, 'tag': 'Property', 'name': 'Live.MaxDevice.MaxDevice.name', 'description': 'Return access to the name of the device.', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'name'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'Property'}, {'ref': 910, 'tag': 'Property', 'name': 'Live.MaxDevice.MaxDevice.parameters', 'description': 'Const access to the list of available automatable parameters for this device.', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'parameters'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'Property'}, {'ref': 911, 'tag': 'Property', 'name': 'Live.MaxDevice.MaxDevice.type', 'description': 'Return the type of the device.', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'type'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'Property'}, {'ref': 912, 'tag': 'Property', 'name': 'Live.MaxDevice.MaxDevice.view', 'description': 'Representing the view aspects of a device.', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'view'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'Property'}, {'ref': 913, 'tag': 'listener Method', 'name': 'Live.MaxDevice.MaxDevice.add_audio_inputs_listener()', 'description': 'add_audio_inputs_listener( (MaxDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;audio_inputs&quot; has changed. C++ signature :  void add_audio_inputs_listener(TMaxDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'add_audio_inputs_listener()'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'listener Method'}, {'ref': 914, 'tag': 'listener Method', 'name': 'Live.MaxDevice.MaxDevice.add_audio_outputs_listener()', 'description': 'add_audio_outputs_listener( (MaxDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;audio_outputs&quot; has changed. C++ signature :  void add_audio_outputs_listener(TMaxDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'add_audio_outputs_listener()'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'listener Method'}, {'ref': 915, 'tag': 'listener Method', 'name': 'Live.MaxDevice.MaxDevice.add_bank_parameters_changed_listener()', 'description': 'add_bank_parameters_changed_listener( (MaxDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;bank_parameters_changed&quot; has changed. C++ signature :  void add_bank_parameters_changed_listener(TMaxDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'add_bank_parameters_changed_listener()'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'listener Method'}, {'ref': 916, 'tag': 'listener Method', 'name': 'Live.MaxDevice.MaxDevice.add_is_active_listener()', 'description': 'add_is_active_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_active&quot; has changed. C++ signature :  void add_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'add_is_active_listener()'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'listener Method'}, {'ref': 917, 'tag': 'listener Method', 'name': 'Live.MaxDevice.MaxDevice.add_midi_inputs_listener()', 'description': 'add_midi_inputs_listener( (MaxDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;midi_inputs&quot; has changed. C++ signature :  void add_midi_inputs_listener(TMaxDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'add_midi_inputs_listener()'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'listener Method'}, {'ref': 918, 'tag': 'listener Method', 'name': 'Live.MaxDevice.MaxDevice.add_midi_outputs_listener()', 'description': 'add_midi_outputs_listener( (MaxDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;midi_outputs&quot; has changed. C++ signature :  void add_midi_outputs_listener(TMaxDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'add_midi_outputs_listener()'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'listener Method'}, {'ref': 919, 'tag': 'listener Method', 'name': 'Live.MaxDevice.MaxDevice.add_name_listener()', 'description': 'add_name_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'add_name_listener()'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'listener Method'}, {'ref': 920, 'tag': 'listener Method', 'name': 'Live.MaxDevice.MaxDevice.add_parameters_listener()', 'description': 'add_parameters_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;parameters&quot; has changed. C++ signature :  void add_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'add_parameters_listener()'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'listener Method'}, {'ref': 921, 'tag': 'listener Method', 'name': 'Live.MaxDevice.MaxDevice.audio_inputs_has_listener()', 'description': 'audio_inputs_has_listener( (MaxDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;audio_inputs&quot;. C++ signature :  bool audio_inputs_has_listener(TMaxDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'audio_inputs_has_listener()'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'listener Method'}, {'ref': 922, 'tag': 'listener Method', 'name': 'Live.MaxDevice.MaxDevice.audio_outputs_has_listener()', 'description': 'audio_outputs_has_listener( (MaxDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;audio_outputs&quot;. C++ signature :  bool audio_outputs_has_listener(TMaxDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'audio_outputs_has_listener()'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'listener Method'}, {'ref': 923, 'tag': 'listener Method', 'name': 'Live.MaxDevice.MaxDevice.bank_parameters_changed_has_listener()', 'description': 'bank_parameters_changed_has_listener( (MaxDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;bank_parameters_changed&quot;. C++ signature :  bool bank_parameters_changed_has_listener(TMaxDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'bank_parameters_changed_has_listener()'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'listener Method'}, {'ref': 924, 'tag': 'Method', 'name': 'Live.MaxDevice.MaxDevice.get_bank_count()', 'description': 'get_bank_count( (MaxDevice)arg1) -> int : Get the number of parameter banks. This is related to hardware control surfaces. C++ signature :  int get_bank_count(TMaxDevicePyHandle)', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'get_bank_count()'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'Method'}, {'ref': 925, 'tag': 'Method', 'name': 'Live.MaxDevice.MaxDevice.get_bank_name()', 'description': 'get_bank_name( (MaxDevice)arg1, (int)arg2) -> unicode : Get the name of a parameter bank given by index. This is related to hardware control surfaces. C++ signature :  TString get_bank_name(TMaxDevicePyHandle,int)', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'get_bank_name()'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'Method'}, {'ref': 926, 'tag': 'Method', 'name': 'Live.MaxDevice.MaxDevice.get_bank_parameters()', 'description': 'get_bank_parameters( (MaxDevice)arg1, (int)arg2) -> list : Get the indices of parameters of the given bank index. Empty slots are marked as -1. Bank index -1 refers to the best-of bank. This function is related to hardware control surfaces. C++ signature :  boost::python::list get_bank_parameters(TMaxDevicePyHandle,int)', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'get_bank_parameters()'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'Method'}, {'ref': 927, 'tag': 'Method', 'name': 'Live.MaxDevice.MaxDevice.get_value_item_icons()', 'description': "get_value_item_icons( (MaxDevice)arg1, (DeviceParameter)arg2) -> list : Get a list of icon identifier strings for a list parameter's values.An empty string is given where no icon should be displayed.An empty list is given when no icons should be displayed.This is related to hardware control surfaces. C++ signature :  boost::python::list get_value_item_icons(TMaxDevicePyHandle,TPyHandle<ATimeableValue>)", 'path': ['Live', 'MaxDevice', 'MaxDevice', 'get_value_item_icons()'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'Method'}, {'ref': 928, 'tag': 'listener Method', 'name': 'Live.MaxDevice.MaxDevice.is_active_has_listener()', 'description': 'is_active_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_active&quot;. C++ signature :  bool is_active_has_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'is_active_has_listener()'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'listener Method'}, {'ref': 929, 'tag': 'listener Method', 'name': 'Live.MaxDevice.MaxDevice.midi_inputs_has_listener()', 'description': 'midi_inputs_has_listener( (MaxDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;midi_inputs&quot;. C++ signature :  bool midi_inputs_has_listener(TMaxDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'midi_inputs_has_listener()'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'listener Method'}, {'ref': 930, 'tag': 'listener Method', 'name': 'Live.MaxDevice.MaxDevice.midi_outputs_has_listener()', 'description': 'midi_outputs_has_listener( (MaxDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;midi_outputs&quot;. C++ signature :  bool midi_outputs_has_listener(TMaxDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'midi_outputs_has_listener()'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'listener Method'}, {'ref': 931, 'tag': 'listener Method', 'name': 'Live.MaxDevice.MaxDevice.name_has_listener()', 'description': 'name_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'name_has_listener()'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'listener Method'}, {'ref': 932, 'tag': 'listener Method', 'name': 'Live.MaxDevice.MaxDevice.parameters_has_listener()', 'description': 'parameters_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;parameters&quot;. C++ signature :  bool parameters_has_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'parameters_has_listener()'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'listener Method'}, {'ref': 933, 'tag': 'listener Method', 'name': 'Live.MaxDevice.MaxDevice.remove_audio_inputs_listener()', 'description': 'remove_audio_inputs_listener( (MaxDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;audio_inputs&quot;. C++ signature :  void remove_audio_inputs_listener(TMaxDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'remove_audio_inputs_listener()'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'listener Method'}, {'ref': 934, 'tag': 'listener Method', 'name': 'Live.MaxDevice.MaxDevice.remove_audio_outputs_listener()', 'description': 'remove_audio_outputs_listener( (MaxDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;audio_outputs&quot;. C++ signature :  void remove_audio_outputs_listener(TMaxDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'remove_audio_outputs_listener()'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'listener Method'}, {'ref': 935, 'tag': 'listener Method', 'name': 'Live.MaxDevice.MaxDevice.remove_bank_parameters_changed_listener()', 'description': 'remove_bank_parameters_changed_listener( (MaxDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;bank_parameters_changed&quot;. C++ signature :  void remove_bank_parameters_changed_listener(TMaxDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'remove_bank_parameters_changed_listener()'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'listener Method'}, {'ref': 936, 'tag': 'listener Method', 'name': 'Live.MaxDevice.MaxDevice.remove_is_active_listener()', 'description': 'remove_is_active_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_active&quot;. C++ signature :  void remove_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'remove_is_active_listener()'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'listener Method'}, {'ref': 937, 'tag': 'listener Method', 'name': 'Live.MaxDevice.MaxDevice.remove_midi_inputs_listener()', 'description': 'remove_midi_inputs_listener( (MaxDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;midi_inputs&quot;. C++ signature :  void remove_midi_inputs_listener(TMaxDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'remove_midi_inputs_listener()'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'listener Method'}, {'ref': 938, 'tag': 'listener Method', 'name': 'Live.MaxDevice.MaxDevice.remove_midi_outputs_listener()', 'description': 'remove_midi_outputs_listener( (MaxDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;midi_outputs&quot;. C++ signature :  void remove_midi_outputs_listener(TMaxDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'remove_midi_outputs_listener()'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'listener Method'}, {'ref': 939, 'tag': 'listener Method', 'name': 'Live.MaxDevice.MaxDevice.remove_name_listener()', 'description': 'remove_name_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'remove_name_listener()'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'listener Method'}, {'ref': 940, 'tag': 'listener Method', 'name': 'Live.MaxDevice.MaxDevice.remove_parameters_listener()', 'description': 'remove_parameters_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;parameters&quot;. C++ signature :  void remove_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'remove_parameters_listener()'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'listener Method'}, {'ref': 941, 'tag': 'Method', 'name': 'Live.MaxDevice.MaxDevice.store_chosen_bank()', 'description': 'store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -> None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle<ADevice>,int,int)', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'store_chosen_bank()'], 'hirachy': 3, 'ref_parent': 897, 'children': [], 'group': 'Method'}, {'ref': 942, 'tag': 'Class', 'name': 'Live.MaxDevice.MaxDevice.View', 'description': 'Representing the view aspects of a device.', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'View'], 'hirachy': 3, 'ref_parent': 897, 'children': [943, 944, 945, 946, 947, 948], 'group': None}, {'ref': 943, 'tag': 'Property', 'name': 'Live.MaxDevice.MaxDevice.View._live_ptr', 'description': None, 'path': ['Live', 'MaxDevice', 'MaxDevice', 'View', '_live_ptr'], 'hirachy': 4, 'ref_parent': 942, 'children': [], 'group': 'Property'}, {'ref': 944, 'tag': 'Property', 'name': 'Live.MaxDevice.MaxDevice.View.canonical_parent', 'description': 'Get the canonical parent of the View.', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'View', 'canonical_parent'], 'hirachy': 4, 'ref_parent': 942, 'children': [], 'group': 'Property'}, {'ref': 945, 'tag': 'Property', 'name': 'Live.MaxDevice.MaxDevice.View.is_collapsed', 'description': 'Get/Set/Listen if the device is shown collapsed in the device chain.', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'View', 'is_collapsed'], 'hirachy': 4, 'ref_parent': 942, 'children': [], 'group': 'Property'}, {'ref': 946, 'tag': 'listener Method', 'name': 'Live.MaxDevice.MaxDevice.View.add_is_collapsed_listener()', 'description': 'add_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_collapsed&quot; has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'View', 'add_is_collapsed_listener()'], 'hirachy': 4, 'ref_parent': 942, 'children': [], 'group': 'listener Method'}, {'ref': 947, 'tag': 'listener Method', 'name': 'Live.MaxDevice.MaxDevice.View.is_collapsed_has_listener()', 'description': 'is_collapsed_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_collapsed&quot;. C++ signature :  bool is_collapsed_has_listener(TPyViewData<ADevice>,boost::python::api::object)', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'View', 'is_collapsed_has_listener()'], 'hirachy': 4, 'ref_parent': 942, 'children': [], 'group': 'listener Method'}, {'ref': 948, 'tag': 'listener Method', 'name': 'Live.MaxDevice.MaxDevice.View.remove_is_collapsed_listener()', 'description': 'remove_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_collapsed&quot;. C++ signature :  void remove_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)', 'path': ['Live', 'MaxDevice', 'MaxDevice', 'View', 'remove_is_collapsed_listener()'], 'hirachy': 4, 'ref_parent': 942, 'children': [], 'group': 'listener Method'}, {'ref': 949, 'tag': 'Module', 'name': 'Live.MidiMap', 'description': None, 'path': ['Live', 'MidiMap'], 'hirachy': 1, 'ref_parent': 0, 'children': [950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 965, 976, 981], 'group': None}, {'ref': 950, 'tag': 'Built-In', 'name': 'Live.MidiMap.forward_midi_cc()', 'description': 'forward_midi_cc( (int)arg1, (int)arg2, (int)arg3, (int)arg4 [, (bool)ShouldConsumeEvent=True]) -> bool : C++ signature :  bool forward_midi_cc(unsigned int,unsigned int,int,int [,bool=True])', 'path': ['Live', 'MidiMap', 'forward_midi_cc()'], 'hirachy': 2, 'ref_parent': 949, 'children': [], 'group': None}, {'ref': 951, 'tag': 'Built-In', 'name': 'Live.MidiMap.forward_midi_note()', 'description': 'forward_midi_note( (int)arg1, (int)arg2, (int)arg3, (int)arg4 [, (bool)ShouldConsumeEvent=True]) -> bool : C++ signature :  bool forward_midi_note(unsigned int,unsigned int,int,int [,bool=True])', 'path': ['Live', 'MidiMap', 'forward_midi_note()'], 'hirachy': 2, 'ref_parent': 949, 'children': [], 'group': None}, {'ref': 952, 'tag': 'Built-In', 'name': 'Live.MidiMap.forward_midi_pitchbend()', 'description': 'forward_midi_pitchbend( (int)arg1, (int)arg2, (int)arg3) -> bool : C++ signature :  bool forward_midi_pitchbend(unsigned int,unsigned int,int)', 'path': ['Live', 'MidiMap', 'forward_midi_pitchbend()'], 'hirachy': 2, 'ref_parent': 949, 'children': [], 'group': None}, {'ref': 953, 'tag': 'Built-In', 'name': 'Live.MidiMap.map_midi_cc()', 'description': 'map_midi_cc( (int)midi_map_handle, (DeviceParameter)parameter, (int)midi_channel, (int)controller_number, (MapMode)map_mode, (bool)avoid_takeover [, (float)sensitivity=1.0]) -> bool : C++ signature :  bool map_midi_cc(unsigned int,TPyHandle<ATimeableValue>,int,int,NRemoteMapperTypes::TControllerMapMode,bool [,float=1.0])', 'path': ['Live', 'MidiMap', 'map_midi_cc()'], 'hirachy': 2, 'ref_parent': 949, 'children': [], 'group': None}, {'ref': 954, 'tag': 'Built-In', 'name': 'Live.MidiMap.map_midi_cc_with_feedback_map()', 'description': 'map_midi_cc_with_feedback_map( (int)midi_map_handle, (DeviceParameter)parameter, (int)midi_channel, (int)controller_number, (MapMode)map_mode, (CCFeedbackRule)feedback_rule, (bool)avoid_takeover [, (float)sensitivity=1.0]) -> bool : C++ signature :  bool map_midi_cc_with_feedback_map(unsigned int,TPyHandle<ATimeableValue>,int,int,NRemoteMapperTypes::TControllerMapMode,NPythonMidiMap::TCCFeedbackRule,bool [,float=1.0])', 'path': ['Live', 'MidiMap', 'map_midi_cc_with_feedback_map()'], 'hirachy': 2, 'ref_parent': 949, 'children': [], 'group': None}, {'ref': 955, 'tag': 'Built-In', 'name': 'Live.MidiMap.map_midi_note()', 'description': 'map_midi_note( (int)arg1, (DeviceParameter)arg2, (int)arg3, (int)arg4) -> bool : C++ signature :  bool map_midi_note(unsigned int,TPyHandle<ATimeableValue>,int,int)', 'path': ['Live', 'MidiMap', 'map_midi_note()'], 'hirachy': 2, 'ref_parent': 949, 'children': [], 'group': None}, {'ref': 956, 'tag': 'Built-In', 'name': 'Live.MidiMap.map_midi_note_with_feedback_map()', 'description': 'map_midi_note_with_feedback_map( (int)arg1, (DeviceParameter)arg2, (int)arg3, (int)arg4, (NoteFeedbackRule)arg5) -> bool : C++ signature :  bool map_midi_note_with_feedback_map(unsigned int,TPyHandle<ATimeableValue>,int,int,NPythonMidiMap::TNoteFeedbackRule)', 'path': ['Live', 'MidiMap', 'map_midi_note_with_feedback_map()'], 'hirachy': 2, 'ref_parent': 949, 'children': [], 'group': None}, {'ref': 957, 'tag': 'Built-In', 'name': 'Live.MidiMap.map_midi_pitchbend()', 'description': 'map_midi_pitchbend( (int)arg1, (DeviceParameter)arg2, (int)arg3, (bool)arg4) -> bool : C++ signature :  bool map_midi_pitchbend(unsigned int,TPyHandle<ATimeableValue>,int,bool)', 'path': ['Live', 'MidiMap', 'map_midi_pitchbend()'], 'hirachy': 2, 'ref_parent': 949, 'children': [], 'group': None}, {'ref': 958, 'tag': 'Built-In', 'name': 'Live.MidiMap.map_midi_pitchbend_with_feedback_map()', 'description': 'map_midi_pitchbend_with_feedback_map( (int)arg1, (DeviceParameter)arg2, (int)arg3, (PitchBendFeedbackRule)arg4, (bool)arg5) -> bool : C++ signature :  bool map_midi_pitchbend_with_feedback_map(unsigned int,TPyHandle<ATimeableValue>,int,NPythonMidiMap::TPitchBendFeedbackRule,bool)', 'path': ['Live', 'MidiMap', 'map_midi_pitchbend_with_feedback_map()'], 'hirachy': 2, 'ref_parent': 949, 'children': [], 'group': None}, {'ref': 959, 'tag': 'Built-In', 'name': 'Live.MidiMap.send_feedback_for_parameter()', 'description': 'send_feedback_for_parameter( (int)arg1, (DeviceParameter)arg2) -> None : C++ signature :  void send_feedback_for_parameter(unsigned int,TPyHandle<ATimeableValue>)', 'path': ['Live', 'MidiMap', 'send_feedback_for_parameter()'], 'hirachy': 2, 'ref_parent': 949, 'children': [], 'group': None}, {'ref': 960, 'tag': 'Class', 'name': 'Live.MidiMap.CCFeedbackRule', 'description': 'Structure to define feedback properties of MIDI mappings.', 'path': ['Live', 'MidiMap', 'CCFeedbackRule'], 'hirachy': 2, 'ref_parent': 949, 'children': [961, 962, 963, 964], 'group': None}, {'ref': 961, 'tag': 'Property', 'name': 'Live.MidiMap.CCFeedbackRule.cc_no', 'description': None, 'path': ['Live', 'MidiMap', 'CCFeedbackRule', 'cc_no'], 'hirachy': 3, 'ref_parent': 960, 'children': [], 'group': 'Property'}, {'ref': 962, 'tag': 'Property', 'name': 'Live.MidiMap.CCFeedbackRule.cc_value_map', 'description': None, 'path': ['Live', 'MidiMap', 'CCFeedbackRule', 'cc_value_map'], 'hirachy': 3, 'ref_parent': 960, 'children': [], 'group': 'Property'}, {'ref': 963, 'tag': 'Property', 'name': 'Live.MidiMap.CCFeedbackRule.channel', 'description': None, 'path': ['Live', 'MidiMap', 'CCFeedbackRule', 'channel'], 'hirachy': 3, 'ref_parent': 960, 'children': [], 'group': 'Property'}, {'ref': 964, 'tag': 'Property', 'name': 'Live.MidiMap.CCFeedbackRule.delay_in_ms', 'description': None, 'path': ['Live', 'MidiMap', 'CCFeedbackRule', 'delay_in_ms'], 'hirachy': 3, 'ref_parent': 960, 'children': [], 'group': 'Property'}, {'ref': 965, 'tag': 'Class', 'name': 'Live.MidiMap.MapMode', 'description': None, 'path': ['Live', 'MidiMap', 'MapMode'], 'hirachy': 2, 'ref_parent': 949, 'children': [966, 967, 968, 969, 970, 971, 972, 973, 974, 975], 'group': None}, {'ref': 966, 'tag': 'Value', 'name': 'Live.MidiMap.MapMode.absolute', 'description': None, 'path': ['Live', 'MidiMap', 'MapMode', 'absolute'], 'hirachy': 3, 'ref_parent': 965, 'children': [], 'group': 'Value'}, {'ref': 967, 'tag': 'Value', 'name': 'Live.MidiMap.MapMode.absolute_14_bit', 'description': None, 'path': ['Live', 'MidiMap', 'MapMode', 'absolute_14_bit'], 'hirachy': 3, 'ref_parent': 965, 'children': [], 'group': 'Value'}, {'ref': 968, 'tag': 'Value', 'name': 'Live.MidiMap.MapMode.relative_binary_offset', 'description': None, 'path': ['Live', 'MidiMap', 'MapMode', 'relative_binary_offset'], 'hirachy': 3, 'ref_parent': 965, 'children': [], 'group': 'Value'}, {'ref': 969, 'tag': 'Value', 'name': 'Live.MidiMap.MapMode.relative_signed_bit', 'description': None, 'path': ['Live', 'MidiMap', 'MapMode', 'relative_signed_bit'], 'hirachy': 3, 'ref_parent': 965, 'children': [], 'group': 'Value'}, {'ref': 970, 'tag': 'Value', 'name': 'Live.MidiMap.MapMode.relative_signed_bit2', 'description': None, 'path': ['Live', 'MidiMap', 'MapMode', 'relative_signed_bit2'], 'hirachy': 3, 'ref_parent': 965, 'children': [], 'group': 'Value'}, {'ref': 971, 'tag': 'Value', 'name': 'Live.MidiMap.MapMode.relative_smooth_binary_offset', 'description': None, 'path': ['Live', 'MidiMap', 'MapMode', 'relative_smooth_binary_offset'], 'hirachy': 3, 'ref_parent': 965, 'children': [], 'group': 'Value'}, {'ref': 972, 'tag': 'Value', 'name': 'Live.MidiMap.MapMode.relative_smooth_signed_bit', 'description': None, 'path': ['Live', 'MidiMap', 'MapMode', 'relative_smooth_signed_bit'], 'hirachy': 3, 'ref_parent': 965, 'children': [], 'group': 'Value'}, {'ref': 973, 'tag': 'Value', 'name': 'Live.MidiMap.MapMode.relative_smooth_signed_bit2', 'description': None, 'path': ['Live', 'MidiMap', 'MapMode', 'relative_smooth_signed_bit2'], 'hirachy': 3, 'ref_parent': 965, 'children': [], 'group': 'Value'}, {'ref': 974, 'tag': 'Value', 'name': 'Live.MidiMap.MapMode.relative_smooth_two_compliment', 'description': None, 'path': ['Live', 'MidiMap', 'MapMode', 'relative_smooth_two_compliment'], 'hirachy': 3, 'ref_parent': 965, 'children': [], 'group': 'Value'}, {'ref': 975, 'tag': 'Value', 'name': 'Live.MidiMap.MapMode.relative_two_compliment', 'description': None, 'path': ['Live', 'MidiMap', 'MapMode', 'relative_two_compliment'], 'hirachy': 3, 'ref_parent': 965, 'children': [], 'group': 'Value'}, {'ref': 976, 'tag': 'Class', 'name': 'Live.MidiMap.NoteFeedbackRule', 'description': 'Structure to define feedback properties of MIDI mappings.', 'path': ['Live', 'MidiMap', 'NoteFeedbackRule'], 'hirachy': 2, 'ref_parent': 949, 'children': [977, 978, 979, 980], 'group': None}, {'ref': 977, 'tag': 'Property', 'name': 'Live.MidiMap.NoteFeedbackRule.channel', 'description': None, 'path': ['Live', 'MidiMap', 'NoteFeedbackRule', 'channel'], 'hirachy': 3, 'ref_parent': 976, 'children': [], 'group': 'Property'}, {'ref': 978, 'tag': 'Property', 'name': 'Live.MidiMap.NoteFeedbackRule.delay_in_ms', 'description': None, 'path': ['Live', 'MidiMap', 'NoteFeedbackRule', 'delay_in_ms'], 'hirachy': 3, 'ref_parent': 976, 'children': [], 'group': 'Property'}, {'ref': 979, 'tag': 'Property', 'name': 'Live.MidiMap.NoteFeedbackRule.note_no', 'description': None, 'path': ['Live', 'MidiMap', 'NoteFeedbackRule', 'note_no'], 'hirachy': 3, 'ref_parent': 976, 'children': [], 'group': 'Property'}, {'ref': 980, 'tag': 'Property', 'name': 'Live.MidiMap.NoteFeedbackRule.vel_map', 'description': None, 'path': ['Live', 'MidiMap', 'NoteFeedbackRule', 'vel_map'], 'hirachy': 3, 'ref_parent': 976, 'children': [], 'group': 'Property'}, {'ref': 981, 'tag': 'Class', 'name': 'Live.MidiMap.PitchBendFeedbackRule', 'description': 'Structure to define feedback properties of MIDI mappings.', 'path': ['Live', 'MidiMap', 'PitchBendFeedbackRule'], 'hirachy': 2, 'ref_parent': 949, 'children': [982, 983, 984], 'group': None}, {'ref': 982, 'tag': 'Property', 'name': 'Live.MidiMap.PitchBendFeedbackRule.channel', 'description': None, 'path': ['Live', 'MidiMap', 'PitchBendFeedbackRule', 'channel'], 'hirachy': 3, 'ref_parent': 981, 'children': [], 'group': 'Property'}, {'ref': 983, 'tag': 'Property', 'name': 'Live.MidiMap.PitchBendFeedbackRule.delay_in_ms', 'description': None, 'path': ['Live', 'MidiMap', 'PitchBendFeedbackRule', 'delay_in_ms'], 'hirachy': 3, 'ref_parent': 981, 'children': [], 'group': 'Property'}, {'ref': 984, 'tag': 'Property', 'name': 'Live.MidiMap.PitchBendFeedbackRule.value_pair_map', 'description': None, 'path': ['Live', 'MidiMap', 'PitchBendFeedbackRule', 'value_pair_map'], 'hirachy': 3, 'ref_parent': 981, 'children': [], 'group': 'Property'}, {'ref': 985, 'tag': 'Module', 'name': 'Live.MixerDevice', 'description': None, 'path': ['Live', 'MixerDevice'], 'hirachy': 1, 'ref_parent': 0, 'children': [986], 'group': None}, {'ref': 986, 'tag': 'Class', 'name': 'Live.MixerDevice.MixerDevice', 'description': 'This class represents a Mixer Device in Live, which gives youaccess to the Volume and Panning properties of a Track.', 'path': ['Live', 'MixerDevice', 'MixerDevice'], 'hirachy': 2, 'ref_parent': 985, 'children': [987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1013], 'group': None}, {'ref': 987, 'tag': 'Property', 'name': 'Live.MixerDevice.MixerDevice._live_ptr', 'description': None, 'path': ['Live', 'MixerDevice', 'MixerDevice', '_live_ptr'], 'hirachy': 3, 'ref_parent': 986, 'children': [], 'group': 'Property'}, {'ref': 988, 'tag': 'Property', 'name': 'Live.MixerDevice.MixerDevice.canonical_parent', 'description': 'Get the canonical parent of the mixer device.', 'path': ['Live', 'MixerDevice', 'MixerDevice', 'canonical_parent'], 'hirachy': 3, 'ref_parent': 986, 'children': [], 'group': 'Property'}, {'ref': 989, 'tag': 'Property', 'name': 'Live.MixerDevice.MixerDevice.crossfade_assign', 'description': "Player- and ReturnTracks only: Access to the Track's Crossfade Assign State.", 'path': ['Live', 'MixerDevice', 'MixerDevice', 'crossfade_assign'], 'hirachy': 3, 'ref_parent': 986, 'children': [], 'group': 'Property'}, {'ref': 990, 'tag': 'Property', 'name': 'Live.MixerDevice.MixerDevice.crossfader', 'description': 'MasterTrack only: Const access to the Crossfader.', 'path': ['Live', 'MixerDevice', 'MixerDevice', 'crossfader'], 'hirachy': 3, 'ref_parent': 986, 'children': [], 'group': 'Property'}, {'ref': 991, 'tag': 'Property', 'name': 'Live.MixerDevice.MixerDevice.cue_volume', 'description': 'MasterTrack only: Const access to the Cue Volume Parameter.', 'path': ['Live', 'MixerDevice', 'MixerDevice', 'cue_volume'], 'hirachy': 3, 'ref_parent': 986, 'children': [], 'group': 'Property'}, {'ref': 992, 'tag': 'Property', 'name': 'Live.MixerDevice.MixerDevice.left_split_stereo', 'description': "Const access to the Track's Left Split Stereo Panning Device Parameter.", 'path': ['Live', 'MixerDevice', 'MixerDevice', 'left_split_stereo'], 'hirachy': 3, 'ref_parent': 986, 'children': [], 'group': 'Property'}, {'ref': 993, 'tag': 'Property', 'name': 'Live.MixerDevice.MixerDevice.panning', 'description': 'Const access to the Tracks Panning Device Parameter.', 'path': ['Live', 'MixerDevice', 'MixerDevice', 'panning'], 'hirachy': 3, 'ref_parent': 986, 'children': [], 'group': 'Property'}, {'ref': 994, 'tag': 'Property', 'name': 'Live.MixerDevice.MixerDevice.panning_mode', 'description': "Access to the Track's Panning Mode.", 'path': ['Live', 'MixerDevice', 'MixerDevice', 'panning_mode'], 'hirachy': 3, 'ref_parent': 986, 'children': [], 'group': 'Property'}, {'ref': 995, 'tag': 'Property', 'name': 'Live.MixerDevice.MixerDevice.right_split_stereo', 'description': "Const access to the Track's Right Split Stereo Panning Device Parameter.", 'path': ['Live', 'MixerDevice', 'MixerDevice', 'right_split_stereo'], 'hirachy': 3, 'ref_parent': 986, 'children': [], 'group': 'Property'}, {'ref': 996, 'tag': 'Property', 'name': 'Live.MixerDevice.MixerDevice.sends', 'description': 'Const access to the Tracks list of Send Amount Device Parameters.', 'path': ['Live', 'MixerDevice', 'MixerDevice', 'sends'], 'hirachy': 3, 'ref_parent': 986, 'children': [], 'group': 'Property'}, {'ref': 997, 'tag': 'Property', 'name': 'Live.MixerDevice.MixerDevice.song_tempo', 'description': "MasterTrack only: Const access to the Song's Tempo.", 'path': ['Live', 'MixerDevice', 'MixerDevice', 'song_tempo'], 'hirachy': 3, 'ref_parent': 986, 'children': [], 'group': 'Property'}, {'ref': 998, 'tag': 'Property', 'name': 'Live.MixerDevice.MixerDevice.track_activator', 'description': 'Const access to the Tracks Activator Device Parameter.', 'path': ['Live', 'MixerDevice', 'MixerDevice', 'track_activator'], 'hirachy': 3, 'ref_parent': 986, 'children': [], 'group': 'Property'}, {'ref': 999, 'tag': 'Property', 'name': 'Live.MixerDevice.MixerDevice.volume', 'description': 'Const access to the Tracks Volume Device Parameter.', 'path': ['Live', 'MixerDevice', 'MixerDevice', 'volume'], 'hirachy': 3, 'ref_parent': 986, 'children': [], 'group': 'Property'}, {'ref': 1000, 'tag': 'listener Method', 'name': 'Live.MixerDevice.MixerDevice.add_crossfade_assign_listener()', 'description': 'add_crossfade_assign_listener( (MixerDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;crossfade_assign&quot; has changed. C++ signature :  void add_crossfade_assign_listener(TPyHandle<ATrackDevice>,boost::python::api::object)', 'path': ['Live', 'MixerDevice', 'MixerDevice', 'add_crossfade_assign_listener()'], 'hirachy': 3, 'ref_parent': 986, 'children': [], 'group': 'listener Method'}, {'ref': 1001, 'tag': 'listener Method', 'name': 'Live.MixerDevice.MixerDevice.add_panning_mode_listener()', 'description': 'add_panning_mode_listener( (MixerDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;panning_mode&quot; has changed. C++ signature :  void add_panning_mode_listener(TPyHandle<ATrackDevice>,boost::python::api::object)', 'path': ['Live', 'MixerDevice', 'MixerDevice', 'add_panning_mode_listener()'], 'hirachy': 3, 'ref_parent': 986, 'children': [], 'group': 'listener Method'}, {'ref': 1002, 'tag': 'listener Method', 'name': 'Live.MixerDevice.MixerDevice.add_sends_listener()', 'description': 'add_sends_listener( (MixerDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;sends&quot; has changed. C++ signature :  void add_sends_listener(TPyHandle<ATrackDevice>,boost::python::api::object)', 'path': ['Live', 'MixerDevice', 'MixerDevice', 'add_sends_listener()'], 'hirachy': 3, 'ref_parent': 986, 'children': [], 'group': 'listener Method'}, {'ref': 1003, 'tag': 'listener Method', 'name': 'Live.MixerDevice.MixerDevice.crossfade_assign_has_listener()', 'description': 'crossfade_assign_has_listener( (MixerDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;crossfade_assign&quot;. C++ signature :  bool crossfade_assign_has_listener(TPyHandle<ATrackDevice>,boost::python::api::object)', 'path': ['Live', 'MixerDevice', 'MixerDevice', 'crossfade_assign_has_listener()'], 'hirachy': 3, 'ref_parent': 986, 'children': [], 'group': 'listener Method'}, {'ref': 1004, 'tag': 'listener Method', 'name': 'Live.MixerDevice.MixerDevice.panning_mode_has_listener()', 'description': 'panning_mode_has_listener( (MixerDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;panning_mode&quot;. C++ signature :  bool panning_mode_has_listener(TPyHandle<ATrackDevice>,boost::python::api::object)', 'path': ['Live', 'MixerDevice', 'MixerDevice', 'panning_mode_has_listener()'], 'hirachy': 3, 'ref_parent': 986, 'children': [], 'group': 'listener Method'}, {'ref': 1005, 'tag': 'listener Method', 'name': 'Live.MixerDevice.MixerDevice.remove_crossfade_assign_listener()', 'description': 'remove_crossfade_assign_listener( (MixerDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;crossfade_assign&quot;. C++ signature :  void remove_crossfade_assign_listener(TPyHandle<ATrackDevice>,boost::python::api::object)', 'path': ['Live', 'MixerDevice', 'MixerDevice', 'remove_crossfade_assign_listener()'], 'hirachy': 3, 'ref_parent': 986, 'children': [], 'group': 'listener Method'}, {'ref': 1006, 'tag': 'listener Method', 'name': 'Live.MixerDevice.MixerDevice.remove_panning_mode_listener()', 'description': 'remove_panning_mode_listener( (MixerDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;panning_mode&quot;. C++ signature :  void remove_panning_mode_listener(TPyHandle<ATrackDevice>,boost::python::api::object)', 'path': ['Live', 'MixerDevice', 'MixerDevice', 'remove_panning_mode_listener()'], 'hirachy': 3, 'ref_parent': 986, 'children': [], 'group': 'listener Method'}, {'ref': 1007, 'tag': 'listener Method', 'name': 'Live.MixerDevice.MixerDevice.remove_sends_listener()', 'description': 'remove_sends_listener( (MixerDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;sends&quot;. C++ signature :  void remove_sends_listener(TPyHandle<ATrackDevice>,boost::python::api::object)', 'path': ['Live', 'MixerDevice', 'MixerDevice', 'remove_sends_listener()'], 'hirachy': 3, 'ref_parent': 986, 'children': [], 'group': 'listener Method'}, {'ref': 1008, 'tag': 'listener Method', 'name': 'Live.MixerDevice.MixerDevice.sends_has_listener()', 'description': 'sends_has_listener( (MixerDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;sends&quot;. C++ signature :  bool sends_has_listener(TPyHandle<ATrackDevice>,boost::python::api::object)', 'path': ['Live', 'MixerDevice', 'MixerDevice', 'sends_has_listener()'], 'hirachy': 3, 'ref_parent': 986, 'children': [], 'group': 'listener Method'}, {'ref': 1009, 'tag': 'Sub-Class', 'name': 'Live.MixerDevice.MixerDevice.crossfade_assignments', 'description': None, 'path': ['Live', 'MixerDevice', 'MixerDevice', 'crossfade_assignments'], 'hirachy': 3, 'ref_parent': 986, 'children': [1010, 1011, 1012], 'group': None}, {'ref': 1010, 'tag': 'Value', 'name': 'Live.MixerDevice.MixerDevice.crossfade_assignments.A', 'description': None, 'path': ['Live', 'MixerDevice', 'MixerDevice', 'crossfade_assignments', 'A'], 'hirachy': 4, 'ref_parent': 1009, 'children': [], 'group': 'Value'}, {'ref': 1011, 'tag': 'Value', 'name': 'Live.MixerDevice.MixerDevice.crossfade_assignments.B', 'description': None, 'path': ['Live', 'MixerDevice', 'MixerDevice', 'crossfade_assignments', 'B'], 'hirachy': 4, 'ref_parent': 1009, 'children': [], 'group': 'Value'}, {'ref': 1012, 'tag': 'Value', 'name': 'Live.MixerDevice.MixerDevice.crossfade_assignments.NONE', 'description': None, 'path': ['Live', 'MixerDevice', 'MixerDevice', 'crossfade_assignments', 'NONE'], 'hirachy': 4, 'ref_parent': 1009, 'children': [], 'group': 'Value'}, {'ref': 1013, 'tag': 'Sub-Class', 'name': 'Live.MixerDevice.MixerDevice.panning_modes', 'description': None, 'path': ['Live', 'MixerDevice', 'MixerDevice', 'panning_modes'], 'hirachy': 3, 'ref_parent': 986, 'children': [1014, 1015], 'group': None}, {'ref': 1014, 'tag': 'Value', 'name': 'Live.MixerDevice.MixerDevice.panning_modes.stereo', 'description': None, 'path': ['Live', 'MixerDevice', 'MixerDevice', 'panning_modes', 'stereo'], 'hirachy': 4, 'ref_parent': 1013, 'children': [], 'group': 'Value'}, {'ref': 1015, 'tag': 'Value', 'name': 'Live.MixerDevice.MixerDevice.panning_modes.stereo_split', 'description': None, 'path': ['Live', 'MixerDevice', 'MixerDevice', 'panning_modes', 'stereo_split'], 'hirachy': 4, 'ref_parent': 1013, 'children': [], 'group': 'Value'}, {'ref': 1016, 'tag': 'Module', 'name': 'Live.PluginDevice', 'description': None, 'path': ['Live', 'PluginDevice'], 'hirachy': 1, 'ref_parent': 0, 'children': [1017], 'group': None}, {'ref': 1017, 'tag': 'Class', 'name': 'Live.PluginDevice.PluginDevice', 'description': 'This class represents a plugin device.', 'path': ['Live', 'PluginDevice', 'PluginDevice'], 'hirachy': 2, 'ref_parent': 1016, 'children': [1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], 'group': None}, {'ref': 1018, 'tag': 'Property', 'name': 'Live.PluginDevice.PluginDevice._live_ptr', 'description': None, 'path': ['Live', 'PluginDevice', 'PluginDevice', '_live_ptr'], 'hirachy': 3, 'ref_parent': 1017, 'children': [], 'group': 'Property'}, {'ref': 1019, 'tag': 'Property', 'name': 'Live.PluginDevice.PluginDevice.can_have_chains', 'description': 'Returns true if the device is a rack.', 'path': ['Live', 'PluginDevice', 'PluginDevice', 'can_have_chains'], 'hirachy': 3, 'ref_parent': 1017, 'children': [], 'group': 'Property'}, {'ref': 1020, 'tag': 'Property', 'name': 'Live.PluginDevice.PluginDevice.can_have_drum_pads', 'description': 'Returns true if the device is a drum rack.', 'path': ['Live', 'PluginDevice', 'PluginDevice', 'can_have_drum_pads'], 'hirachy': 3, 'ref_parent': 1017, 'children': [], 'group': 'Property'}, {'ref': 1021, 'tag': 'Property', 'name': 'Live.PluginDevice.PluginDevice.canonical_parent', 'description': 'Get the canonical parent of the Device.', 'path': ['Live', 'PluginDevice', 'PluginDevice', 'canonical_parent'], 'hirachy': 3, 'ref_parent': 1017, 'children': [], 'group': 'Property'}, {'ref': 1022, 'tag': 'Property', 'name': 'Live.PluginDevice.PluginDevice.class_display_name', 'description': "Return const access to the name of the device's class name as displayed in Live's browser and device chain", 'path': ['Live', 'PluginDevice', 'PluginDevice', 'class_display_name'], 'hirachy': 3, 'ref_parent': 1017, 'children': [], 'group': 'Property'}, {'ref': 1023, 'tag': 'Property', 'name': 'Live.PluginDevice.PluginDevice.class_name', 'description': "Return const access to the name of the device's class.", 'path': ['Live', 'PluginDevice', 'PluginDevice', 'class_name'], 'hirachy': 3, 'ref_parent': 1017, 'children': [], 'group': 'Property'}, {'ref': 1024, 'tag': 'Property', 'name': 'Live.PluginDevice.PluginDevice.is_active', 'description': "Return const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off.", 'path': ['Live', 'PluginDevice', 'PluginDevice', 'is_active'], 'hirachy': 3, 'ref_parent': 1017, 'children': [], 'group': 'Property'}, {'ref': 1025, 'tag': 'Property', 'name': 'Live.PluginDevice.PluginDevice.name', 'description': 'Return access to the name of the device.', 'path': ['Live', 'PluginDevice', 'PluginDevice', 'name'], 'hirachy': 3, 'ref_parent': 1017, 'children': [], 'group': 'Property'}, {'ref': 1026, 'tag': 'Property', 'name': 'Live.PluginDevice.PluginDevice.parameters', 'description': 'Const access to the list of available automatable parameters for this device.', 'path': ['Live', 'PluginDevice', 'PluginDevice', 'parameters'], 'hirachy': 3, 'ref_parent': 1017, 'children': [], 'group': 'Property'}, {'ref': 1027, 'tag': 'Property', 'name': 'Live.PluginDevice.PluginDevice.presets', 'description': 'Get the list of presets the plugin offers.', 'path': ['Live', 'PluginDevice', 'PluginDevice', 'presets'], 'hirachy': 3, 'ref_parent': 1017, 'children': [], 'group': 'Property'}, {'ref': 1028, 'tag': 'Property', 'name': 'Live.PluginDevice.PluginDevice.selected_preset_index', 'description': 'Access to the index of the currently selected preset.', 'path': ['Live', 'PluginDevice', 'PluginDevice', 'selected_preset_index'], 'hirachy': 3, 'ref_parent': 1017, 'children': [], 'group': 'Property'}, {'ref': 1029, 'tag': 'Property', 'name': 'Live.PluginDevice.PluginDevice.type', 'description': 'Return the type of the device.', 'path': ['Live', 'PluginDevice', 'PluginDevice', 'type'], 'hirachy': 3, 'ref_parent': 1017, 'children': [], 'group': 'Property'}, {'ref': 1030, 'tag': 'Property', 'name': 'Live.PluginDevice.PluginDevice.view', 'description': 'Representing the view aspects of a device.', 'path': ['Live', 'PluginDevice', 'PluginDevice', 'view'], 'hirachy': 3, 'ref_parent': 1017, 'children': [], 'group': 'Property'}, {'ref': 1031, 'tag': 'listener Method', 'name': 'Live.PluginDevice.PluginDevice.add_is_active_listener()', 'description': 'add_is_active_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_active&quot; has changed. C++ signature :  void add_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'PluginDevice', 'PluginDevice', 'add_is_active_listener()'], 'hirachy': 3, 'ref_parent': 1017, 'children': [], 'group': 'listener Method'}, {'ref': 1032, 'tag': 'listener Method', 'name': 'Live.PluginDevice.PluginDevice.add_name_listener()', 'description': 'add_name_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'PluginDevice', 'PluginDevice', 'add_name_listener()'], 'hirachy': 3, 'ref_parent': 1017, 'children': [], 'group': 'listener Method'}, {'ref': 1033, 'tag': 'listener Method', 'name': 'Live.PluginDevice.PluginDevice.add_parameters_listener()', 'description': 'add_parameters_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;parameters&quot; has changed. C++ signature :  void add_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'PluginDevice', 'PluginDevice', 'add_parameters_listener()'], 'hirachy': 3, 'ref_parent': 1017, 'children': [], 'group': 'listener Method'}, {'ref': 1034, 'tag': 'listener Method', 'name': 'Live.PluginDevice.PluginDevice.add_presets_listener()', 'description': 'add_presets_listener( (PluginDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;presets&quot; has changed. C++ signature :  void add_presets_listener(TPluginDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'PluginDevice', 'PluginDevice', 'add_presets_listener()'], 'hirachy': 3, 'ref_parent': 1017, 'children': [], 'group': 'listener Method'}, {'ref': 1035, 'tag': 'listener Method', 'name': 'Live.PluginDevice.PluginDevice.add_selected_preset_index_listener()', 'description': 'add_selected_preset_index_listener( (PluginDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;selected_preset_index&quot; has changed. C++ signature :  void add_selected_preset_index_listener(TPluginDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'PluginDevice', 'PluginDevice', 'add_selected_preset_index_listener()'], 'hirachy': 3, 'ref_parent': 1017, 'children': [], 'group': 'listener Method'}, {'ref': 1036, 'tag': 'Method', 'name': 'Live.PluginDevice.PluginDevice.get_parameter_names()', 'description': 'get_parameter_names( (PluginDevice)arg1 [, (int)begin=0 [, (int)end=-1]]) -> StringVector : Get the range of plugin parameter names, bound by begin and end. If end is smaller than 0 it is interpreted as the parameter count.  C++ signature :  std::__1::vector<TString, std::__1::allocator<TString> > get_parameter_names(TPluginDevicePyHandle [,int=0 [,int=-1]])', 'path': ['Live', 'PluginDevice', 'PluginDevice', 'get_parameter_names()'], 'hirachy': 3, 'ref_parent': 1017, 'children': [], 'group': 'Method'}, {'ref': 1037, 'tag': 'listener Method', 'name': 'Live.PluginDevice.PluginDevice.is_active_has_listener()', 'description': 'is_active_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_active&quot;. C++ signature :  bool is_active_has_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'PluginDevice', 'PluginDevice', 'is_active_has_listener()'], 'hirachy': 3, 'ref_parent': 1017, 'children': [], 'group': 'listener Method'}, {'ref': 1038, 'tag': 'listener Method', 'name': 'Live.PluginDevice.PluginDevice.name_has_listener()', 'description': 'name_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'PluginDevice', 'PluginDevice', 'name_has_listener()'], 'hirachy': 3, 'ref_parent': 1017, 'children': [], 'group': 'listener Method'}, {'ref': 1039, 'tag': 'listener Method', 'name': 'Live.PluginDevice.PluginDevice.parameters_has_listener()', 'description': 'parameters_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;parameters&quot;. C++ signature :  bool parameters_has_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'PluginDevice', 'PluginDevice', 'parameters_has_listener()'], 'hirachy': 3, 'ref_parent': 1017, 'children': [], 'group': 'listener Method'}, {'ref': 1040, 'tag': 'listener Method', 'name': 'Live.PluginDevice.PluginDevice.presets_has_listener()', 'description': 'presets_has_listener( (PluginDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;presets&quot;. C++ signature :  bool presets_has_listener(TPluginDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'PluginDevice', 'PluginDevice', 'presets_has_listener()'], 'hirachy': 3, 'ref_parent': 1017, 'children': [], 'group': 'listener Method'}, {'ref': 1041, 'tag': 'listener Method', 'name': 'Live.PluginDevice.PluginDevice.remove_is_active_listener()', 'description': 'remove_is_active_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_active&quot;. C++ signature :  void remove_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'PluginDevice', 'PluginDevice', 'remove_is_active_listener()'], 'hirachy': 3, 'ref_parent': 1017, 'children': [], 'group': 'listener Method'}, {'ref': 1042, 'tag': 'listener Method', 'name': 'Live.PluginDevice.PluginDevice.remove_name_listener()', 'description': 'remove_name_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'PluginDevice', 'PluginDevice', 'remove_name_listener()'], 'hirachy': 3, 'ref_parent': 1017, 'children': [], 'group': 'listener Method'}, {'ref': 1043, 'tag': 'listener Method', 'name': 'Live.PluginDevice.PluginDevice.remove_parameters_listener()', 'description': 'remove_parameters_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;parameters&quot;. C++ signature :  void remove_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'PluginDevice', 'PluginDevice', 'remove_parameters_listener()'], 'hirachy': 3, 'ref_parent': 1017, 'children': [], 'group': 'listener Method'}, {'ref': 1044, 'tag': 'listener Method', 'name': 'Live.PluginDevice.PluginDevice.remove_presets_listener()', 'description': 'remove_presets_listener( (PluginDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;presets&quot;. C++ signature :  void remove_presets_listener(TPluginDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'PluginDevice', 'PluginDevice', 'remove_presets_listener()'], 'hirachy': 3, 'ref_parent': 1017, 'children': [], 'group': 'listener Method'}, {'ref': 1045, 'tag': 'listener Method', 'name': 'Live.PluginDevice.PluginDevice.remove_selected_preset_index_listener()', 'description': 'remove_selected_preset_index_listener( (PluginDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;selected_preset_index&quot;. C++ signature :  void remove_selected_preset_index_listener(TPluginDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'PluginDevice', 'PluginDevice', 'remove_selected_preset_index_listener()'], 'hirachy': 3, 'ref_parent': 1017, 'children': [], 'group': 'listener Method'}, {'ref': 1046, 'tag': 'listener Method', 'name': 'Live.PluginDevice.PluginDevice.selected_preset_index_has_listener()', 'description': 'selected_preset_index_has_listener( (PluginDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;selected_preset_index&quot;. C++ signature :  bool selected_preset_index_has_listener(TPluginDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'PluginDevice', 'PluginDevice', 'selected_preset_index_has_listener()'], 'hirachy': 3, 'ref_parent': 1017, 'children': [], 'group': 'listener Method'}, {'ref': 1047, 'tag': 'Method', 'name': 'Live.PluginDevice.PluginDevice.store_chosen_bank()', 'description': 'store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -> None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle<ADevice>,int,int)', 'path': ['Live', 'PluginDevice', 'PluginDevice', 'store_chosen_bank()'], 'hirachy': 3, 'ref_parent': 1017, 'children': [], 'group': 'Method'}, {'ref': 1048, 'tag': 'Class', 'name': 'Live.PluginDevice.PluginDevice.View', 'description': 'Representing the view aspects of a device.', 'path': ['Live', 'PluginDevice', 'PluginDevice', 'View'], 'hirachy': 3, 'ref_parent': 1017, 'children': [1049, 1050, 1051, 1052, 1053, 1054], 'group': None}, {'ref': 1049, 'tag': 'Property', 'name': 'Live.PluginDevice.PluginDevice.View._live_ptr', 'description': None, 'path': ['Live', 'PluginDevice', 'PluginDevice', 'View', '_live_ptr'], 'hirachy': 4, 'ref_parent': 1048, 'children': [], 'group': 'Property'}, {'ref': 1050, 'tag': 'Property', 'name': 'Live.PluginDevice.PluginDevice.View.canonical_parent', 'description': 'Get the canonical parent of the View.', 'path': ['Live', 'PluginDevice', 'PluginDevice', 'View', 'canonical_parent'], 'hirachy': 4, 'ref_parent': 1048, 'children': [], 'group': 'Property'}, {'ref': 1051, 'tag': 'Property', 'name': 'Live.PluginDevice.PluginDevice.View.is_collapsed', 'description': 'Get/Set/Listen if the device is shown collapsed in the device chain.', 'path': ['Live', 'PluginDevice', 'PluginDevice', 'View', 'is_collapsed'], 'hirachy': 4, 'ref_parent': 1048, 'children': [], 'group': 'Property'}, {'ref': 1052, 'tag': 'listener Method', 'name': 'Live.PluginDevice.PluginDevice.View.add_is_collapsed_listener()', 'description': 'add_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_collapsed&quot; has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)', 'path': ['Live', 'PluginDevice', 'PluginDevice', 'View', 'add_is_collapsed_listener()'], 'hirachy': 4, 'ref_parent': 1048, 'children': [], 'group': 'listener Method'}, {'ref': 1053, 'tag': 'listener Method', 'name': 'Live.PluginDevice.PluginDevice.View.is_collapsed_has_listener()', 'description': 'is_collapsed_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_collapsed&quot;. C++ signature :  bool is_collapsed_has_listener(TPyViewData<ADevice>,boost::python::api::object)', 'path': ['Live', 'PluginDevice', 'PluginDevice', 'View', 'is_collapsed_has_listener()'], 'hirachy': 4, 'ref_parent': 1048, 'children': [], 'group': 'listener Method'}, {'ref': 1054, 'tag': 'listener Method', 'name': 'Live.PluginDevice.PluginDevice.View.remove_is_collapsed_listener()', 'description': 'remove_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_collapsed&quot;. C++ signature :  void remove_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)', 'path': ['Live', 'PluginDevice', 'PluginDevice', 'View', 'remove_is_collapsed_listener()'], 'hirachy': 4, 'ref_parent': 1048, 'children': [], 'group': 'listener Method'}, {'ref': 1055, 'tag': 'Module', 'name': 'Live.RackDevice', 'description': None, 'path': ['Live', 'RackDevice'], 'hirachy': 1, 'ref_parent': 0, 'children': [1056], 'group': None}, {'ref': 1056, 'tag': 'Class', 'name': 'Live.RackDevice.RackDevice', 'description': 'This class represents a Rack device.', 'path': ['Live', 'RackDevice', 'RackDevice'], 'hirachy': 2, 'ref_parent': 1055, 'children': [1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121], 'group': None}, {'ref': 1057, 'tag': 'Property', 'name': 'Live.RackDevice.RackDevice._live_ptr', 'description': None, 'path': ['Live', 'RackDevice', 'RackDevice', '_live_ptr'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'Property'}, {'ref': 1058, 'tag': 'Property', 'name': 'Live.RackDevice.RackDevice.can_have_chains', 'description': 'Returns true if the device is a rack.', 'path': ['Live', 'RackDevice', 'RackDevice', 'can_have_chains'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'Property'}, {'ref': 1059, 'tag': 'Property', 'name': 'Live.RackDevice.RackDevice.can_have_drum_pads', 'description': 'Returns true if the device is a drum rack.', 'path': ['Live', 'RackDevice', 'RackDevice', 'can_have_drum_pads'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'Property'}, {'ref': 1060, 'tag': 'Property', 'name': 'Live.RackDevice.RackDevice.can_show_chains', 'description': 'return True, if this Rack contains a rack instrument device that is capable of showing its chains in session view.', 'path': ['Live', 'RackDevice', 'RackDevice', 'can_show_chains'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'Property'}, {'ref': 1061, 'tag': 'Property', 'name': 'Live.RackDevice.RackDevice.canonical_parent', 'description': 'Get the canonical parent of the Device.', 'path': ['Live', 'RackDevice', 'RackDevice', 'canonical_parent'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'Property'}, {'ref': 1062, 'tag': 'Property', 'name': 'Live.RackDevice.RackDevice.chains', 'description': 'Return const access to the list of chains in this device. Throws an exception if can_have_chains is false.', 'path': ['Live', 'RackDevice', 'RackDevice', 'chains'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'Property'}, {'ref': 1063, 'tag': 'Property', 'name': 'Live.RackDevice.RackDevice.class_display_name', 'description': "Return const access to the name of the device's class name as displayed in Live's browser and device chain", 'path': ['Live', 'RackDevice', 'RackDevice', 'class_display_name'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'Property'}, {'ref': 1064, 'tag': 'Property', 'name': 'Live.RackDevice.RackDevice.class_name', 'description': "Return const access to the name of the device's class.", 'path': ['Live', 'RackDevice', 'RackDevice', 'class_name'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'Property'}, {'ref': 1065, 'tag': 'Property', 'name': 'Live.RackDevice.RackDevice.drum_pads', 'description': 'Return const access to the list of drum pads in this device. Throws an exception if can_have_drum_pads is false.', 'path': ['Live', 'RackDevice', 'RackDevice', 'drum_pads'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'Property'}, {'ref': 1066, 'tag': 'Property', 'name': 'Live.RackDevice.RackDevice.has_drum_pads', 'description': 'Returns true if the device is a drum rack which has drum pads. Throws an exception if can_have_drum_pads is false.', 'path': ['Live', 'RackDevice', 'RackDevice', 'has_drum_pads'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'Property'}, {'ref': 1067, 'tag': 'Property', 'name': 'Live.RackDevice.RackDevice.has_macro_mappings', 'description': "Returns true if any of the rack's macros are mapped to a parameter.", 'path': ['Live', 'RackDevice', 'RackDevice', 'has_macro_mappings'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'Property'}, {'ref': 1068, 'tag': 'Property', 'name': 'Live.RackDevice.RackDevice.is_active', 'description': "Return const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off.", 'path': ['Live', 'RackDevice', 'RackDevice', 'is_active'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'Property'}, {'ref': 1069, 'tag': 'Property', 'name': 'Live.RackDevice.RackDevice.is_showing_chains', 'description': 'Returns True, if it is showing chains.', 'path': ['Live', 'RackDevice', 'RackDevice', 'is_showing_chains'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'Property'}, {'ref': 1070, 'tag': 'Property', 'name': 'Live.RackDevice.RackDevice.macros_mapped', 'description': 'A list of booleans, one for each macro parameter, which is True iffthat macro is mapped to something', 'path': ['Live', 'RackDevice', 'RackDevice', 'macros_mapped'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'Property'}, {'ref': 1071, 'tag': 'Property', 'name': 'Live.RackDevice.RackDevice.name', 'description': 'Return access to the name of the device.', 'path': ['Live', 'RackDevice', 'RackDevice', 'name'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'Property'}, {'ref': 1072, 'tag': 'Property', 'name': 'Live.RackDevice.RackDevice.parameters', 'description': 'Const access to the list of available automatable parameters for this device.', 'path': ['Live', 'RackDevice', 'RackDevice', 'parameters'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'Property'}, {'ref': 1073, 'tag': 'Property', 'name': 'Live.RackDevice.RackDevice.return_chains', 'description': 'Return const access to the list of return chains in this device. Throws an exception if can_have_chains is false.', 'path': ['Live', 'RackDevice', 'RackDevice', 'return_chains'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'Property'}, {'ref': 1074, 'tag': 'Property', 'name': 'Live.RackDevice.RackDevice.selected_variation_index', 'description': 'Access to the index of the currently selected macro variation.Throws an exception if the index is out of range.', 'path': ['Live', 'RackDevice', 'RackDevice', 'selected_variation_index'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'Property'}, {'ref': 1075, 'tag': 'Property', 'name': 'Live.RackDevice.RackDevice.type', 'description': 'Return the type of the device.', 'path': ['Live', 'RackDevice', 'RackDevice', 'type'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'Property'}, {'ref': 1076, 'tag': 'Property', 'name': 'Live.RackDevice.RackDevice.variation_count', 'description': 'Access to the number of macro variations currently stored.', 'path': ['Live', 'RackDevice', 'RackDevice', 'variation_count'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'Property'}, {'ref': 1077, 'tag': 'Property', 'name': 'Live.RackDevice.RackDevice.view', 'description': 'Representing the view aspects of a device.', 'path': ['Live', 'RackDevice', 'RackDevice', 'view'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'Property'}, {'ref': 1078, 'tag': 'Property', 'name': 'Live.RackDevice.RackDevice.visible_drum_pads', 'description': 'Return const access to the list of visible drum pads in this device. Throws an exception if can_have_drum_pads is false.', 'path': ['Live', 'RackDevice', 'RackDevice', 'visible_drum_pads'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'Property'}, {'ref': 1079, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.add_chains_listener()', 'description': 'add_chains_listener( (RackDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;chains&quot; has changed. C++ signature :  void add_chains_listener(TRackDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'add_chains_listener()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'listener Method'}, {'ref': 1080, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.add_drum_pads_listener()', 'description': 'add_drum_pads_listener( (RackDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;drum_pads&quot; has changed. C++ signature :  void add_drum_pads_listener(TRackDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'add_drum_pads_listener()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'listener Method'}, {'ref': 1081, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.add_has_drum_pads_listener()', 'description': 'add_has_drum_pads_listener( (RackDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;has_drum_pads&quot; has changed. C++ signature :  void add_has_drum_pads_listener(TRackDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'add_has_drum_pads_listener()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'listener Method'}, {'ref': 1082, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.add_has_macro_mappings_listener()', 'description': 'add_has_macro_mappings_listener( (RackDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;has_macro_mappings&quot; has changed. C++ signature :  void add_has_macro_mappings_listener(TRackDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'add_has_macro_mappings_listener()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'listener Method'}, {'ref': 1083, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.add_is_active_listener()', 'description': 'add_is_active_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_active&quot; has changed. C++ signature :  void add_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'add_is_active_listener()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'listener Method'}, {'ref': 1084, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.add_is_showing_chains_listener()', 'description': 'add_is_showing_chains_listener( (RackDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_showing_chains&quot; has changed. C++ signature :  void add_is_showing_chains_listener(TRackDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'add_is_showing_chains_listener()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'listener Method'}, {'ref': 1085, 'tag': 'Method', 'name': 'Live.RackDevice.RackDevice.add_macro()', 'description': 'add_macro( (RackDevice)arg1) -> None : Increases the number of visible macro controls in the rack. Throws an exception if the maximum number of macro controls is reached. C++ signature :  void add_macro(TRackDevicePyHandle)', 'path': ['Live', 'RackDevice', 'RackDevice', 'add_macro()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'Method'}, {'ref': 1086, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.add_macros_mapped_listener()', 'description': 'add_macros_mapped_listener( (RackDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;macros_mapped&quot; has changed. C++ signature :  void add_macros_mapped_listener(TRackDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'add_macros_mapped_listener()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'listener Method'}, {'ref': 1087, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.add_name_listener()', 'description': 'add_name_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'add_name_listener()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'listener Method'}, {'ref': 1088, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.add_parameters_listener()', 'description': 'add_parameters_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;parameters&quot; has changed. C++ signature :  void add_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'add_parameters_listener()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'listener Method'}, {'ref': 1089, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.add_return_chains_listener()', 'description': 'add_return_chains_listener( (RackDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;return_chains&quot; has changed. C++ signature :  void add_return_chains_listener(TRackDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'add_return_chains_listener()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'listener Method'}, {'ref': 1090, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.add_visible_drum_pads_listener()', 'description': 'add_visible_drum_pads_listener( (RackDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;visible_drum_pads&quot; has changed. C++ signature :  void add_visible_drum_pads_listener(TRackDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'add_visible_drum_pads_listener()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'listener Method'}, {'ref': 1091, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.chains_has_listener()', 'description': 'chains_has_listener( (RackDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;chains&quot;. C++ signature :  bool chains_has_listener(TRackDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'chains_has_listener()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'listener Method'}, {'ref': 1092, 'tag': 'Method', 'name': 'Live.RackDevice.RackDevice.copy_pad()', 'description': 'copy_pad( (RackDevice)arg1, (int)arg2, (int)arg3) -> None : Copies all contents of a drum pad from a source pad into a destination pad. copy_pad(source_index, destination_index) where source_index and destination_index correspond to the note number/index of the drum pad in a drum rack. Throws an exception when the source pad is empty, or when the source or destination indices are not between 0 - 127. C++ signature :  void copy_pad(TRackDevicePyHandle,int,int)', 'path': ['Live', 'RackDevice', 'RackDevice', 'copy_pad()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'Method'}, {'ref': 1093, 'tag': 'Method', 'name': 'Live.RackDevice.RackDevice.delete_selected_variation()', 'description': 'delete_selected_variation( (Device)arg1) -> None : Deletes the currently selected macro variation.Does nothing if there is no selected variation. C++ signature :  void delete_selected_variation(TPyHandle<ADevice>)', 'path': ['Live', 'RackDevice', 'RackDevice', 'delete_selected_variation()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'Method'}, {'ref': 1094, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.drum_pads_has_listener()', 'description': 'drum_pads_has_listener( (RackDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;drum_pads&quot;. C++ signature :  bool drum_pads_has_listener(TRackDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'drum_pads_has_listener()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'listener Method'}, {'ref': 1095, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.has_drum_pads_has_listener()', 'description': 'has_drum_pads_has_listener( (RackDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;has_drum_pads&quot;. C++ signature :  bool has_drum_pads_has_listener(TRackDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'has_drum_pads_has_listener()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'listener Method'}, {'ref': 1096, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.has_macro_mappings_has_listener()', 'description': 'has_macro_mappings_has_listener( (RackDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;has_macro_mappings&quot;. C++ signature :  bool has_macro_mappings_has_listener(TRackDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'has_macro_mappings_has_listener()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'listener Method'}, {'ref': 1097, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.is_active_has_listener()', 'description': 'is_active_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_active&quot;. C++ signature :  bool is_active_has_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'is_active_has_listener()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'listener Method'}, {'ref': 1098, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.is_showing_chains_has_listener()', 'description': 'is_showing_chains_has_listener( (RackDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_showing_chains&quot;. C++ signature :  bool is_showing_chains_has_listener(TRackDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'is_showing_chains_has_listener()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'listener Method'}, {'ref': 1099, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.macros_mapped_has_listener()', 'description': 'macros_mapped_has_listener( (RackDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;macros_mapped&quot;. C++ signature :  bool macros_mapped_has_listener(TRackDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'macros_mapped_has_listener()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'listener Method'}, {'ref': 1100, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.name_has_listener()', 'description': 'name_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'name_has_listener()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'listener Method'}, {'ref': 1101, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.parameters_has_listener()', 'description': 'parameters_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;parameters&quot;. C++ signature :  bool parameters_has_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'parameters_has_listener()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'listener Method'}, {'ref': 1102, 'tag': 'Method', 'name': 'Live.RackDevice.RackDevice.randomize_macros()', 'description': 'randomize_macros( (RackDevice)arg1) -> None : Randomizes the values for all macro controls not excluded from randomization. C++ signature :  void randomize_macros(TRackDevicePyHandle)', 'path': ['Live', 'RackDevice', 'RackDevice', 'randomize_macros()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'Method'}, {'ref': 1103, 'tag': 'Method', 'name': 'Live.RackDevice.RackDevice.recall_last_used_variation()', 'description': 'recall_last_used_variation( (Device)arg1) -> None : Recalls the macro variation that was recalled most recently.Does nothing if no variation has been recalled yet. C++ signature :  void recall_last_used_variation(TPyHandle<ADevice>)', 'path': ['Live', 'RackDevice', 'RackDevice', 'recall_last_used_variation()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'Method'}, {'ref': 1104, 'tag': 'Method', 'name': 'Live.RackDevice.RackDevice.recall_selected_variation()', 'description': 'recall_selected_variation( (Device)arg1) -> None : Recalls the currently selected macro variation.Does nothing if there are no variations. C++ signature :  void recall_selected_variation(TPyHandle<ADevice>)', 'path': ['Live', 'RackDevice', 'RackDevice', 'recall_selected_variation()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'Method'}, {'ref': 1105, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.remove_chains_listener()', 'description': 'remove_chains_listener( (RackDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;chains&quot;. C++ signature :  void remove_chains_listener(TRackDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'remove_chains_listener()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'listener Method'}, {'ref': 1106, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.remove_drum_pads_listener()', 'description': 'remove_drum_pads_listener( (RackDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;drum_pads&quot;. C++ signature :  void remove_drum_pads_listener(TRackDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'remove_drum_pads_listener()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'listener Method'}, {'ref': 1107, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.remove_has_drum_pads_listener()', 'description': 'remove_has_drum_pads_listener( (RackDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;has_drum_pads&quot;. C++ signature :  void remove_has_drum_pads_listener(TRackDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'remove_has_drum_pads_listener()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'listener Method'}, {'ref': 1108, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.remove_has_macro_mappings_listener()', 'description': 'remove_has_macro_mappings_listener( (RackDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;has_macro_mappings&quot;. C++ signature :  void remove_has_macro_mappings_listener(TRackDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'remove_has_macro_mappings_listener()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'listener Method'}, {'ref': 1109, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.remove_is_active_listener()', 'description': 'remove_is_active_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_active&quot;. C++ signature :  void remove_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'remove_is_active_listener()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'listener Method'}, {'ref': 1110, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.remove_is_showing_chains_listener()', 'description': 'remove_is_showing_chains_listener( (RackDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_showing_chains&quot;. C++ signature :  void remove_is_showing_chains_listener(TRackDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'remove_is_showing_chains_listener()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'listener Method'}, {'ref': 1111, 'tag': 'Method', 'name': 'Live.RackDevice.RackDevice.remove_macro()', 'description': 'remove_macro( (RackDevice)arg1) -> None : Decreases the number of visible macro controls in the rack. Throws an exception if the minimum number of macro controls is reached. C++ signature :  void remove_macro(TRackDevicePyHandle)', 'path': ['Live', 'RackDevice', 'RackDevice', 'remove_macro()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'Method'}, {'ref': 1112, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.remove_macros_mapped_listener()', 'description': 'remove_macros_mapped_listener( (RackDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;macros_mapped&quot;. C++ signature :  void remove_macros_mapped_listener(TRackDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'remove_macros_mapped_listener()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'listener Method'}, {'ref': 1113, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.remove_name_listener()', 'description': 'remove_name_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'remove_name_listener()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'listener Method'}, {'ref': 1114, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.remove_parameters_listener()', 'description': 'remove_parameters_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;parameters&quot;. C++ signature :  void remove_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'remove_parameters_listener()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'listener Method'}, {'ref': 1115, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.remove_return_chains_listener()', 'description': 'remove_return_chains_listener( (RackDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;return_chains&quot;. C++ signature :  void remove_return_chains_listener(TRackDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'remove_return_chains_listener()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'listener Method'}, {'ref': 1116, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.remove_visible_drum_pads_listener()', 'description': 'remove_visible_drum_pads_listener( (RackDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;visible_drum_pads&quot;. C++ signature :  void remove_visible_drum_pads_listener(TRackDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'remove_visible_drum_pads_listener()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'listener Method'}, {'ref': 1117, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.return_chains_has_listener()', 'description': 'return_chains_has_listener( (RackDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;return_chains&quot;. C++ signature :  bool return_chains_has_listener(TRackDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'return_chains_has_listener()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'listener Method'}, {'ref': 1118, 'tag': 'Method', 'name': 'Live.RackDevice.RackDevice.store_chosen_bank()', 'description': 'store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -> None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle<ADevice>,int,int)', 'path': ['Live', 'RackDevice', 'RackDevice', 'store_chosen_bank()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'Method'}, {'ref': 1119, 'tag': 'Method', 'name': 'Live.RackDevice.RackDevice.store_variation()', 'description': 'store_variation( (Device)arg1) -> None : Stores a new variation of the values of all currently mapped macros C++ signature :  void store_variation(TPyHandle<ADevice>)', 'path': ['Live', 'RackDevice', 'RackDevice', 'store_variation()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'Method'}, {'ref': 1120, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.visible_drum_pads_has_listener()', 'description': 'visible_drum_pads_has_listener( (RackDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;visible_drum_pads&quot;. C++ signature :  bool visible_drum_pads_has_listener(TRackDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'visible_drum_pads_has_listener()'], 'hirachy': 3, 'ref_parent': 1056, 'children': [], 'group': 'listener Method'}, {'ref': 1121, 'tag': 'Class', 'name': 'Live.RackDevice.RackDevice.View', 'description': 'Representing the view aspects of a rack device.', 'path': ['Live', 'RackDevice', 'RackDevice', 'View'], 'hirachy': 3, 'ref_parent': 1056, 'children': [1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143], 'group': None}, {'ref': 1122, 'tag': 'Property', 'name': 'Live.RackDevice.RackDevice.View._live_ptr', 'description': None, 'path': ['Live', 'RackDevice', 'RackDevice', 'View', '_live_ptr'], 'hirachy': 4, 'ref_parent': 1121, 'children': [], 'group': 'Property'}, {'ref': 1123, 'tag': 'Property', 'name': 'Live.RackDevice.RackDevice.View.canonical_parent', 'description': 'Get the canonical parent of the View.', 'path': ['Live', 'RackDevice', 'RackDevice', 'View', 'canonical_parent'], 'hirachy': 4, 'ref_parent': 1121, 'children': [], 'group': 'Property'}, {'ref': 1124, 'tag': 'Property', 'name': 'Live.RackDevice.RackDevice.View.drum_pads_scroll_position', 'description': 'Access to the index of the lowest visible row of pads. Throws an exception if can_have_drum_pads is false.', 'path': ['Live', 'RackDevice', 'RackDevice', 'View', 'drum_pads_scroll_position'], 'hirachy': 4, 'ref_parent': 1121, 'children': [], 'group': 'Property'}, {'ref': 1125, 'tag': 'Property', 'name': 'Live.RackDevice.RackDevice.View.is_collapsed', 'description': 'Get/Set/Listen if the device is shown collapsed in the device chain.', 'path': ['Live', 'RackDevice', 'RackDevice', 'View', 'is_collapsed'], 'hirachy': 4, 'ref_parent': 1121, 'children': [], 'group': 'Property'}, {'ref': 1126, 'tag': 'Property', 'name': 'Live.RackDevice.RackDevice.View.is_showing_chain_devices', 'description': 'Return whether the devices in the currently selected chain are visible. Throws an exception if can_have_chains is false.', 'path': ['Live', 'RackDevice', 'RackDevice', 'View', 'is_showing_chain_devices'], 'hirachy': 4, 'ref_parent': 1121, 'children': [], 'group': 'Property'}, {'ref': 1127, 'tag': 'Property', 'name': 'Live.RackDevice.RackDevice.View.selected_chain', 'description': 'Return access to the currently selected chain.', 'path': ['Live', 'RackDevice', 'RackDevice', 'View', 'selected_chain'], 'hirachy': 4, 'ref_parent': 1121, 'children': [], 'group': 'Property'}, {'ref': 1128, 'tag': 'Property', 'name': 'Live.RackDevice.RackDevice.View.selected_drum_pad', 'description': 'Return access to the currently selected drum pad. Throws an exception if can_have_drum_pads is false.', 'path': ['Live', 'RackDevice', 'RackDevice', 'View', 'selected_drum_pad'], 'hirachy': 4, 'ref_parent': 1121, 'children': [], 'group': 'Property'}, {'ref': 1129, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.View.add_drum_pads_scroll_position_listener()', 'description': 'add_drum_pads_scroll_position_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;drum_pads_scroll_position&quot; has changed. C++ signature :  void add_drum_pads_scroll_position_listener(TRackDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'View', 'add_drum_pads_scroll_position_listener()'], 'hirachy': 4, 'ref_parent': 1121, 'children': [], 'group': 'listener Method'}, {'ref': 1130, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.View.add_is_collapsed_listener()', 'description': 'add_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_collapsed&quot; has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'View', 'add_is_collapsed_listener()'], 'hirachy': 4, 'ref_parent': 1121, 'children': [], 'group': 'listener Method'}, {'ref': 1131, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.View.add_is_showing_chain_devices_listener()', 'description': 'add_is_showing_chain_devices_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_showing_chain_devices&quot; has changed. C++ signature :  void add_is_showing_chain_devices_listener(TRackDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'View', 'add_is_showing_chain_devices_listener()'], 'hirachy': 4, 'ref_parent': 1121, 'children': [], 'group': 'listener Method'}, {'ref': 1132, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.View.add_selected_chain_listener()', 'description': 'add_selected_chain_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;selected_chain&quot; has changed. C++ signature :  void add_selected_chain_listener(TRackDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'View', 'add_selected_chain_listener()'], 'hirachy': 4, 'ref_parent': 1121, 'children': [], 'group': 'listener Method'}, {'ref': 1133, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.View.add_selected_drum_pad_listener()', 'description': 'add_selected_drum_pad_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;selected_drum_pad&quot; has changed. C++ signature :  void add_selected_drum_pad_listener(TRackDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'View', 'add_selected_drum_pad_listener()'], 'hirachy': 4, 'ref_parent': 1121, 'children': [], 'group': 'listener Method'}, {'ref': 1134, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.View.drum_pads_scroll_position_has_listener()', 'description': 'drum_pads_scroll_position_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;drum_pads_scroll_position&quot;. C++ signature :  bool drum_pads_scroll_position_has_listener(TRackDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'View', 'drum_pads_scroll_position_has_listener()'], 'hirachy': 4, 'ref_parent': 1121, 'children': [], 'group': 'listener Method'}, {'ref': 1135, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.View.is_collapsed_has_listener()', 'description': 'is_collapsed_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_collapsed&quot;. C++ signature :  bool is_collapsed_has_listener(TPyViewData<ADevice>,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'View', 'is_collapsed_has_listener()'], 'hirachy': 4, 'ref_parent': 1121, 'children': [], 'group': 'listener Method'}, {'ref': 1136, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.View.is_showing_chain_devices_has_listener()', 'description': 'is_showing_chain_devices_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_showing_chain_devices&quot;. C++ signature :  bool is_showing_chain_devices_has_listener(TRackDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'View', 'is_showing_chain_devices_has_listener()'], 'hirachy': 4, 'ref_parent': 1121, 'children': [], 'group': 'listener Method'}, {'ref': 1137, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.View.remove_drum_pads_scroll_position_listener()', 'description': 'remove_drum_pads_scroll_position_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;drum_pads_scroll_position&quot;. C++ signature :  void remove_drum_pads_scroll_position_listener(TRackDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'View', 'remove_drum_pads_scroll_position_listener()'], 'hirachy': 4, 'ref_parent': 1121, 'children': [], 'group': 'listener Method'}, {'ref': 1138, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.View.remove_is_collapsed_listener()', 'description': 'remove_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_collapsed&quot;. C++ signature :  void remove_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'View', 'remove_is_collapsed_listener()'], 'hirachy': 4, 'ref_parent': 1121, 'children': [], 'group': 'listener Method'}, {'ref': 1139, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.View.remove_is_showing_chain_devices_listener()', 'description': 'remove_is_showing_chain_devices_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_showing_chain_devices&quot;. C++ signature :  void remove_is_showing_chain_devices_listener(TRackDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'View', 'remove_is_showing_chain_devices_listener()'], 'hirachy': 4, 'ref_parent': 1121, 'children': [], 'group': 'listener Method'}, {'ref': 1140, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.View.remove_selected_chain_listener()', 'description': 'remove_selected_chain_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;selected_chain&quot;. C++ signature :  void remove_selected_chain_listener(TRackDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'View', 'remove_selected_chain_listener()'], 'hirachy': 4, 'ref_parent': 1121, 'children': [], 'group': 'listener Method'}, {'ref': 1141, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.View.remove_selected_drum_pad_listener()', 'description': 'remove_selected_drum_pad_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;selected_drum_pad&quot;. C++ signature :  void remove_selected_drum_pad_listener(TRackDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'View', 'remove_selected_drum_pad_listener()'], 'hirachy': 4, 'ref_parent': 1121, 'children': [], 'group': 'listener Method'}, {'ref': 1142, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.View.selected_chain_has_listener()', 'description': 'selected_chain_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;selected_chain&quot;. C++ signature :  bool selected_chain_has_listener(TRackDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'View', 'selected_chain_has_listener()'], 'hirachy': 4, 'ref_parent': 1121, 'children': [], 'group': 'listener Method'}, {'ref': 1143, 'tag': 'listener Method', 'name': 'Live.RackDevice.RackDevice.View.selected_drum_pad_has_listener()', 'description': 'selected_drum_pad_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;selected_drum_pad&quot;. C++ signature :  bool selected_drum_pad_has_listener(TRackDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'RackDevice', 'RackDevice', 'View', 'selected_drum_pad_has_listener()'], 'hirachy': 4, 'ref_parent': 1121, 'children': [], 'group': 'listener Method'}, {'ref': 1144, 'tag': 'Module', 'name': 'Live.Sample', 'description': None, 'path': ['Live', 'Sample'], 'hirachy': 1, 'ref_parent': 0, 'children': [1145, 1238, 1250, 1255], 'group': None}, {'ref': 1145, 'tag': 'Class', 'name': 'Live.Sample.Sample', 'description': 'This class represents a sample file loaded into a Simpler instance.', 'path': ['Live', 'Sample', 'Sample'], 'hirachy': 2, 'ref_parent': 1144, 'children': [1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237], 'group': None}, {'ref': 1146, 'tag': 'Property', 'name': 'Live.Sample.Sample._live_ptr', 'description': None, 'path': ['Live', 'Sample', 'Sample', '_live_ptr'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'Property'}, {'ref': 1147, 'tag': 'Property', 'name': 'Live.Sample.Sample.beats_granulation_resolution', 'description': 'Access to the Granulation Resolution parameter in Beats Warp Mode.', 'path': ['Live', 'Sample', 'Sample', 'beats_granulation_resolution'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'Property'}, {'ref': 1148, 'tag': 'Property', 'name': 'Live.Sample.Sample.beats_transient_envelope', 'description': 'Access to the Transient Envelope parameter in Beats Warp Mode.', 'path': ['Live', 'Sample', 'Sample', 'beats_transient_envelope'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'Property'}, {'ref': 1149, 'tag': 'Property', 'name': 'Live.Sample.Sample.beats_transient_loop_mode', 'description': 'Access to the Transient Loop Mode parameter in Beats Warp Mode.', 'path': ['Live', 'Sample', 'Sample', 'beats_transient_loop_mode'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'Property'}, {'ref': 1150, 'tag': 'Property', 'name': 'Live.Sample.Sample.canonical_parent', 'description': "Access to the sample's canonical parent.", 'path': ['Live', 'Sample', 'Sample', 'canonical_parent'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'Property'}, {'ref': 1151, 'tag': 'Property', 'name': 'Live.Sample.Sample.complex_pro_envelope', 'description': 'Access to the Envelope parameter in Complex Pro Mode.', 'path': ['Live', 'Sample', 'Sample', 'complex_pro_envelope'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'Property'}, {'ref': 1152, 'tag': 'Property', 'name': 'Live.Sample.Sample.complex_pro_formants', 'description': 'Access to the Formants parameter in Complex Pro Warp Mode.', 'path': ['Live', 'Sample', 'Sample', 'complex_pro_formants'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'Property'}, {'ref': 1153, 'tag': 'Property', 'name': 'Live.Sample.Sample.end_marker', 'description': "Access to the position of the sample's end marker.", 'path': ['Live', 'Sample', 'Sample', 'end_marker'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'Property'}, {'ref': 1154, 'tag': 'Property', 'name': 'Live.Sample.Sample.file_path', 'description': 'Get the path of the sample file.', 'path': ['Live', 'Sample', 'Sample', 'file_path'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'Property'}, {'ref': 1155, 'tag': 'Property', 'name': 'Live.Sample.Sample.gain', 'description': 'Access to the sample gain.', 'path': ['Live', 'Sample', 'Sample', 'gain'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'Property'}, {'ref': 1156, 'tag': 'Property', 'name': 'Live.Sample.Sample.length', 'description': 'Get the length of the sample file in sample frames.', 'path': ['Live', 'Sample', 'Sample', 'length'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'Property'}, {'ref': 1157, 'tag': 'Property', 'name': 'Live.Sample.Sample.sample_rate', 'description': 'Access to the audio sample rate of the sample.', 'path': ['Live', 'Sample', 'Sample', 'sample_rate'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'Property'}, {'ref': 1158, 'tag': 'Property', 'name': 'Live.Sample.Sample.slices', 'description': 'Access to the list of slice points in sample time in the sample.', 'path': ['Live', 'Sample', 'Sample', 'slices'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'Property'}, {'ref': 1159, 'tag': 'Property', 'name': 'Live.Sample.Sample.slicing_beat_division', 'description': "Access to sample's slicing step size.", 'path': ['Live', 'Sample', 'Sample', 'slicing_beat_division'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'Property'}, {'ref': 1160, 'tag': 'Property', 'name': 'Live.Sample.Sample.slicing_region_count', 'description': "Access to sample's slicing split count.", 'path': ['Live', 'Sample', 'Sample', 'slicing_region_count'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'Property'}, {'ref': 1161, 'tag': 'Property', 'name': 'Live.Sample.Sample.slicing_sensitivity', 'description': "Access to sample's slicing sensitivity whose sensitivity is in between 0.0 and 1.0.The higher the sensitivity, the more slices will be available.", 'path': ['Live', 'Sample', 'Sample', 'slicing_sensitivity'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'Property'}, {'ref': 1162, 'tag': 'Property', 'name': 'Live.Sample.Sample.slicing_style', 'description': "Access to sample's slicing style.", 'path': ['Live', 'Sample', 'Sample', 'slicing_style'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'Property'}, {'ref': 1163, 'tag': 'Property', 'name': 'Live.Sample.Sample.start_marker', 'description': "Access to the position of the sample's start marker.", 'path': ['Live', 'Sample', 'Sample', 'start_marker'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'Property'}, {'ref': 1164, 'tag': 'Property', 'name': 'Live.Sample.Sample.texture_flux', 'description': 'Access to the Flux parameter in Texture Warp Mode.', 'path': ['Live', 'Sample', 'Sample', 'texture_flux'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'Property'}, {'ref': 1165, 'tag': 'Property', 'name': 'Live.Sample.Sample.texture_grain_size', 'description': 'Access to the Grain Size parameter in Texture Warp Mode.', 'path': ['Live', 'Sample', 'Sample', 'texture_grain_size'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'Property'}, {'ref': 1166, 'tag': 'Property', 'name': 'Live.Sample.Sample.tones_grain_size', 'description': 'Access to the Grain Size parameter in Tones Warp Mode.', 'path': ['Live', 'Sample', 'Sample', 'tones_grain_size'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'Property'}, {'ref': 1167, 'tag': 'Property', 'name': 'Live.Sample.Sample.warp_markers', 'description': 'Get the warp markers for this sample.', 'path': ['Live', 'Sample', 'Sample', 'warp_markers'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'Property'}, {'ref': 1168, 'tag': 'Property', 'name': 'Live.Sample.Sample.warp_mode', 'description': "Access to the sample's warp mode.", 'path': ['Live', 'Sample', 'Sample', 'warp_mode'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'Property'}, {'ref': 1169, 'tag': 'Property', 'name': 'Live.Sample.Sample.warping', 'description': "Access to the sample's warping property.", 'path': ['Live', 'Sample', 'Sample', 'warping'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'Property'}, {'ref': 1170, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.add_beats_granulation_resolution_listener()', 'description': 'add_beats_granulation_resolution_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;beats_granulation_resolution&quot; has changed. C++ signature :  void add_beats_granulation_resolution_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'add_beats_granulation_resolution_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1171, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.add_beats_transient_envelope_listener()', 'description': 'add_beats_transient_envelope_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;beats_transient_envelope&quot; has changed. C++ signature :  void add_beats_transient_envelope_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'add_beats_transient_envelope_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1172, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.add_beats_transient_loop_mode_listener()', 'description': 'add_beats_transient_loop_mode_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;beats_transient_loop_mode&quot; has changed. C++ signature :  void add_beats_transient_loop_mode_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'add_beats_transient_loop_mode_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1173, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.add_complex_pro_envelope_listener()', 'description': 'add_complex_pro_envelope_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;complex_pro_envelope&quot; has changed. C++ signature :  void add_complex_pro_envelope_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'add_complex_pro_envelope_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1174, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.add_complex_pro_formants_listener()', 'description': 'add_complex_pro_formants_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;complex_pro_formants&quot; has changed. C++ signature :  void add_complex_pro_formants_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'add_complex_pro_formants_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1175, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.add_end_marker_listener()', 'description': 'add_end_marker_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;end_marker&quot; has changed. C++ signature :  void add_end_marker_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'add_end_marker_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1176, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.add_file_path_listener()', 'description': 'add_file_path_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;file_path&quot; has changed. C++ signature :  void add_file_path_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'add_file_path_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1177, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.add_gain_listener()', 'description': 'add_gain_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;gain&quot; has changed. C++ signature :  void add_gain_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'add_gain_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1178, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.add_slices_listener()', 'description': 'add_slices_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;slices&quot; has changed. C++ signature :  void add_slices_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'add_slices_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1179, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.add_slicing_beat_division_listener()', 'description': 'add_slicing_beat_division_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;slicing_beat_division&quot; has changed. C++ signature :  void add_slicing_beat_division_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'add_slicing_beat_division_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1180, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.add_slicing_region_count_listener()', 'description': 'add_slicing_region_count_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;slicing_region_count&quot; has changed. C++ signature :  void add_slicing_region_count_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'add_slicing_region_count_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1181, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.add_slicing_sensitivity_listener()', 'description': 'add_slicing_sensitivity_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;slicing_sensitivity&quot; has changed. C++ signature :  void add_slicing_sensitivity_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'add_slicing_sensitivity_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1182, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.add_slicing_style_listener()', 'description': 'add_slicing_style_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;slicing_style&quot; has changed. C++ signature :  void add_slicing_style_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'add_slicing_style_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1183, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.add_start_marker_listener()', 'description': 'add_start_marker_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;start_marker&quot; has changed. C++ signature :  void add_start_marker_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'add_start_marker_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1184, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.add_texture_flux_listener()', 'description': 'add_texture_flux_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;texture_flux&quot; has changed. C++ signature :  void add_texture_flux_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'add_texture_flux_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1185, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.add_texture_grain_size_listener()', 'description': 'add_texture_grain_size_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;texture_grain_size&quot; has changed. C++ signature :  void add_texture_grain_size_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'add_texture_grain_size_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1186, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.add_tones_grain_size_listener()', 'description': 'add_tones_grain_size_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;tones_grain_size&quot; has changed. C++ signature :  void add_tones_grain_size_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'add_tones_grain_size_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1187, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.add_warp_markers_listener()', 'description': 'add_warp_markers_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;warp_markers&quot; has changed. C++ signature :  void add_warp_markers_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'add_warp_markers_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1188, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.add_warp_mode_listener()', 'description': 'add_warp_mode_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;warp_mode&quot; has changed. C++ signature :  void add_warp_mode_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'add_warp_mode_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1189, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.add_warping_listener()', 'description': 'add_warping_listener( (Sample)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;warping&quot; has changed. C++ signature :  void add_warping_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'add_warping_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1190, 'tag': 'Method', 'name': 'Live.Sample.Sample.beat_to_sample_time()', 'description': 'beat_to_sample_time( (Sample)self, (float)beat_time) -> float : Converts the given beat time to sample time. Raises an error if the sample is not warped. C++ signature :  double beat_to_sample_time(TPyHandle<AMultiSamplePart>,double)', 'path': ['Live', 'Sample', 'Sample', 'beat_to_sample_time()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'Method'}, {'ref': 1191, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.beats_granulation_resolution_has_listener()', 'description': 'beats_granulation_resolution_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;beats_granulation_resolution&quot;. C++ signature :  bool beats_granulation_resolution_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'beats_granulation_resolution_has_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1192, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.beats_transient_envelope_has_listener()', 'description': 'beats_transient_envelope_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;beats_transient_envelope&quot;. C++ signature :  bool beats_transient_envelope_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'beats_transient_envelope_has_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1193, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.beats_transient_loop_mode_has_listener()', 'description': 'beats_transient_loop_mode_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;beats_transient_loop_mode&quot;. C++ signature :  bool beats_transient_loop_mode_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'beats_transient_loop_mode_has_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1194, 'tag': 'Method', 'name': 'Live.Sample.Sample.clear_slices()', 'description': "clear_slices( (Sample)self) -> None : Clears all slices created in Simpler's manual mode. C++ signature :  void clear_slices(TPyHandle<AMultiSamplePart>)", 'path': ['Live', 'Sample', 'Sample', 'clear_slices()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'Method'}, {'ref': 1195, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.complex_pro_envelope_has_listener()', 'description': 'complex_pro_envelope_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;complex_pro_envelope&quot;. C++ signature :  bool complex_pro_envelope_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'complex_pro_envelope_has_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1196, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.complex_pro_formants_has_listener()', 'description': 'complex_pro_formants_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;complex_pro_formants&quot;. C++ signature :  bool complex_pro_formants_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'complex_pro_formants_has_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1197, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.end_marker_has_listener()', 'description': 'end_marker_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;end_marker&quot;. C++ signature :  bool end_marker_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'end_marker_has_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1198, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.file_path_has_listener()', 'description': 'file_path_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;file_path&quot;. C++ signature :  bool file_path_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'file_path_has_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1199, 'tag': 'Method', 'name': 'Live.Sample.Sample.gain_display_string()', 'description': "gain_display_string( (Sample)self) -> unicode : Get the gain's display value as a string. C++ signature :  TString gain_display_string(TPyHandle<AMultiSamplePart>)", 'path': ['Live', 'Sample', 'Sample', 'gain_display_string()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'Method'}, {'ref': 1200, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.gain_has_listener()', 'description': 'gain_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;gain&quot;. C++ signature :  bool gain_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'gain_has_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1201, 'tag': 'Method', 'name': 'Live.Sample.Sample.insert_slice()', 'description': 'insert_slice( (Sample)self, (int)slice_time) -> None : Add a slice point at the provided time if there is none. C++ signature :  void insert_slice(TPyHandle<AMultiSamplePart>,int)', 'path': ['Live', 'Sample', 'Sample', 'insert_slice()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'Method'}, {'ref': 1202, 'tag': 'Method', 'name': 'Live.Sample.Sample.move_slice()', 'description': 'move_slice( (Sample)self, (int)old_time, (int)new_time) -> int : Move the slice point at the provided time. C++ signature :  int move_slice(TPyHandle<AMultiSamplePart>,int,int)', 'path': ['Live', 'Sample', 'Sample', 'move_slice()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'Method'}, {'ref': 1203, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.remove_beats_granulation_resolution_listener()', 'description': 'remove_beats_granulation_resolution_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;beats_granulation_resolution&quot;. C++ signature :  void remove_beats_granulation_resolution_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'remove_beats_granulation_resolution_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1204, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.remove_beats_transient_envelope_listener()', 'description': 'remove_beats_transient_envelope_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;beats_transient_envelope&quot;. C++ signature :  void remove_beats_transient_envelope_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'remove_beats_transient_envelope_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1205, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.remove_beats_transient_loop_mode_listener()', 'description': 'remove_beats_transient_loop_mode_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;beats_transient_loop_mode&quot;. C++ signature :  void remove_beats_transient_loop_mode_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'remove_beats_transient_loop_mode_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1206, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.remove_complex_pro_envelope_listener()', 'description': 'remove_complex_pro_envelope_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;complex_pro_envelope&quot;. C++ signature :  void remove_complex_pro_envelope_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'remove_complex_pro_envelope_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1207, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.remove_complex_pro_formants_listener()', 'description': 'remove_complex_pro_formants_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;complex_pro_formants&quot;. C++ signature :  void remove_complex_pro_formants_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'remove_complex_pro_formants_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1208, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.remove_end_marker_listener()', 'description': 'remove_end_marker_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;end_marker&quot;. C++ signature :  void remove_end_marker_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'remove_end_marker_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1209, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.remove_file_path_listener()', 'description': 'remove_file_path_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;file_path&quot;. C++ signature :  void remove_file_path_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'remove_file_path_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1210, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.remove_gain_listener()', 'description': 'remove_gain_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;gain&quot;. C++ signature :  void remove_gain_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'remove_gain_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1211, 'tag': 'Method', 'name': 'Live.Sample.Sample.remove_slice()', 'description': 'remove_slice( (Sample)self, (int)slice_time) -> None : Remove the slice point at the provided time if there is one. C++ signature :  void remove_slice(TPyHandle<AMultiSamplePart>,int)', 'path': ['Live', 'Sample', 'Sample', 'remove_slice()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'Method'}, {'ref': 1212, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.remove_slices_listener()', 'description': 'remove_slices_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;slices&quot;. C++ signature :  void remove_slices_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'remove_slices_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1213, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.remove_slicing_beat_division_listener()', 'description': 'remove_slicing_beat_division_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;slicing_beat_division&quot;. C++ signature :  void remove_slicing_beat_division_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'remove_slicing_beat_division_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1214, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.remove_slicing_region_count_listener()', 'description': 'remove_slicing_region_count_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;slicing_region_count&quot;. C++ signature :  void remove_slicing_region_count_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'remove_slicing_region_count_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1215, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.remove_slicing_sensitivity_listener()', 'description': 'remove_slicing_sensitivity_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;slicing_sensitivity&quot;. C++ signature :  void remove_slicing_sensitivity_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'remove_slicing_sensitivity_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1216, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.remove_slicing_style_listener()', 'description': 'remove_slicing_style_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;slicing_style&quot;. C++ signature :  void remove_slicing_style_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'remove_slicing_style_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1217, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.remove_start_marker_listener()', 'description': 'remove_start_marker_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;start_marker&quot;. C++ signature :  void remove_start_marker_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'remove_start_marker_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1218, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.remove_texture_flux_listener()', 'description': 'remove_texture_flux_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;texture_flux&quot;. C++ signature :  void remove_texture_flux_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'remove_texture_flux_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1219, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.remove_texture_grain_size_listener()', 'description': 'remove_texture_grain_size_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;texture_grain_size&quot;. C++ signature :  void remove_texture_grain_size_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'remove_texture_grain_size_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1220, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.remove_tones_grain_size_listener()', 'description': 'remove_tones_grain_size_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;tones_grain_size&quot;. C++ signature :  void remove_tones_grain_size_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'remove_tones_grain_size_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1221, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.remove_warp_markers_listener()', 'description': 'remove_warp_markers_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;warp_markers&quot;. C++ signature :  void remove_warp_markers_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'remove_warp_markers_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1222, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.remove_warp_mode_listener()', 'description': 'remove_warp_mode_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;warp_mode&quot;. C++ signature :  void remove_warp_mode_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'remove_warp_mode_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1223, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.remove_warping_listener()', 'description': 'remove_warping_listener( (Sample)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;warping&quot;. C++ signature :  void remove_warping_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'remove_warping_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1224, 'tag': 'Method', 'name': 'Live.Sample.Sample.reset_slices()', 'description': 'reset_slices( (Sample)self) -> None : Resets all edited slices to their original positions. C++ signature :  void reset_slices(TPyHandle<AMultiSamplePart>)', 'path': ['Live', 'Sample', 'Sample', 'reset_slices()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'Method'}, {'ref': 1225, 'tag': 'Method', 'name': 'Live.Sample.Sample.sample_to_beat_time()', 'description': 'sample_to_beat_time( (Sample)self, (float)sample_time) -> float : Converts the given sample time to beat time. Raises an error if the sample is not warped. C++ signature :  double sample_to_beat_time(TPyHandle<AMultiSamplePart>,double)', 'path': ['Live', 'Sample', 'Sample', 'sample_to_beat_time()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'Method'}, {'ref': 1226, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.slices_has_listener()', 'description': 'slices_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;slices&quot;. C++ signature :  bool slices_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'slices_has_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1227, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.slicing_beat_division_has_listener()', 'description': 'slicing_beat_division_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;slicing_beat_division&quot;. C++ signature :  bool slicing_beat_division_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'slicing_beat_division_has_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1228, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.slicing_region_count_has_listener()', 'description': 'slicing_region_count_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;slicing_region_count&quot;. C++ signature :  bool slicing_region_count_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'slicing_region_count_has_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1229, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.slicing_sensitivity_has_listener()', 'description': 'slicing_sensitivity_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;slicing_sensitivity&quot;. C++ signature :  bool slicing_sensitivity_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'slicing_sensitivity_has_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1230, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.slicing_style_has_listener()', 'description': 'slicing_style_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;slicing_style&quot;. C++ signature :  bool slicing_style_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'slicing_style_has_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1231, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.start_marker_has_listener()', 'description': 'start_marker_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;start_marker&quot;. C++ signature :  bool start_marker_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'start_marker_has_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1232, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.texture_flux_has_listener()', 'description': 'texture_flux_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;texture_flux&quot;. C++ signature :  bool texture_flux_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'texture_flux_has_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1233, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.texture_grain_size_has_listener()', 'description': 'texture_grain_size_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;texture_grain_size&quot;. C++ signature :  bool texture_grain_size_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'texture_grain_size_has_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1234, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.tones_grain_size_has_listener()', 'description': 'tones_grain_size_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;tones_grain_size&quot;. C++ signature :  bool tones_grain_size_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'tones_grain_size_has_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1235, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.warp_markers_has_listener()', 'description': 'warp_markers_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;warp_markers&quot;. C++ signature :  bool warp_markers_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'warp_markers_has_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1236, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.warp_mode_has_listener()', 'description': 'warp_mode_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;warp_mode&quot;. C++ signature :  bool warp_mode_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'warp_mode_has_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1237, 'tag': 'listener Method', 'name': 'Live.Sample.Sample.warping_has_listener()', 'description': 'warping_has_listener( (Sample)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;warping&quot;. C++ signature :  bool warping_has_listener(TPyHandle<AMultiSamplePart>,boost::python::api::object)', 'path': ['Live', 'Sample', 'Sample', 'warping_has_listener()'], 'hirachy': 3, 'ref_parent': 1145, 'children': [], 'group': 'listener Method'}, {'ref': 1238, 'tag': 'Class', 'name': 'Live.Sample.SlicingBeatDivision', 'description': None, 'path': ['Live', 'Sample', 'SlicingBeatDivision'], 'hirachy': 2, 'ref_parent': 1144, 'children': [1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249], 'group': None}, {'ref': 1239, 'tag': 'Value', 'name': 'Live.Sample.SlicingBeatDivision.eighth', 'description': None, 'path': ['Live', 'Sample', 'SlicingBeatDivision', 'eighth'], 'hirachy': 3, 'ref_parent': 1238, 'children': [], 'group': 'Value'}, {'ref': 1240, 'tag': 'Value', 'name': 'Live.Sample.SlicingBeatDivision.eighth_triplett', 'description': None, 'path': ['Live', 'Sample', 'SlicingBeatDivision', 'eighth_triplett'], 'hirachy': 3, 'ref_parent': 1238, 'children': [], 'group': 'Value'}, {'ref': 1241, 'tag': 'Value', 'name': 'Live.Sample.SlicingBeatDivision.four_bars', 'description': None, 'path': ['Live', 'Sample', 'SlicingBeatDivision', 'four_bars'], 'hirachy': 3, 'ref_parent': 1238, 'children': [], 'group': 'Value'}, {'ref': 1242, 'tag': 'Value', 'name': 'Live.Sample.SlicingBeatDivision.half', 'description': None, 'path': ['Live', 'Sample', 'SlicingBeatDivision', 'half'], 'hirachy': 3, 'ref_parent': 1238, 'children': [], 'group': 'Value'}, {'ref': 1243, 'tag': 'Value', 'name': 'Live.Sample.SlicingBeatDivision.half_triplett', 'description': None, 'path': ['Live', 'Sample', 'SlicingBeatDivision', 'half_triplett'], 'hirachy': 3, 'ref_parent': 1238, 'children': [], 'group': 'Value'}, {'ref': 1244, 'tag': 'Value', 'name': 'Live.Sample.SlicingBeatDivision.one_bar', 'description': None, 'path': ['Live', 'Sample', 'SlicingBeatDivision', 'one_bar'], 'hirachy': 3, 'ref_parent': 1238, 'children': [], 'group': 'Value'}, {'ref': 1245, 'tag': 'Value', 'name': 'Live.Sample.SlicingBeatDivision.quarter', 'description': None, 'path': ['Live', 'Sample', 'SlicingBeatDivision', 'quarter'], 'hirachy': 3, 'ref_parent': 1238, 'children': [], 'group': 'Value'}, {'ref': 1246, 'tag': 'Value', 'name': 'Live.Sample.SlicingBeatDivision.quarter_triplett', 'description': None, 'path': ['Live', 'Sample', 'SlicingBeatDivision', 'quarter_triplett'], 'hirachy': 3, 'ref_parent': 1238, 'children': [], 'group': 'Value'}, {'ref': 1247, 'tag': 'Value', 'name': 'Live.Sample.SlicingBeatDivision.sixteenth', 'description': None, 'path': ['Live', 'Sample', 'SlicingBeatDivision', 'sixteenth'], 'hirachy': 3, 'ref_parent': 1238, 'children': [], 'group': 'Value'}, {'ref': 1248, 'tag': 'Value', 'name': 'Live.Sample.SlicingBeatDivision.sixteenth_triplett', 'description': None, 'path': ['Live', 'Sample', 'SlicingBeatDivision', 'sixteenth_triplett'], 'hirachy': 3, 'ref_parent': 1238, 'children': [], 'group': 'Value'}, {'ref': 1249, 'tag': 'Value', 'name': 'Live.Sample.SlicingBeatDivision.two_bars', 'description': None, 'path': ['Live', 'Sample', 'SlicingBeatDivision', 'two_bars'], 'hirachy': 3, 'ref_parent': 1238, 'children': [], 'group': 'Value'}, {'ref': 1250, 'tag': 'Class', 'name': 'Live.Sample.SlicingStyle', 'description': None, 'path': ['Live', 'Sample', 'SlicingStyle'], 'hirachy': 2, 'ref_parent': 1144, 'children': [1251, 1252, 1253, 1254], 'group': None}, {'ref': 1251, 'tag': 'Value', 'name': 'Live.Sample.SlicingStyle.beat', 'description': None, 'path': ['Live', 'Sample', 'SlicingStyle', 'beat'], 'hirachy': 3, 'ref_parent': 1250, 'children': [], 'group': 'Value'}, {'ref': 1252, 'tag': 'Value', 'name': 'Live.Sample.SlicingStyle.manual', 'description': None, 'path': ['Live', 'Sample', 'SlicingStyle', 'manual'], 'hirachy': 3, 'ref_parent': 1250, 'children': [], 'group': 'Value'}, {'ref': 1253, 'tag': 'Value', 'name': 'Live.Sample.SlicingStyle.region', 'description': None, 'path': ['Live', 'Sample', 'SlicingStyle', 'region'], 'hirachy': 3, 'ref_parent': 1250, 'children': [], 'group': 'Value'}, {'ref': 1254, 'tag': 'Value', 'name': 'Live.Sample.SlicingStyle.transient', 'description': None, 'path': ['Live', 'Sample', 'SlicingStyle', 'transient'], 'hirachy': 3, 'ref_parent': 1250, 'children': [], 'group': 'Value'}, {'ref': 1255, 'tag': 'Class', 'name': 'Live.Sample.TransientLoopMode', 'description': None, 'path': ['Live', 'Sample', 'TransientLoopMode'], 'hirachy': 2, 'ref_parent': 1144, 'children': [1256, 1257, 1258], 'group': None}, {'ref': 1256, 'tag': 'Value', 'name': 'Live.Sample.TransientLoopMode.alternate', 'description': None, 'path': ['Live', 'Sample', 'TransientLoopMode', 'alternate'], 'hirachy': 3, 'ref_parent': 1255, 'children': [], 'group': 'Value'}, {'ref': 1257, 'tag': 'Value', 'name': 'Live.Sample.TransientLoopMode.forward', 'description': None, 'path': ['Live', 'Sample', 'TransientLoopMode', 'forward'], 'hirachy': 3, 'ref_parent': 1255, 'children': [], 'group': 'Value'}, {'ref': 1258, 'tag': 'Value', 'name': 'Live.Sample.TransientLoopMode.off', 'description': None, 'path': ['Live', 'Sample', 'TransientLoopMode', 'off'], 'hirachy': 3, 'ref_parent': 1255, 'children': [], 'group': 'Value'}, {'ref': 1259, 'tag': 'Module', 'name': 'Live.Scene', 'description': None, 'path': ['Live', 'Scene'], 'hirachy': 1, 'ref_parent': 0, 'children': [1260], 'group': None}, {'ref': 1260, 'tag': 'Class', 'name': 'Live.Scene.Scene', 'description': 'This class represents an series of ClipSlots in Lives Sessionview matrix.', 'path': ['Live', 'Scene', 'Scene'], 'hirachy': 2, 'ref_parent': 1259, 'children': [1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287], 'group': None}, {'ref': 1261, 'tag': 'Property', 'name': 'Live.Scene.Scene._live_ptr', 'description': None, 'path': ['Live', 'Scene', 'Scene', '_live_ptr'], 'hirachy': 3, 'ref_parent': 1260, 'children': [], 'group': 'Property'}, {'ref': 1262, 'tag': 'Property', 'name': 'Live.Scene.Scene.canonical_parent', 'description': 'Get the canonical parent of the scene.', 'path': ['Live', 'Scene', 'Scene', 'canonical_parent'], 'hirachy': 3, 'ref_parent': 1260, 'children': [], 'group': 'Property'}, {'ref': 1263, 'tag': 'Property', 'name': 'Live.Scene.Scene.clip_slots', 'description': 'return a list of clipslots (see class AClipSlot) that this scene covers.', 'path': ['Live', 'Scene', 'Scene', 'clip_slots'], 'hirachy': 3, 'ref_parent': 1260, 'children': [], 'group': 'Property'}, {'ref': 1264, 'tag': 'Property', 'name': 'Live.Scene.Scene.color', 'description': 'Get/set access to the color of the Scene (RGB).', 'path': ['Live', 'Scene', 'Scene', 'color'], 'hirachy': 3, 'ref_parent': 1260, 'children': [], 'group': 'Property'}, {'ref': 1265, 'tag': 'Property', 'name': 'Live.Scene.Scene.color_index', 'description': 'Get/set access to the color index of the Scene. Can be None for no color.', 'path': ['Live', 'Scene', 'Scene', 'color_index'], 'hirachy': 3, 'ref_parent': 1260, 'children': [], 'group': 'Property'}, {'ref': 1266, 'tag': 'Property', 'name': 'Live.Scene.Scene.is_empty', 'description': 'Returns True if all clip slots of this scene are empty.', 'path': ['Live', 'Scene', 'Scene', 'is_empty'], 'hirachy': 3, 'ref_parent': 1260, 'children': [], 'group': 'Property'}, {'ref': 1267, 'tag': 'Property', 'name': 'Live.Scene.Scene.is_triggered', 'description': "Const access to the scene's trigger state.", 'path': ['Live', 'Scene', 'Scene', 'is_triggered'], 'hirachy': 3, 'ref_parent': 1260, 'children': [], 'group': 'Property'}, {'ref': 1268, 'tag': 'Property', 'name': 'Live.Scene.Scene.name', 'description': "Get/Set the name of the scene. Might contain the substring BPM, whichidentifies that the scene will change the tempo when fired. To Get/Setthe temp, use the 'tempo' property of the scene.", 'path': ['Live', 'Scene', 'Scene', 'name'], 'hirachy': 3, 'ref_parent': 1260, 'children': [], 'group': 'Property'}, {'ref': 1269, 'tag': 'Property', 'name': 'Live.Scene.Scene.tempo', 'description': 'Get/Set the tempo value of the scene.The Song will use the Scenes tempo as soon as the Scene is fired.Returns -1 if the Scene has no tempo property.', 'path': ['Live', 'Scene', 'Scene', 'tempo'], 'hirachy': 3, 'ref_parent': 1260, 'children': [], 'group': 'Property'}, {'ref': 1270, 'tag': 'listener Method', 'name': 'Live.Scene.Scene.add_clip_slots_listener()', 'description': 'add_clip_slots_listener( (Scene)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;clip_slots&quot; has changed. C++ signature :  void add_clip_slots_listener(TPyHandle<AScene>,boost::python::api::object)', 'path': ['Live', 'Scene', 'Scene', 'add_clip_slots_listener()'], 'hirachy': 3, 'ref_parent': 1260, 'children': [], 'group': 'listener Method'}, {'ref': 1271, 'tag': 'listener Method', 'name': 'Live.Scene.Scene.add_color_index_listener()', 'description': 'add_color_index_listener( (Scene)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;color_index&quot; has changed. C++ signature :  void add_color_index_listener(TPyHandle<AScene>,boost::python::api::object)', 'path': ['Live', 'Scene', 'Scene', 'add_color_index_listener()'], 'hirachy': 3, 'ref_parent': 1260, 'children': [], 'group': 'listener Method'}, {'ref': 1272, 'tag': 'listener Method', 'name': 'Live.Scene.Scene.add_color_listener()', 'description': 'add_color_listener( (Scene)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;color&quot; has changed. C++ signature :  void add_color_listener(TPyHandle<AScene>,boost::python::api::object)', 'path': ['Live', 'Scene', 'Scene', 'add_color_listener()'], 'hirachy': 3, 'ref_parent': 1260, 'children': [], 'group': 'listener Method'}, {'ref': 1273, 'tag': 'listener Method', 'name': 'Live.Scene.Scene.add_is_triggered_listener()', 'description': 'add_is_triggered_listener( (Scene)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_triggered&quot; has changed. C++ signature :  void add_is_triggered_listener(TPyHandle<AScene>,boost::python::api::object)', 'path': ['Live', 'Scene', 'Scene', 'add_is_triggered_listener()'], 'hirachy': 3, 'ref_parent': 1260, 'children': [], 'group': 'listener Method'}, {'ref': 1274, 'tag': 'listener Method', 'name': 'Live.Scene.Scene.add_name_listener()', 'description': 'add_name_listener( (Scene)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TPyHandle<AScene>,boost::python::api::object)', 'path': ['Live', 'Scene', 'Scene', 'add_name_listener()'], 'hirachy': 3, 'ref_parent': 1260, 'children': [], 'group': 'listener Method'}, {'ref': 1275, 'tag': 'listener Method', 'name': 'Live.Scene.Scene.clip_slots_has_listener()', 'description': 'clip_slots_has_listener( (Scene)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;clip_slots&quot;. C++ signature :  bool clip_slots_has_listener(TPyHandle<AScene>,boost::python::api::object)', 'path': ['Live', 'Scene', 'Scene', 'clip_slots_has_listener()'], 'hirachy': 3, 'ref_parent': 1260, 'children': [], 'group': 'listener Method'}, {'ref': 1276, 'tag': 'listener Method', 'name': 'Live.Scene.Scene.color_has_listener()', 'description': 'color_has_listener( (Scene)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;color&quot;. C++ signature :  bool color_has_listener(TPyHandle<AScene>,boost::python::api::object)', 'path': ['Live', 'Scene', 'Scene', 'color_has_listener()'], 'hirachy': 3, 'ref_parent': 1260, 'children': [], 'group': 'listener Method'}, {'ref': 1277, 'tag': 'listener Method', 'name': 'Live.Scene.Scene.color_index_has_listener()', 'description': 'color_index_has_listener( (Scene)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;color_index&quot;. C++ signature :  bool color_index_has_listener(TPyHandle<AScene>,boost::python::api::object)', 'path': ['Live', 'Scene', 'Scene', 'color_index_has_listener()'], 'hirachy': 3, 'ref_parent': 1260, 'children': [], 'group': 'listener Method'}, {'ref': 1278, 'tag': 'Method', 'name': 'Live.Scene.Scene.fire()', 'description': 'fire( (Scene)arg1 [, (bool)force_legato=False [, (bool)can_select_scene_on_launch=True]]) -> None : Fire the scene directly. Will fire all clipslots that this scene owns and select the scene itself. C++ signature :  void fire(TPyHandle<AScene> [,bool=False [,bool=True]])', 'path': ['Live', 'Scene', 'Scene', 'fire()'], 'hirachy': 3, 'ref_parent': 1260, 'children': [], 'group': 'Method'}, {'ref': 1279, 'tag': 'Method', 'name': 'Live.Scene.Scene.fire_as_selected()', 'description': 'fire_as_selected( (Scene)arg1 [, (bool)force_legato=False]) -> None : Fire the selected scene. Will fire all clipslots that this scene owns and select the next scene if necessary. C++ signature :  void fire_as_selected(TPyHandle<AScene> [,bool=False])', 'path': ['Live', 'Scene', 'Scene', 'fire_as_selected()'], 'hirachy': 3, 'ref_parent': 1260, 'children': [], 'group': 'Method'}, {'ref': 1280, 'tag': 'listener Method', 'name': 'Live.Scene.Scene.is_triggered_has_listener()', 'description': 'is_triggered_has_listener( (Scene)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_triggered&quot;. C++ signature :  bool is_triggered_has_listener(TPyHandle<AScene>,boost::python::api::object)', 'path': ['Live', 'Scene', 'Scene', 'is_triggered_has_listener()'], 'hirachy': 3, 'ref_parent': 1260, 'children': [], 'group': 'listener Method'}, {'ref': 1281, 'tag': 'listener Method', 'name': 'Live.Scene.Scene.name_has_listener()', 'description': 'name_has_listener( (Scene)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TPyHandle<AScene>,boost::python::api::object)', 'path': ['Live', 'Scene', 'Scene', 'name_has_listener()'], 'hirachy': 3, 'ref_parent': 1260, 'children': [], 'group': 'listener Method'}, {'ref': 1282, 'tag': 'listener Method', 'name': 'Live.Scene.Scene.remove_clip_slots_listener()', 'description': 'remove_clip_slots_listener( (Scene)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;clip_slots&quot;. C++ signature :  void remove_clip_slots_listener(TPyHandle<AScene>,boost::python::api::object)', 'path': ['Live', 'Scene', 'Scene', 'remove_clip_slots_listener()'], 'hirachy': 3, 'ref_parent': 1260, 'children': [], 'group': 'listener Method'}, {'ref': 1283, 'tag': 'listener Method', 'name': 'Live.Scene.Scene.remove_color_index_listener()', 'description': 'remove_color_index_listener( (Scene)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;color_index&quot;. C++ signature :  void remove_color_index_listener(TPyHandle<AScene>,boost::python::api::object)', 'path': ['Live', 'Scene', 'Scene', 'remove_color_index_listener()'], 'hirachy': 3, 'ref_parent': 1260, 'children': [], 'group': 'listener Method'}, {'ref': 1284, 'tag': 'listener Method', 'name': 'Live.Scene.Scene.remove_color_listener()', 'description': 'remove_color_listener( (Scene)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;color&quot;. C++ signature :  void remove_color_listener(TPyHandle<AScene>,boost::python::api::object)', 'path': ['Live', 'Scene', 'Scene', 'remove_color_listener()'], 'hirachy': 3, 'ref_parent': 1260, 'children': [], 'group': 'listener Method'}, {'ref': 1285, 'tag': 'listener Method', 'name': 'Live.Scene.Scene.remove_is_triggered_listener()', 'description': 'remove_is_triggered_listener( (Scene)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_triggered&quot;. C++ signature :  void remove_is_triggered_listener(TPyHandle<AScene>,boost::python::api::object)', 'path': ['Live', 'Scene', 'Scene', 'remove_is_triggered_listener()'], 'hirachy': 3, 'ref_parent': 1260, 'children': [], 'group': 'listener Method'}, {'ref': 1286, 'tag': 'listener Method', 'name': 'Live.Scene.Scene.remove_name_listener()', 'description': 'remove_name_listener( (Scene)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TPyHandle<AScene>,boost::python::api::object)', 'path': ['Live', 'Scene', 'Scene', 'remove_name_listener()'], 'hirachy': 3, 'ref_parent': 1260, 'children': [], 'group': 'listener Method'}, {'ref': 1287, 'tag': 'Method', 'name': 'Live.Scene.Scene.set_fire_button_state()', 'description': "set_fire_button_state( (Scene)arg1, (bool)arg2) -> None : Set the scene's fire button state directly. Supports all launch modes. C++ signature :  void set_fire_button_state(TPyHandle<AScene>,bool)", 'path': ['Live', 'Scene', 'Scene', 'set_fire_button_state()'], 'hirachy': 3, 'ref_parent': 1260, 'children': [], 'group': 'Method'}, {'ref': 1288, 'tag': 'Module', 'name': 'Live.SimplerDevice', 'description': None, 'path': ['Live', 'SimplerDevice'], 'hirachy': 1, 'ref_parent': 0, 'children': [1289, 1290, 1294, 1409], 'group': None}, {'ref': 1289, 'tag': 'Built-In', 'name': 'Live.SimplerDevice.get_available_voice_numbers()', 'description': 'get_available_voice_numbers() -> IntVector : Get a vector of valid Simpler voice numbers. C++ signature :  std::__1::vector<int, std::__1::allocator<int> > get_available_voice_numbers()', 'path': ['Live', 'SimplerDevice', 'get_available_voice_numbers()'], 'hirachy': 2, 'ref_parent': 1288, 'children': [], 'group': None}, {'ref': 1290, 'tag': 'Class', 'name': 'Live.SimplerDevice.PlaybackMode', 'description': None, 'path': ['Live', 'SimplerDevice', 'PlaybackMode'], 'hirachy': 2, 'ref_parent': 1288, 'children': [1291, 1292, 1293], 'group': None}, {'ref': 1291, 'tag': 'Value', 'name': 'Live.SimplerDevice.PlaybackMode.classic', 'description': None, 'path': ['Live', 'SimplerDevice', 'PlaybackMode', 'classic'], 'hirachy': 3, 'ref_parent': 1290, 'children': [], 'group': 'Value'}, {'ref': 1292, 'tag': 'Value', 'name': 'Live.SimplerDevice.PlaybackMode.one_shot', 'description': None, 'path': ['Live', 'SimplerDevice', 'PlaybackMode', 'one_shot'], 'hirachy': 3, 'ref_parent': 1290, 'children': [], 'group': 'Value'}, {'ref': 1293, 'tag': 'Value', 'name': 'Live.SimplerDevice.PlaybackMode.slicing', 'description': None, 'path': ['Live', 'SimplerDevice', 'PlaybackMode', 'slicing'], 'hirachy': 3, 'ref_parent': 1290, 'children': [], 'group': 'Value'}, {'ref': 1294, 'tag': 'Class', 'name': 'Live.SimplerDevice.SimplerDevice', 'description': 'This class represents a Simpler device.', 'path': ['Live', 'SimplerDevice', 'SimplerDevice'], 'hirachy': 2, 'ref_parent': 1288, 'children': [1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370], 'group': None}, {'ref': 1295, 'tag': 'Property', 'name': 'Live.SimplerDevice.SimplerDevice._live_ptr', 'description': None, 'path': ['Live', 'SimplerDevice', 'SimplerDevice', '_live_ptr'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'Property'}, {'ref': 1296, 'tag': 'Property', 'name': 'Live.SimplerDevice.SimplerDevice.can_have_chains', 'description': 'Returns true if the device is a rack.', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'can_have_chains'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'Property'}, {'ref': 1297, 'tag': 'Property', 'name': 'Live.SimplerDevice.SimplerDevice.can_have_drum_pads', 'description': 'Returns true if the device is a drum rack.', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'can_have_drum_pads'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'Property'}, {'ref': 1298, 'tag': 'Property', 'name': 'Live.SimplerDevice.SimplerDevice.can_warp_as', 'description': 'Returns true if warp_as is available.', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'can_warp_as'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'Property'}, {'ref': 1299, 'tag': 'Property', 'name': 'Live.SimplerDevice.SimplerDevice.can_warp_double', 'description': 'Returns true if warp_double is available.', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'can_warp_double'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'Property'}, {'ref': 1300, 'tag': 'Property', 'name': 'Live.SimplerDevice.SimplerDevice.can_warp_half', 'description': 'Returns true if warp_half is available.', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'can_warp_half'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'Property'}, {'ref': 1301, 'tag': 'Property', 'name': 'Live.SimplerDevice.SimplerDevice.canonical_parent', 'description': 'Get the canonical parent of the Device.', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'canonical_parent'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'Property'}, {'ref': 1302, 'tag': 'Property', 'name': 'Live.SimplerDevice.SimplerDevice.class_display_name', 'description': "Return const access to the name of the device's class name as displayed in Live's browser and device chain", 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'class_display_name'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'Property'}, {'ref': 1303, 'tag': 'Property', 'name': 'Live.SimplerDevice.SimplerDevice.class_name', 'description': "Return const access to the name of the device's class.", 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'class_name'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'Property'}, {'ref': 1304, 'tag': 'Property', 'name': 'Live.SimplerDevice.SimplerDevice.is_active', 'description': "Return const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off.", 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'is_active'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'Property'}, {'ref': 1305, 'tag': 'Property', 'name': 'Live.SimplerDevice.SimplerDevice.multi_sample_mode', 'description': 'Returns whether Simpler is in mulit-sample mode.', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'multi_sample_mode'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'Property'}, {'ref': 1306, 'tag': 'Property', 'name': 'Live.SimplerDevice.SimplerDevice.name', 'description': 'Return access to the name of the device.', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'name'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'Property'}, {'ref': 1307, 'tag': 'Property', 'name': 'Live.SimplerDevice.SimplerDevice.pad_slicing', 'description': 'When set to true, slices can be added in slicing mode by playing notes .that are not assigned to slices, yet.', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'pad_slicing'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'Property'}, {'ref': 1308, 'tag': 'Property', 'name': 'Live.SimplerDevice.SimplerDevice.parameters', 'description': 'Const access to the list of available automatable parameters for this device.', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'parameters'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'Property'}, {'ref': 1309, 'tag': 'Property', 'name': 'Live.SimplerDevice.SimplerDevice.playback_mode', 'description': "Access to Simpler's playback mode.", 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'playback_mode'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'Property'}, {'ref': 1310, 'tag': 'Property', 'name': 'Live.SimplerDevice.SimplerDevice.playing_position', 'description': 'Constant access to the current playing position in the sample.The returned value is the normalized position between sample start and end.', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'playing_position'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'Property'}, {'ref': 1311, 'tag': 'Property', 'name': 'Live.SimplerDevice.SimplerDevice.playing_position_enabled', 'description': 'Returns whether Simpler is showing the playing position.The returned value is True while the sample is played back', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'playing_position_enabled'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'Property'}, {'ref': 1312, 'tag': 'Property', 'name': 'Live.SimplerDevice.SimplerDevice.retrigger', 'description': "Access to Simpler's retrigger mode.", 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'retrigger'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'Property'}, {'ref': 1313, 'tag': 'Property', 'name': 'Live.SimplerDevice.SimplerDevice.sample', 'description': 'Get the loaded Sample.', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'sample'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'Property'}, {'ref': 1314, 'tag': 'Property', 'name': 'Live.SimplerDevice.SimplerDevice.slicing_playback_mode', 'description': "Access to Simpler's slicing playback mode.", 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'slicing_playback_mode'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'Property'}, {'ref': 1315, 'tag': 'Property', 'name': 'Live.SimplerDevice.SimplerDevice.type', 'description': 'Return the type of the device.', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'type'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'Property'}, {'ref': 1316, 'tag': 'Property', 'name': 'Live.SimplerDevice.SimplerDevice.view', 'description': 'Representing the view aspects of a device.', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'view'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'Property'}, {'ref': 1317, 'tag': 'Property', 'name': 'Live.SimplerDevice.SimplerDevice.voices', 'description': 'Access to the number of voices in Simpler.', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'voices'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'Property'}, {'ref': 1318, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.add_can_warp_as_listener()', 'description': 'add_can_warp_as_listener( (SimplerDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;can_warp_as&quot; has changed. C++ signature :  void add_can_warp_as_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'add_can_warp_as_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1319, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.add_can_warp_double_listener()', 'description': 'add_can_warp_double_listener( (SimplerDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;can_warp_double&quot; has changed. C++ signature :  void add_can_warp_double_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'add_can_warp_double_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1320, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.add_can_warp_half_listener()', 'description': 'add_can_warp_half_listener( (SimplerDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;can_warp_half&quot; has changed. C++ signature :  void add_can_warp_half_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'add_can_warp_half_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1321, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.add_is_active_listener()', 'description': 'add_is_active_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_active&quot; has changed. C++ signature :  void add_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'add_is_active_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1322, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.add_multi_sample_mode_listener()', 'description': 'add_multi_sample_mode_listener( (SimplerDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;multi_sample_mode&quot; has changed. C++ signature :  void add_multi_sample_mode_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'add_multi_sample_mode_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1323, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.add_name_listener()', 'description': 'add_name_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'add_name_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1324, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.add_pad_slicing_listener()', 'description': 'add_pad_slicing_listener( (SimplerDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;pad_slicing&quot; has changed. C++ signature :  void add_pad_slicing_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'add_pad_slicing_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1325, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.add_parameters_listener()', 'description': 'add_parameters_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;parameters&quot; has changed. C++ signature :  void add_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'add_parameters_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1326, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.add_playback_mode_listener()', 'description': 'add_playback_mode_listener( (SimplerDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;playback_mode&quot; has changed. C++ signature :  void add_playback_mode_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'add_playback_mode_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1327, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.add_playing_position_enabled_listener()', 'description': 'add_playing_position_enabled_listener( (SimplerDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;playing_position_enabled&quot; has changed. C++ signature :  void add_playing_position_enabled_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'add_playing_position_enabled_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1328, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.add_playing_position_listener()', 'description': 'add_playing_position_listener( (SimplerDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;playing_position&quot; has changed. C++ signature :  void add_playing_position_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'add_playing_position_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1329, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.add_retrigger_listener()', 'description': 'add_retrigger_listener( (SimplerDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;retrigger&quot; has changed. C++ signature :  void add_retrigger_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'add_retrigger_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1330, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.add_sample_listener()', 'description': 'add_sample_listener( (SimplerDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;sample&quot; has changed. C++ signature :  void add_sample_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'add_sample_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1331, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.add_slicing_playback_mode_listener()', 'description': 'add_slicing_playback_mode_listener( (SimplerDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;slicing_playback_mode&quot; has changed. C++ signature :  void add_slicing_playback_mode_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'add_slicing_playback_mode_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1332, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.add_voices_listener()', 'description': 'add_voices_listener( (SimplerDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;voices&quot; has changed. C++ signature :  void add_voices_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'add_voices_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1333, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.can_warp_as_has_listener()', 'description': 'can_warp_as_has_listener( (SimplerDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;can_warp_as&quot;. C++ signature :  bool can_warp_as_has_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'can_warp_as_has_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1334, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.can_warp_double_has_listener()', 'description': 'can_warp_double_has_listener( (SimplerDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;can_warp_double&quot;. C++ signature :  bool can_warp_double_has_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'can_warp_double_has_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1335, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.can_warp_half_has_listener()', 'description': 'can_warp_half_has_listener( (SimplerDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;can_warp_half&quot;. C++ signature :  bool can_warp_half_has_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'can_warp_half_has_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1336, 'tag': 'Method', 'name': 'Live.SimplerDevice.SimplerDevice.crop()', 'description': 'crop( (SimplerDevice)self) -> None : Crop the loaded sample to the active area between start- and end marker. Calling this method on an empty simpler raises an error. C++ signature :  void crop(TSimplerDevicePyHandle)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'crop()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'Method'}, {'ref': 1337, 'tag': 'Method', 'name': 'Live.SimplerDevice.SimplerDevice.guess_playback_length()', 'description': 'guess_playback_length( (SimplerDevice)self) -> float : Return an estimated beat time for the playback length between start- and end-marker. Calling this method on an empty simpler raises an error. C++ signature :  double guess_playback_length(TSimplerDevicePyHandle)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'guess_playback_length()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'Method'}, {'ref': 1338, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.is_active_has_listener()', 'description': 'is_active_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_active&quot;. C++ signature :  bool is_active_has_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'is_active_has_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1339, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.multi_sample_mode_has_listener()', 'description': 'multi_sample_mode_has_listener( (SimplerDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;multi_sample_mode&quot;. C++ signature :  bool multi_sample_mode_has_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'multi_sample_mode_has_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1340, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.name_has_listener()', 'description': 'name_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'name_has_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1341, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.pad_slicing_has_listener()', 'description': 'pad_slicing_has_listener( (SimplerDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;pad_slicing&quot;. C++ signature :  bool pad_slicing_has_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'pad_slicing_has_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1342, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.parameters_has_listener()', 'description': 'parameters_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;parameters&quot;. C++ signature :  bool parameters_has_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'parameters_has_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1343, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.playback_mode_has_listener()', 'description': 'playback_mode_has_listener( (SimplerDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;playback_mode&quot;. C++ signature :  bool playback_mode_has_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'playback_mode_has_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1344, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.playing_position_enabled_has_listener()', 'description': 'playing_position_enabled_has_listener( (SimplerDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;playing_position_enabled&quot;. C++ signature :  bool playing_position_enabled_has_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'playing_position_enabled_has_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1345, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.playing_position_has_listener()', 'description': 'playing_position_has_listener( (SimplerDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;playing_position&quot;. C++ signature :  bool playing_position_has_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'playing_position_has_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1346, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.remove_can_warp_as_listener()', 'description': 'remove_can_warp_as_listener( (SimplerDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;can_warp_as&quot;. C++ signature :  void remove_can_warp_as_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'remove_can_warp_as_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1347, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.remove_can_warp_double_listener()', 'description': 'remove_can_warp_double_listener( (SimplerDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;can_warp_double&quot;. C++ signature :  void remove_can_warp_double_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'remove_can_warp_double_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1348, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.remove_can_warp_half_listener()', 'description': 'remove_can_warp_half_listener( (SimplerDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;can_warp_half&quot;. C++ signature :  void remove_can_warp_half_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'remove_can_warp_half_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1349, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.remove_is_active_listener()', 'description': 'remove_is_active_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_active&quot;. C++ signature :  void remove_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'remove_is_active_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1350, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.remove_multi_sample_mode_listener()', 'description': 'remove_multi_sample_mode_listener( (SimplerDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;multi_sample_mode&quot;. C++ signature :  void remove_multi_sample_mode_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'remove_multi_sample_mode_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1351, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.remove_name_listener()', 'description': 'remove_name_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'remove_name_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1352, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.remove_pad_slicing_listener()', 'description': 'remove_pad_slicing_listener( (SimplerDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;pad_slicing&quot;. C++ signature :  void remove_pad_slicing_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'remove_pad_slicing_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1353, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.remove_parameters_listener()', 'description': 'remove_parameters_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;parameters&quot;. C++ signature :  void remove_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'remove_parameters_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1354, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.remove_playback_mode_listener()', 'description': 'remove_playback_mode_listener( (SimplerDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;playback_mode&quot;. C++ signature :  void remove_playback_mode_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'remove_playback_mode_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1355, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.remove_playing_position_enabled_listener()', 'description': 'remove_playing_position_enabled_listener( (SimplerDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;playing_position_enabled&quot;. C++ signature :  void remove_playing_position_enabled_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'remove_playing_position_enabled_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1356, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.remove_playing_position_listener()', 'description': 'remove_playing_position_listener( (SimplerDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;playing_position&quot;. C++ signature :  void remove_playing_position_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'remove_playing_position_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1357, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.remove_retrigger_listener()', 'description': 'remove_retrigger_listener( (SimplerDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;retrigger&quot;. C++ signature :  void remove_retrigger_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'remove_retrigger_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1358, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.remove_sample_listener()', 'description': 'remove_sample_listener( (SimplerDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;sample&quot;. C++ signature :  void remove_sample_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'remove_sample_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1359, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.remove_slicing_playback_mode_listener()', 'description': 'remove_slicing_playback_mode_listener( (SimplerDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;slicing_playback_mode&quot;. C++ signature :  void remove_slicing_playback_mode_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'remove_slicing_playback_mode_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1360, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.remove_voices_listener()', 'description': 'remove_voices_listener( (SimplerDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;voices&quot;. C++ signature :  void remove_voices_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'remove_voices_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1361, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.retrigger_has_listener()', 'description': 'retrigger_has_listener( (SimplerDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;retrigger&quot;. C++ signature :  bool retrigger_has_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'retrigger_has_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1362, 'tag': 'Method', 'name': 'Live.SimplerDevice.SimplerDevice.reverse()', 'description': 'reverse( (SimplerDevice)self) -> None : Reverse the loaded sample. Calling this method on an empty simpler raises an error. C++ signature :  void reverse(TSimplerDevicePyHandle)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'reverse()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'Method'}, {'ref': 1363, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.sample_has_listener()', 'description': 'sample_has_listener( (SimplerDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;sample&quot;. C++ signature :  bool sample_has_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'sample_has_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1364, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.slicing_playback_mode_has_listener()', 'description': 'slicing_playback_mode_has_listener( (SimplerDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;slicing_playback_mode&quot;. C++ signature :  bool slicing_playback_mode_has_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'slicing_playback_mode_has_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1365, 'tag': 'Method', 'name': 'Live.SimplerDevice.SimplerDevice.store_chosen_bank()', 'description': 'store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -> None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle<ADevice>,int,int)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'store_chosen_bank()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'Method'}, {'ref': 1366, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.voices_has_listener()', 'description': 'voices_has_listener( (SimplerDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;voices&quot;. C++ signature :  bool voices_has_listener(TSimplerDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'voices_has_listener()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'listener Method'}, {'ref': 1367, 'tag': 'Method', 'name': 'Live.SimplerDevice.SimplerDevice.warp_as()', 'description': 'warp_as( (SimplerDevice)self, (float)beat_time) -> None : Warp the playback region between start- and end-marker as the given length. Calling this method on an empty simpler raises an error. C++ signature :  void warp_as(TSimplerDevicePyHandle,double)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'warp_as()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'Method'}, {'ref': 1368, 'tag': 'Method', 'name': 'Live.SimplerDevice.SimplerDevice.warp_double()', 'description': 'warp_double( (SimplerDevice)self) -> None : Doubles the tempo for region between start- and end-marker. C++ signature :  void warp_double(TSimplerDevicePyHandle)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'warp_double()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'Method'}, {'ref': 1369, 'tag': 'Method', 'name': 'Live.SimplerDevice.SimplerDevice.warp_half()', 'description': 'warp_half( (SimplerDevice)self) -> None : Halves the tempo for region between start- and end-marker. C++ signature :  void warp_half(TSimplerDevicePyHandle)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'warp_half()'], 'hirachy': 3, 'ref_parent': 1294, 'children': [], 'group': 'Method'}, {'ref': 1370, 'tag': 'Class', 'name': 'Live.SimplerDevice.SimplerDevice.View', 'description': 'Representing the view aspects of a simpler device.', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View'], 'hirachy': 3, 'ref_parent': 1294, 'children': [1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408], 'group': None}, {'ref': 1371, 'tag': 'Property', 'name': 'Live.SimplerDevice.SimplerDevice.View._live_ptr', 'description': None, 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', '_live_ptr'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'Property'}, {'ref': 1372, 'tag': 'Property', 'name': 'Live.SimplerDevice.SimplerDevice.View.canonical_parent', 'description': 'Get the canonical parent of the View.', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'canonical_parent'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'Property'}, {'ref': 1373, 'tag': 'Property', 'name': 'Live.SimplerDevice.SimplerDevice.View.is_collapsed', 'description': 'Get/Set/Listen if the device is shown collapsed in the device chain.', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'is_collapsed'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'Property'}, {'ref': 1374, 'tag': 'Property', 'name': 'Live.SimplerDevice.SimplerDevice.View.sample_end', 'description': 'Access to the modulated samples end position in samples. Returns -1 in case there is no sample loaded.', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'sample_end'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'Property'}, {'ref': 1375, 'tag': 'Property', 'name': 'Live.SimplerDevice.SimplerDevice.View.sample_env_fade_in', 'description': 'Access to the envelope fade-in time in samples. Returned value is only in use when Simpler is in one-shot mode. Returns -1 in case there is no sample loaded.', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'sample_env_fade_in'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'Property'}, {'ref': 1376, 'tag': 'Property', 'name': 'Live.SimplerDevice.SimplerDevice.View.sample_env_fade_out', 'description': 'Access to the envelope fade-out time in samples. Returned value is only in use when Simpler is in one-shot mode. Returns -1 in case there is no sample loaded.', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'sample_env_fade_out'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'Property'}, {'ref': 1377, 'tag': 'Property', 'name': 'Live.SimplerDevice.SimplerDevice.View.sample_loop_end', 'description': 'Access to the modulated samples loop end position in samples. Returns -1 in case there is no sample loaded.', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'sample_loop_end'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'Property'}, {'ref': 1378, 'tag': 'Property', 'name': 'Live.SimplerDevice.SimplerDevice.View.sample_loop_fade', 'description': 'Access to the modulated samples loop fade position in samples. Returns -1 in case there is no sample loaded.', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'sample_loop_fade'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'Property'}, {'ref': 1379, 'tag': 'Property', 'name': 'Live.SimplerDevice.SimplerDevice.View.sample_loop_start', 'description': 'Access to the modulated samples loop start position in samples. Returns -1 in case there is no sample loaded.', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'sample_loop_start'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'Property'}, {'ref': 1380, 'tag': 'Property', 'name': 'Live.SimplerDevice.SimplerDevice.View.sample_start', 'description': 'Access to the modulated samples start position in samples. Returns -1 in case there is no sample loaded.', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'sample_start'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'Property'}, {'ref': 1381, 'tag': 'Property', 'name': 'Live.SimplerDevice.SimplerDevice.View.selected_slice', 'description': 'Access to the selected slice.', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'selected_slice'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'Property'}, {'ref': 1382, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.View.add_is_collapsed_listener()', 'description': 'add_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_collapsed&quot; has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'add_is_collapsed_listener()'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'listener Method'}, {'ref': 1383, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.View.add_sample_end_listener()', 'description': 'add_sample_end_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;sample_end&quot; has changed. C++ signature :  void add_sample_end_listener(TSimplerDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'add_sample_end_listener()'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'listener Method'}, {'ref': 1384, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.View.add_sample_env_fade_in_listener()', 'description': 'add_sample_env_fade_in_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;sample_env_fade_in&quot; has changed. C++ signature :  void add_sample_env_fade_in_listener(TSimplerDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'add_sample_env_fade_in_listener()'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'listener Method'}, {'ref': 1385, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.View.add_sample_env_fade_out_listener()', 'description': 'add_sample_env_fade_out_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;sample_env_fade_out&quot; has changed. C++ signature :  void add_sample_env_fade_out_listener(TSimplerDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'add_sample_env_fade_out_listener()'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'listener Method'}, {'ref': 1386, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.View.add_sample_loop_end_listener()', 'description': 'add_sample_loop_end_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;sample_loop_end&quot; has changed. C++ signature :  void add_sample_loop_end_listener(TSimplerDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'add_sample_loop_end_listener()'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'listener Method'}, {'ref': 1387, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.View.add_sample_loop_fade_listener()', 'description': 'add_sample_loop_fade_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;sample_loop_fade&quot; has changed. C++ signature :  void add_sample_loop_fade_listener(TSimplerDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'add_sample_loop_fade_listener()'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'listener Method'}, {'ref': 1388, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.View.add_sample_loop_start_listener()', 'description': 'add_sample_loop_start_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;sample_loop_start&quot; has changed. C++ signature :  void add_sample_loop_start_listener(TSimplerDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'add_sample_loop_start_listener()'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'listener Method'}, {'ref': 1389, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.View.add_sample_start_listener()', 'description': 'add_sample_start_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;sample_start&quot; has changed. C++ signature :  void add_sample_start_listener(TSimplerDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'add_sample_start_listener()'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'listener Method'}, {'ref': 1390, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.View.add_selected_slice_listener()', 'description': 'add_selected_slice_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;selected_slice&quot; has changed. C++ signature :  void add_selected_slice_listener(TSimplerDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'add_selected_slice_listener()'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'listener Method'}, {'ref': 1391, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.View.is_collapsed_has_listener()', 'description': 'is_collapsed_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_collapsed&quot;. C++ signature :  bool is_collapsed_has_listener(TPyViewData<ADevice>,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'is_collapsed_has_listener()'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'listener Method'}, {'ref': 1392, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.View.remove_is_collapsed_listener()', 'description': 'remove_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_collapsed&quot;. C++ signature :  void remove_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'remove_is_collapsed_listener()'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'listener Method'}, {'ref': 1393, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.View.remove_sample_end_listener()', 'description': 'remove_sample_end_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;sample_end&quot;. C++ signature :  void remove_sample_end_listener(TSimplerDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'remove_sample_end_listener()'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'listener Method'}, {'ref': 1394, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.View.remove_sample_env_fade_in_listener()', 'description': 'remove_sample_env_fade_in_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;sample_env_fade_in&quot;. C++ signature :  void remove_sample_env_fade_in_listener(TSimplerDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'remove_sample_env_fade_in_listener()'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'listener Method'}, {'ref': 1395, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.View.remove_sample_env_fade_out_listener()', 'description': 'remove_sample_env_fade_out_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;sample_env_fade_out&quot;. C++ signature :  void remove_sample_env_fade_out_listener(TSimplerDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'remove_sample_env_fade_out_listener()'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'listener Method'}, {'ref': 1396, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.View.remove_sample_loop_end_listener()', 'description': 'remove_sample_loop_end_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;sample_loop_end&quot;. C++ signature :  void remove_sample_loop_end_listener(TSimplerDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'remove_sample_loop_end_listener()'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'listener Method'}, {'ref': 1397, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.View.remove_sample_loop_fade_listener()', 'description': 'remove_sample_loop_fade_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;sample_loop_fade&quot;. C++ signature :  void remove_sample_loop_fade_listener(TSimplerDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'remove_sample_loop_fade_listener()'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'listener Method'}, {'ref': 1398, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.View.remove_sample_loop_start_listener()', 'description': 'remove_sample_loop_start_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;sample_loop_start&quot;. C++ signature :  void remove_sample_loop_start_listener(TSimplerDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'remove_sample_loop_start_listener()'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'listener Method'}, {'ref': 1399, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.View.remove_sample_start_listener()', 'description': 'remove_sample_start_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;sample_start&quot;. C++ signature :  void remove_sample_start_listener(TSimplerDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'remove_sample_start_listener()'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'listener Method'}, {'ref': 1400, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.View.remove_selected_slice_listener()', 'description': 'remove_selected_slice_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;selected_slice&quot;. C++ signature :  void remove_selected_slice_listener(TSimplerDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'remove_selected_slice_listener()'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'listener Method'}, {'ref': 1401, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.View.sample_end_has_listener()', 'description': 'sample_end_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;sample_end&quot;. C++ signature :  bool sample_end_has_listener(TSimplerDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'sample_end_has_listener()'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'listener Method'}, {'ref': 1402, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.View.sample_env_fade_in_has_listener()', 'description': 'sample_env_fade_in_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;sample_env_fade_in&quot;. C++ signature :  bool sample_env_fade_in_has_listener(TSimplerDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'sample_env_fade_in_has_listener()'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'listener Method'}, {'ref': 1403, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.View.sample_env_fade_out_has_listener()', 'description': 'sample_env_fade_out_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;sample_env_fade_out&quot;. C++ signature :  bool sample_env_fade_out_has_listener(TSimplerDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'sample_env_fade_out_has_listener()'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'listener Method'}, {'ref': 1404, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.View.sample_loop_end_has_listener()', 'description': 'sample_loop_end_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;sample_loop_end&quot;. C++ signature :  bool sample_loop_end_has_listener(TSimplerDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'sample_loop_end_has_listener()'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'listener Method'}, {'ref': 1405, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.View.sample_loop_fade_has_listener()', 'description': 'sample_loop_fade_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;sample_loop_fade&quot;. C++ signature :  bool sample_loop_fade_has_listener(TSimplerDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'sample_loop_fade_has_listener()'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'listener Method'}, {'ref': 1406, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.View.sample_loop_start_has_listener()', 'description': 'sample_loop_start_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;sample_loop_start&quot;. C++ signature :  bool sample_loop_start_has_listener(TSimplerDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'sample_loop_start_has_listener()'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'listener Method'}, {'ref': 1407, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.View.sample_start_has_listener()', 'description': 'sample_start_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;sample_start&quot;. C++ signature :  bool sample_start_has_listener(TSimplerDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'sample_start_has_listener()'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'listener Method'}, {'ref': 1408, 'tag': 'listener Method', 'name': 'Live.SimplerDevice.SimplerDevice.View.selected_slice_has_listener()', 'description': 'selected_slice_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;selected_slice&quot;. C++ signature :  bool selected_slice_has_listener(TSimplerDevicePyViewData,boost::python::api::object)', 'path': ['Live', 'SimplerDevice', 'SimplerDevice', 'View', 'selected_slice_has_listener()'], 'hirachy': 4, 'ref_parent': 1370, 'children': [], 'group': 'listener Method'}, {'ref': 1409, 'tag': 'Class', 'name': 'Live.SimplerDevice.SlicingPlaybackMode', 'description': None, 'path': ['Live', 'SimplerDevice', 'SlicingPlaybackMode'], 'hirachy': 2, 'ref_parent': 1288, 'children': [1410, 1411, 1412], 'group': None}, {'ref': 1410, 'tag': 'Value', 'name': 'Live.SimplerDevice.SlicingPlaybackMode.mono', 'description': None, 'path': ['Live', 'SimplerDevice', 'SlicingPlaybackMode', 'mono'], 'hirachy': 3, 'ref_parent': 1409, 'children': [], 'group': 'Value'}, {'ref': 1411, 'tag': 'Value', 'name': 'Live.SimplerDevice.SlicingPlaybackMode.poly', 'description': None, 'path': ['Live', 'SimplerDevice', 'SlicingPlaybackMode', 'poly'], 'hirachy': 3, 'ref_parent': 1409, 'children': [], 'group': 'Value'}, {'ref': 1412, 'tag': 'Value', 'name': 'Live.SimplerDevice.SlicingPlaybackMode.thru', 'description': None, 'path': ['Live', 'SimplerDevice', 'SlicingPlaybackMode', 'thru'], 'hirachy': 3, 'ref_parent': 1409, 'children': [], 'group': 'Value'}, {'ref': 1413, 'tag': 'Module', 'name': 'Live.Song', 'description': None, 'path': ['Live', 'Song'], 'hirachy': 1, 'ref_parent': 0, 'children': [1414, 1415, 1420, 1424, 1427, 1439, 1454, 1464, 1468, 1473, 1722], 'group': None}, {'ref': 1414, 'tag': 'Built-In', 'name': 'Live.Song.get_all_scales_ordered()', 'description': 'get_all_scales_ordered() -> tuple : Get an ordered tuple of tuples of all available scale names to intervals. C++ signature :  boost::python::tuple get_all_scales_ordered()', 'path': ['Live', 'Song', 'get_all_scales_ordered()'], 'hirachy': 2, 'ref_parent': 1413, 'children': [], 'group': None}, {'ref': 1415, 'tag': 'Class', 'name': 'Live.Song.BeatTime', 'description': 'Represents a Time, splitted into Bars, Beats, SubDivision and Ticks.', 'path': ['Live', 'Song', 'BeatTime'], 'hirachy': 2, 'ref_parent': 1413, 'children': [1416, 1417, 1418, 1419], 'group': None}, {'ref': 1416, 'tag': 'Property', 'name': 'Live.Song.BeatTime.bars', 'description': None, 'path': ['Live', 'Song', 'BeatTime', 'bars'], 'hirachy': 3, 'ref_parent': 1415, 'children': [], 'group': 'Property'}, {'ref': 1417, 'tag': 'Property', 'name': 'Live.Song.BeatTime.beats', 'description': None, 'path': ['Live', 'Song', 'BeatTime', 'beats'], 'hirachy': 3, 'ref_parent': 1415, 'children': [], 'group': 'Property'}, {'ref': 1418, 'tag': 'Property', 'name': 'Live.Song.BeatTime.sub_division', 'description': None, 'path': ['Live', 'Song', 'BeatTime', 'sub_division'], 'hirachy': 3, 'ref_parent': 1415, 'children': [], 'group': 'Property'}, {'ref': 1419, 'tag': 'Property', 'name': 'Live.Song.BeatTime.ticks', 'description': None, 'path': ['Live', 'Song', 'BeatTime', 'ticks'], 'hirachy': 3, 'ref_parent': 1415, 'children': [], 'group': 'Property'}, {'ref': 1420, 'tag': 'Class', 'name': 'Live.Song.CaptureDestination', 'description': 'The destination for MIDI capture.', 'path': ['Live', 'Song', 'CaptureDestination'], 'hirachy': 2, 'ref_parent': 1413, 'children': [1421, 1422, 1423], 'group': None}, {'ref': 1421, 'tag': 'Value', 'name': 'Live.Song.CaptureDestination.arrangement', 'description': 'The destination for MIDI capture.', 'path': ['Live', 'Song', 'CaptureDestination', 'arrangement'], 'hirachy': 3, 'ref_parent': 1420, 'children': [], 'group': 'Value'}, {'ref': 1422, 'tag': 'Value', 'name': 'Live.Song.CaptureDestination.auto', 'description': 'The destination for MIDI capture.', 'path': ['Live', 'Song', 'CaptureDestination', 'auto'], 'hirachy': 3, 'ref_parent': 1420, 'children': [], 'group': 'Value'}, {'ref': 1423, 'tag': 'Value', 'name': 'Live.Song.CaptureDestination.session', 'description': 'The destination for MIDI capture.', 'path': ['Live', 'Song', 'CaptureDestination', 'session'], 'hirachy': 3, 'ref_parent': 1420, 'children': [], 'group': 'Value'}, {'ref': 1424, 'tag': 'Class', 'name': 'Live.Song.CaptureMode', 'description': 'The capture mode that is used for capture and insert scene.', 'path': ['Live', 'Song', 'CaptureMode'], 'hirachy': 2, 'ref_parent': 1413, 'children': [1425, 1426], 'group': None}, {'ref': 1425, 'tag': 'Value', 'name': 'Live.Song.CaptureMode.all', 'description': 'The capture mode that is used for capture and insert scene.', 'path': ['Live', 'Song', 'CaptureMode', 'all'], 'hirachy': 3, 'ref_parent': 1424, 'children': [], 'group': 'Value'}, {'ref': 1426, 'tag': 'Value', 'name': 'Live.Song.CaptureMode.all_except_selected', 'description': 'The capture mode that is used for capture and insert scene.', 'path': ['Live', 'Song', 'CaptureMode', 'all_except_selected'], 'hirachy': 3, 'ref_parent': 1424, 'children': [], 'group': 'Value'}, {'ref': 1427, 'tag': 'Class', 'name': 'Live.Song.CuePoint', 'description': "Represents a 'Marker' in the arrangement.", 'path': ['Live', 'Song', 'CuePoint'], 'hirachy': 2, 'ref_parent': 1413, 'children': [1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438], 'group': None}, {'ref': 1428, 'tag': 'Property', 'name': 'Live.Song.CuePoint._live_ptr', 'description': None, 'path': ['Live', 'Song', 'CuePoint', '_live_ptr'], 'hirachy': 3, 'ref_parent': 1427, 'children': [], 'group': 'Property'}, {'ref': 1429, 'tag': 'Property', 'name': 'Live.Song.CuePoint.canonical_parent', 'description': 'Get the canonical parent of the cue point.', 'path': ['Live', 'Song', 'CuePoint', 'canonical_parent'], 'hirachy': 3, 'ref_parent': 1427, 'children': [], 'group': 'Property'}, {'ref': 1430, 'tag': 'Property', 'name': 'Live.Song.CuePoint.name', 'description': 'Get/Listen to the name of this CuePoint, as visible in the arranger.', 'path': ['Live', 'Song', 'CuePoint', 'name'], 'hirachy': 3, 'ref_parent': 1427, 'children': [], 'group': 'Property'}, {'ref': 1431, 'tag': 'Property', 'name': 'Live.Song.CuePoint.time', 'description': "Get/Listen to the CuePoint's time in beats.", 'path': ['Live', 'Song', 'CuePoint', 'time'], 'hirachy': 3, 'ref_parent': 1427, 'children': [], 'group': 'Property'}, {'ref': 1432, 'tag': 'listener Method', 'name': 'Live.Song.CuePoint.add_name_listener()', 'description': 'add_name_listener( (CuePoint)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TPyHandle<ACuePoint>,boost::python::api::object)', 'path': ['Live', 'Song', 'CuePoint', 'add_name_listener()'], 'hirachy': 3, 'ref_parent': 1427, 'children': [], 'group': 'listener Method'}, {'ref': 1433, 'tag': 'listener Method', 'name': 'Live.Song.CuePoint.add_time_listener()', 'description': 'add_time_listener( (CuePoint)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;time&quot; has changed. C++ signature :  void add_time_listener(TPyHandle<ACuePoint>,boost::python::api::object)', 'path': ['Live', 'Song', 'CuePoint', 'add_time_listener()'], 'hirachy': 3, 'ref_parent': 1427, 'children': [], 'group': 'listener Method'}, {'ref': 1434, 'tag': 'Method', 'name': 'Live.Song.CuePoint.jump()', 'description': "jump( (CuePoint)arg1) -> None : When the Song is playing, set the playing-position quantized to this Cuepoint's time. When not playing, simply move the start playing position. C++ signature :  void jump(TPyHandle<ACuePoint>)", 'path': ['Live', 'Song', 'CuePoint', 'jump()'], 'hirachy': 3, 'ref_parent': 1427, 'children': [], 'group': 'Method'}, {'ref': 1435, 'tag': 'listener Method', 'name': 'Live.Song.CuePoint.name_has_listener()', 'description': 'name_has_listener( (CuePoint)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TPyHandle<ACuePoint>,boost::python::api::object)', 'path': ['Live', 'Song', 'CuePoint', 'name_has_listener()'], 'hirachy': 3, 'ref_parent': 1427, 'children': [], 'group': 'listener Method'}, {'ref': 1436, 'tag': 'listener Method', 'name': 'Live.Song.CuePoint.remove_name_listener()', 'description': 'remove_name_listener( (CuePoint)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TPyHandle<ACuePoint>,boost::python::api::object)', 'path': ['Live', 'Song', 'CuePoint', 'remove_name_listener()'], 'hirachy': 3, 'ref_parent': 1427, 'children': [], 'group': 'listener Method'}, {'ref': 1437, 'tag': 'listener Method', 'name': 'Live.Song.CuePoint.remove_time_listener()', 'description': 'remove_time_listener( (CuePoint)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;time&quot;. C++ signature :  void remove_time_listener(TPyHandle<ACuePoint>,boost::python::api::object)', 'path': ['Live', 'Song', 'CuePoint', 'remove_time_listener()'], 'hirachy': 3, 'ref_parent': 1427, 'children': [], 'group': 'listener Method'}, {'ref': 1438, 'tag': 'listener Method', 'name': 'Live.Song.CuePoint.time_has_listener()', 'description': 'time_has_listener( (CuePoint)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;time&quot;. C++ signature :  bool time_has_listener(TPyHandle<ACuePoint>,boost::python::api::object)', 'path': ['Live', 'Song', 'CuePoint', 'time_has_listener()'], 'hirachy': 3, 'ref_parent': 1427, 'children': [], 'group': 'listener Method'}, {'ref': 1439, 'tag': 'Class', 'name': 'Live.Song.Quantization', 'description': None, 'path': ['Live', 'Song', 'Quantization'], 'hirachy': 2, 'ref_parent': 1413, 'children': [1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453], 'group': None}, {'ref': 1440, 'tag': 'Value', 'name': 'Live.Song.Quantization.q_2_bars', 'description': None, 'path': ['Live', 'Song', 'Quantization', 'q_2_bars'], 'hirachy': 3, 'ref_parent': 1439, 'children': [], 'group': 'Value'}, {'ref': 1441, 'tag': 'Value', 'name': 'Live.Song.Quantization.q_4_bars', 'description': None, 'path': ['Live', 'Song', 'Quantization', 'q_4_bars'], 'hirachy': 3, 'ref_parent': 1439, 'children': [], 'group': 'Value'}, {'ref': 1442, 'tag': 'Value', 'name': 'Live.Song.Quantization.q_8_bars', 'description': None, 'path': ['Live', 'Song', 'Quantization', 'q_8_bars'], 'hirachy': 3, 'ref_parent': 1439, 'children': [], 'group': 'Value'}, {'ref': 1443, 'tag': 'Value', 'name': 'Live.Song.Quantization.q_bar', 'description': None, 'path': ['Live', 'Song', 'Quantization', 'q_bar'], 'hirachy': 3, 'ref_parent': 1439, 'children': [], 'group': 'Value'}, {'ref': 1444, 'tag': 'Value', 'name': 'Live.Song.Quantization.q_eight', 'description': None, 'path': ['Live', 'Song', 'Quantization', 'q_eight'], 'hirachy': 3, 'ref_parent': 1439, 'children': [], 'group': 'Value'}, {'ref': 1445, 'tag': 'Value', 'name': 'Live.Song.Quantization.q_eight_triplet', 'description': None, 'path': ['Live', 'Song', 'Quantization', 'q_eight_triplet'], 'hirachy': 3, 'ref_parent': 1439, 'children': [], 'group': 'Value'}, {'ref': 1446, 'tag': 'Value', 'name': 'Live.Song.Quantization.q_half', 'description': None, 'path': ['Live', 'Song', 'Quantization', 'q_half'], 'hirachy': 3, 'ref_parent': 1439, 'children': [], 'group': 'Value'}, {'ref': 1447, 'tag': 'Value', 'name': 'Live.Song.Quantization.q_half_triplet', 'description': None, 'path': ['Live', 'Song', 'Quantization', 'q_half_triplet'], 'hirachy': 3, 'ref_parent': 1439, 'children': [], 'group': 'Value'}, {'ref': 1448, 'tag': 'Value', 'name': 'Live.Song.Quantization.q_no_q', 'description': None, 'path': ['Live', 'Song', 'Quantization', 'q_no_q'], 'hirachy': 3, 'ref_parent': 1439, 'children': [], 'group': 'Value'}, {'ref': 1449, 'tag': 'Value', 'name': 'Live.Song.Quantization.q_quarter', 'description': None, 'path': ['Live', 'Song', 'Quantization', 'q_quarter'], 'hirachy': 3, 'ref_parent': 1439, 'children': [], 'group': 'Value'}, {'ref': 1450, 'tag': 'Value', 'name': 'Live.Song.Quantization.q_quarter_triplet', 'description': None, 'path': ['Live', 'Song', 'Quantization', 'q_quarter_triplet'], 'hirachy': 3, 'ref_parent': 1439, 'children': [], 'group': 'Value'}, {'ref': 1451, 'tag': 'Value', 'name': 'Live.Song.Quantization.q_sixtenth', 'description': None, 'path': ['Live', 'Song', 'Quantization', 'q_sixtenth'], 'hirachy': 3, 'ref_parent': 1439, 'children': [], 'group': 'Value'}, {'ref': 1452, 'tag': 'Value', 'name': 'Live.Song.Quantization.q_sixtenth_triplet', 'description': None, 'path': ['Live', 'Song', 'Quantization', 'q_sixtenth_triplet'], 'hirachy': 3, 'ref_parent': 1439, 'children': [], 'group': 'Value'}, {'ref': 1453, 'tag': 'Value', 'name': 'Live.Song.Quantization.q_thirtytwoth', 'description': None, 'path': ['Live', 'Song', 'Quantization', 'q_thirtytwoth'], 'hirachy': 3, 'ref_parent': 1439, 'children': [], 'group': 'Value'}, {'ref': 1454, 'tag': 'Class', 'name': 'Live.Song.RecordingQuantization', 'description': None, 'path': ['Live', 'Song', 'RecordingQuantization'], 'hirachy': 2, 'ref_parent': 1413, 'children': [1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463], 'group': None}, {'ref': 1455, 'tag': 'Value', 'name': 'Live.Song.RecordingQuantization.rec_q_eight', 'description': None, 'path': ['Live', 'Song', 'RecordingQuantization', 'rec_q_eight'], 'hirachy': 3, 'ref_parent': 1454, 'children': [], 'group': 'Value'}, {'ref': 1456, 'tag': 'Value', 'name': 'Live.Song.RecordingQuantization.rec_q_eight_eight_triplet', 'description': None, 'path': ['Live', 'Song', 'RecordingQuantization', 'rec_q_eight_eight_triplet'], 'hirachy': 3, 'ref_parent': 1454, 'children': [], 'group': 'Value'}, {'ref': 1457, 'tag': 'Value', 'name': 'Live.Song.RecordingQuantization.rec_q_eight_triplet', 'description': None, 'path': ['Live', 'Song', 'RecordingQuantization', 'rec_q_eight_triplet'], 'hirachy': 3, 'ref_parent': 1454, 'children': [], 'group': 'Value'}, {'ref': 1458, 'tag': 'Value', 'name': 'Live.Song.RecordingQuantization.rec_q_no_q', 'description': None, 'path': ['Live', 'Song', 'RecordingQuantization', 'rec_q_no_q'], 'hirachy': 3, 'ref_parent': 1454, 'children': [], 'group': 'Value'}, {'ref': 1459, 'tag': 'Value', 'name': 'Live.Song.RecordingQuantization.rec_q_quarter', 'description': None, 'path': ['Live', 'Song', 'RecordingQuantization', 'rec_q_quarter'], 'hirachy': 3, 'ref_parent': 1454, 'children': [], 'group': 'Value'}, {'ref': 1460, 'tag': 'Value', 'name': 'Live.Song.RecordingQuantization.rec_q_sixtenth', 'description': None, 'path': ['Live', 'Song', 'RecordingQuantization', 'rec_q_sixtenth'], 'hirachy': 3, 'ref_parent': 1454, 'children': [], 'group': 'Value'}, {'ref': 1461, 'tag': 'Value', 'name': 'Live.Song.RecordingQuantization.rec_q_sixtenth_sixtenth_triplet', 'description': None, 'path': ['Live', 'Song', 'RecordingQuantization', 'rec_q_sixtenth_sixtenth_triplet'], 'hirachy': 3, 'ref_parent': 1454, 'children': [], 'group': 'Value'}, {'ref': 1462, 'tag': 'Value', 'name': 'Live.Song.RecordingQuantization.rec_q_sixtenth_triplet', 'description': None, 'path': ['Live', 'Song', 'RecordingQuantization', 'rec_q_sixtenth_triplet'], 'hirachy': 3, 'ref_parent': 1454, 'children': [], 'group': 'Value'}, {'ref': 1463, 'tag': 'Value', 'name': 'Live.Song.RecordingQuantization.rec_q_thirtysecond', 'description': None, 'path': ['Live', 'Song', 'RecordingQuantization', 'rec_q_thirtysecond'], 'hirachy': 3, 'ref_parent': 1454, 'children': [], 'group': 'Value'}, {'ref': 1464, 'tag': 'Class', 'name': 'Live.Song.SessionRecordStatus', 'description': None, 'path': ['Live', 'Song', 'SessionRecordStatus'], 'hirachy': 2, 'ref_parent': 1413, 'children': [1465, 1466, 1467], 'group': None}, {'ref': 1465, 'tag': 'Value', 'name': 'Live.Song.SessionRecordStatus.off', 'description': None, 'path': ['Live', 'Song', 'SessionRecordStatus', 'off'], 'hirachy': 3, 'ref_parent': 1464, 'children': [], 'group': 'Value'}, {'ref': 1466, 'tag': 'Value', 'name': 'Live.Song.SessionRecordStatus.on', 'description': None, 'path': ['Live', 'Song', 'SessionRecordStatus', 'on'], 'hirachy': 3, 'ref_parent': 1464, 'children': [], 'group': 'Value'}, {'ref': 1467, 'tag': 'Value', 'name': 'Live.Song.SessionRecordStatus.transition', 'description': None, 'path': ['Live', 'Song', 'SessionRecordStatus', 'transition'], 'hirachy': 3, 'ref_parent': 1464, 'children': [], 'group': 'Value'}, {'ref': 1468, 'tag': 'Class', 'name': 'Live.Song.SmptTime', 'description': 'Represents a Time, split into Hours, Minutes, Seconds and Frames.The frame type must be specified when calling a function that returnsa SmptTime.', 'path': ['Live', 'Song', 'SmptTime'], 'hirachy': 2, 'ref_parent': 1413, 'children': [1469, 1470, 1471, 1472], 'group': None}, {'ref': 1469, 'tag': 'Property', 'name': 'Live.Song.SmptTime.frames', 'description': None, 'path': ['Live', 'Song', 'SmptTime', 'frames'], 'hirachy': 3, 'ref_parent': 1468, 'children': [], 'group': 'Property'}, {'ref': 1470, 'tag': 'Property', 'name': 'Live.Song.SmptTime.hours', 'description': None, 'path': ['Live', 'Song', 'SmptTime', 'hours'], 'hirachy': 3, 'ref_parent': 1468, 'children': [], 'group': 'Property'}, {'ref': 1471, 'tag': 'Property', 'name': 'Live.Song.SmptTime.minutes', 'description': None, 'path': ['Live', 'Song', 'SmptTime', 'minutes'], 'hirachy': 3, 'ref_parent': 1468, 'children': [], 'group': 'Property'}, {'ref': 1472, 'tag': 'Property', 'name': 'Live.Song.SmptTime.seconds', 'description': None, 'path': ['Live', 'Song', 'SmptTime', 'seconds'], 'hirachy': 3, 'ref_parent': 1468, 'children': [], 'group': 'Property'}, {'ref': 1473, 'tag': 'Class', 'name': 'Live.Song.Song', 'description': 'This class represents a Live set.', 'path': ['Live', 'Song', 'Song'], 'hirachy': 2, 'ref_parent': 1413, 'children': [1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689], 'group': None}, {'ref': 1474, 'tag': 'Property', 'name': 'Live.Song.Song._live_ptr', 'description': None, 'path': ['Live', 'Song', 'Song', '_live_ptr'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1475, 'tag': 'Property', 'name': 'Live.Song.Song.appointed_device', 'description': 'Read, write, and listen access to the appointed Device', 'path': ['Live', 'Song', 'Song', 'appointed_device'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1476, 'tag': 'Property', 'name': 'Live.Song.Song.arrangement_overdub', 'description': 'Get/Set the global arrangement overdub state.', 'path': ['Live', 'Song', 'Song', 'arrangement_overdub'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1477, 'tag': 'Property', 'name': 'Live.Song.Song.back_to_arranger', 'description': 'Get/Set if triggering a Clip in the Session, disabled the playback ofClips in the Arranger.', 'path': ['Live', 'Song', 'Song', 'back_to_arranger'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1478, 'tag': 'Property', 'name': 'Live.Song.Song.can_capture_midi', 'description': 'Get whether there currently is material to be captured on any tracks.', 'path': ['Live', 'Song', 'Song', 'can_capture_midi'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1479, 'tag': 'Property', 'name': 'Live.Song.Song.can_jump_to_next_cue', 'description': 'Returns true when there is a cue marker right to the playing pos thatwe could jump to.', 'path': ['Live', 'Song', 'Song', 'can_jump_to_next_cue'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1480, 'tag': 'Property', 'name': 'Live.Song.Song.can_jump_to_prev_cue', 'description': 'Returns true when there is a cue marker left to the playing pos thatwe could jump to.', 'path': ['Live', 'Song', 'Song', 'can_jump_to_prev_cue'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1481, 'tag': 'Property', 'name': 'Live.Song.Song.can_redo', 'description': 'Returns true if there is an undone action that we can redo.', 'path': ['Live', 'Song', 'Song', 'can_redo'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1482, 'tag': 'Property', 'name': 'Live.Song.Song.can_undo', 'description': 'Returns true if there is an action that we can restore.', 'path': ['Live', 'Song', 'Song', 'can_undo'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1483, 'tag': 'Property', 'name': 'Live.Song.Song.canonical_parent', 'description': 'Get the canonical parent of the song.', 'path': ['Live', 'Song', 'Song', 'canonical_parent'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1484, 'tag': 'Property', 'name': 'Live.Song.Song.clip_trigger_quantization', 'description': 'Get/Set access to the quantization settings that are used to fireClips in the Session.', 'path': ['Live', 'Song', 'Song', 'clip_trigger_quantization'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1485, 'tag': 'Property', 'name': 'Live.Song.Song.count_in_duration', 'description': 'Get the count in duration. Returns an index, mapped as follows: 0 - None, 1 - 1 Bar, 2 - 2 Bars, 3 - 4 Bars.', 'path': ['Live', 'Song', 'Song', 'count_in_duration'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1486, 'tag': 'Property', 'name': 'Live.Song.Song.cue_points', 'description': 'Const access to a list of all cue points of the Live Song.', 'path': ['Live', 'Song', 'Song', 'cue_points'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1487, 'tag': 'Property', 'name': 'Live.Song.Song.current_song_time', 'description': 'Get/Set access to the songs current playing position in ms.', 'path': ['Live', 'Song', 'Song', 'current_song_time'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1488, 'tag': 'Property', 'name': 'Live.Song.Song.exclusive_arm', 'description': 'Get if Tracks should be armed exclusively by default.', 'path': ['Live', 'Song', 'Song', 'exclusive_arm'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1489, 'tag': 'Property', 'name': 'Live.Song.Song.exclusive_solo', 'description': 'Get if Tracks should be soloed exclusively by default.', 'path': ['Live', 'Song', 'Song', 'exclusive_solo'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1490, 'tag': 'Property', 'name': 'Live.Song.Song.groove_amount', 'description': 'Get/Set the global groove amount, that adjust all setup groovesin all clips.', 'path': ['Live', 'Song', 'Song', 'groove_amount'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1491, 'tag': 'Property', 'name': 'Live.Song.Song.groove_pool', 'description': 'Get the groove pool.', 'path': ['Live', 'Song', 'Song', 'groove_pool'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1492, 'tag': 'Property', 'name': 'Live.Song.Song.is_counting_in', 'description': 'Get whether currently counting in.', 'path': ['Live', 'Song', 'Song', 'is_counting_in'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1493, 'tag': 'Property', 'name': 'Live.Song.Song.is_playing', 'description': 'Returns true if the Song is currently playing.', 'path': ['Live', 'Song', 'Song', 'is_playing'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1494, 'tag': 'Property', 'name': 'Live.Song.Song.last_event_time', 'description': 'Return the time of the last set event in the song. In contrary tosong_length, this will not add some extra beats that are mostly neededfor Display purposes in the Arrangerview.', 'path': ['Live', 'Song', 'Song', 'last_event_time'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1495, 'tag': 'Property', 'name': 'Live.Song.Song.loop', 'description': 'Get/Set the looping flag that en/disables the usage of the globalloop markers in the song.', 'path': ['Live', 'Song', 'Song', 'loop'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1496, 'tag': 'Property', 'name': 'Live.Song.Song.loop_length', 'description': 'Get/Set the length of the global loop marker position in beats.', 'path': ['Live', 'Song', 'Song', 'loop_length'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1497, 'tag': 'Property', 'name': 'Live.Song.Song.loop_start', 'description': 'Get/Set the start of the global loop marker position in beats.', 'path': ['Live', 'Song', 'Song', 'loop_start'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1498, 'tag': 'Property', 'name': 'Live.Song.Song.master_track', 'description': 'Access to the Master Track (always available)', 'path': ['Live', 'Song', 'Song', 'master_track'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1499, 'tag': 'Property', 'name': 'Live.Song.Song.metronome', 'description': 'Get/Set if the metronom is audible.', 'path': ['Live', 'Song', 'Song', 'metronome'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1500, 'tag': 'Property', 'name': 'Live.Song.Song.midi_recording_quantization', 'description': 'Get/Set access to the settings that are used to quantizeMIDI recordings.', 'path': ['Live', 'Song', 'Song', 'midi_recording_quantization'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1501, 'tag': 'Property', 'name': 'Live.Song.Song.nudge_down', 'description': 'Get/Set the status of the nudge down button.', 'path': ['Live', 'Song', 'Song', 'nudge_down'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1502, 'tag': 'Property', 'name': 'Live.Song.Song.nudge_up', 'description': 'Get/Set the status of the nudge up button.', 'path': ['Live', 'Song', 'Song', 'nudge_up'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1503, 'tag': 'Property', 'name': 'Live.Song.Song.overdub', 'description': 'Legacy hook for Live 8 overdub state. Now hooks tosession record, but never starts playback.', 'path': ['Live', 'Song', 'Song', 'overdub'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1504, 'tag': 'Property', 'name': 'Live.Song.Song.punch_in', 'description': 'Get/Set the flag that will enable recording as soon as the Song playsand hits the global loop start region.', 'path': ['Live', 'Song', 'Song', 'punch_in'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1505, 'tag': 'Property', 'name': 'Live.Song.Song.punch_out', 'description': 'Get/Set the flag that will disable recording as soon as the Song playsand hits the global loop end region.', 'path': ['Live', 'Song', 'Song', 'punch_out'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1506, 'tag': 'Property', 'name': 'Live.Song.Song.re_enable_automation_enabled', 'description': 'Returns true if some automated parameter has been overriden', 'path': ['Live', 'Song', 'Song', 're_enable_automation_enabled'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1507, 'tag': 'Property', 'name': 'Live.Song.Song.record_mode', 'description': 'Get/Set the state of the global recording flag.', 'path': ['Live', 'Song', 'Song', 'record_mode'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1508, 'tag': 'Property', 'name': 'Live.Song.Song.return_tracks', 'description': 'Const access to the list of available Return Tracks.', 'path': ['Live', 'Song', 'Song', 'return_tracks'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1509, 'tag': 'Property', 'name': 'Live.Song.Song.root_note', 'description': 'Set and access the root note (i.e. key) of the song used for control surfaces. The root note can be a number between 0 and 11, with 0 corresponding to C and 11 corresponding to B.', 'path': ['Live', 'Song', 'Song', 'root_note'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1510, 'tag': 'Property', 'name': 'Live.Song.Song.scale_intervals', 'description': "Reports the current scale's intervals as a list of integers, starting with the root note and representing the number of halfsteps (e.g. Major -> 0, 2, 4, 5, 7, 9, 11)", 'path': ['Live', 'Song', 'Song', 'scale_intervals'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1511, 'tag': 'Property', 'name': 'Live.Song.Song.scale_name', 'description': "Set and access the last used scale name for control surfaces. The default scale names that can be saved with a set and recalled are'Major', 'Minor', 'Dorian', 'Mixolydian' ,'Lydian' ,'Phrygian' ,'Locrian', 'Whole Tone', 'Half-whole Dim.', 'Whole-half Dim.', 'Minor Blues', 'Minor Pentatonic', 'Major Pentatonic', 'Harmonic Minor', 'Harmonic Major', 'Dorian #4', 'Phrygian Dominant', 'Melodic Minor', 'Lydian Augmented', 'Lydian Dominant', 'Super Locrian', 'Bhairav', 'Hungarian Minor', '8-Tone Spanish', 'Hirajoshi', 'In-Sen', 'Iwato', 'Kumoi', 'Pelog Selisir', 'Pelog Tembung', 'Messaien 3', 'Messaien 4', 'Messaien 5', 'Messaien 6', 'Messaien 7'", 'path': ['Live', 'Song', 'Song', 'scale_name'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1512, 'tag': 'Property', 'name': 'Live.Song.Song.scenes', 'description': 'Const access to a list of all Scenes in the Live Song.', 'path': ['Live', 'Song', 'Song', 'scenes'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1513, 'tag': 'Property', 'name': 'Live.Song.Song.select_on_launch', 'description': 'Get if Scenes and Clips should be selected when fired.', 'path': ['Live', 'Song', 'Song', 'select_on_launch'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1514, 'tag': 'Property', 'name': 'Live.Song.Song.session_automation_record', 'description': 'Returns true if automation recording is enabled.', 'path': ['Live', 'Song', 'Song', 'session_automation_record'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1515, 'tag': 'Property', 'name': 'Live.Song.Song.session_record', 'description': 'Get/Set the session record state.', 'path': ['Live', 'Song', 'Song', 'session_record'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1516, 'tag': 'Property', 'name': 'Live.Song.Song.session_record_status', 'description': 'Get the session slot-recording state.', 'path': ['Live', 'Song', 'Song', 'session_record_status'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1517, 'tag': 'Property', 'name': 'Live.Song.Song.signature_denominator', 'description': 'Get/Set access to the global signature denominator of the Song.', 'path': ['Live', 'Song', 'Song', 'signature_denominator'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1518, 'tag': 'Property', 'name': 'Live.Song.Song.signature_numerator', 'description': 'Get/Set access to the global signature numerator of the Song.', 'path': ['Live', 'Song', 'Song', 'signature_numerator'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1519, 'tag': 'Property', 'name': 'Live.Song.Song.song_length', 'description': 'Return the time of the last set event in the song, plus som extra beatsthat are usually added for better navigation in the arrangerview.', 'path': ['Live', 'Song', 'Song', 'song_length'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1520, 'tag': 'Property', 'name': 'Live.Song.Song.swing_amount', 'description': 'Get/Set access to the amount of swing that is applied when adding or quantizing notes to MIDI clips', 'path': ['Live', 'Song', 'Song', 'swing_amount'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1521, 'tag': 'Property', 'name': 'Live.Song.Song.tempo', 'description': 'Get/Set the global project tempo.', 'path': ['Live', 'Song', 'Song', 'tempo'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1522, 'tag': 'Property', 'name': 'Live.Song.Song.tracks', 'description': 'Const access to a list of all Player Tracks in the Live Song, exludingthe return and Master Track (see also Song.send_tracks and Song.master_track).At least one MIDI or Audio Track is always available.', 'path': ['Live', 'Song', 'Song', 'tracks'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1523, 'tag': 'Property', 'name': 'Live.Song.Song.view', 'description': 'Representing the view aspects of a Live document: The Session and Arrangerview.', 'path': ['Live', 'Song', 'Song', 'view'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1524, 'tag': 'Property', 'name': 'Live.Song.Song.visible_tracks', 'description': 'Const access to a list of all visible Player Tracks in the Live Song, exludingthe return and Master Track (see also Song.send_tracks and Song.master_track).At least one MIDI or Audio Track is always available.', 'path': ['Live', 'Song', 'Song', 'visible_tracks'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Property'}, {'ref': 1525, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_appointed_device_listener()', 'description': 'add_appointed_device_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;appointed_device&quot; has changed. C++ signature :  void add_appointed_device_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_appointed_device_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1526, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_arrangement_overdub_listener()', 'description': 'add_arrangement_overdub_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;arrangement_overdub&quot; has changed. C++ signature :  void add_arrangement_overdub_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_arrangement_overdub_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1527, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_back_to_arranger_listener()', 'description': 'add_back_to_arranger_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;back_to_arranger&quot; has changed. C++ signature :  void add_back_to_arranger_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_back_to_arranger_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1528, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_can_capture_midi_listener()', 'description': 'add_can_capture_midi_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;can_capture_midi&quot; has changed. C++ signature :  void add_can_capture_midi_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_can_capture_midi_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1529, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_can_jump_to_next_cue_listener()', 'description': 'add_can_jump_to_next_cue_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;can_jump_to_next_cue&quot; has changed. C++ signature :  void add_can_jump_to_next_cue_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_can_jump_to_next_cue_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1530, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_can_jump_to_prev_cue_listener()', 'description': 'add_can_jump_to_prev_cue_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;can_jump_to_prev_cue&quot; has changed. C++ signature :  void add_can_jump_to_prev_cue_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_can_jump_to_prev_cue_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1531, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_clip_trigger_quantization_listener()', 'description': 'add_clip_trigger_quantization_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;clip_trigger_quantization&quot; has changed. C++ signature :  void add_clip_trigger_quantization_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_clip_trigger_quantization_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1532, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_count_in_duration_listener()', 'description': 'add_count_in_duration_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;count_in_duration&quot; has changed. C++ signature :  void add_count_in_duration_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_count_in_duration_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1533, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_cue_points_listener()', 'description': 'add_cue_points_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;cue_points&quot; has changed. C++ signature :  void add_cue_points_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_cue_points_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1534, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_current_song_time_listener()', 'description': 'add_current_song_time_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;current_song_time&quot; has changed. C++ signature :  void add_current_song_time_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_current_song_time_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1535, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_data_listener()', 'description': 'add_data_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;data&quot; has changed. C++ signature :  void add_data_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_data_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1536, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_exclusive_arm_listener()', 'description': 'add_exclusive_arm_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;exclusive_arm&quot; has changed. C++ signature :  void add_exclusive_arm_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_exclusive_arm_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1537, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_groove_amount_listener()', 'description': 'add_groove_amount_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;groove_amount&quot; has changed. C++ signature :  void add_groove_amount_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_groove_amount_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1538, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_is_counting_in_listener()', 'description': 'add_is_counting_in_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_counting_in&quot; has changed. C++ signature :  void add_is_counting_in_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_is_counting_in_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1539, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_is_playing_listener()', 'description': 'add_is_playing_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_playing&quot; has changed. C++ signature :  void add_is_playing_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_is_playing_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1540, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_loop_length_listener()', 'description': 'add_loop_length_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;loop_length&quot; has changed. C++ signature :  void add_loop_length_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_loop_length_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1541, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_loop_listener()', 'description': 'add_loop_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;loop&quot; has changed. C++ signature :  void add_loop_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_loop_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1542, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_loop_start_listener()', 'description': 'add_loop_start_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;loop_start&quot; has changed. C++ signature :  void add_loop_start_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_loop_start_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1543, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_metronome_listener()', 'description': 'add_metronome_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;metronome&quot; has changed. C++ signature :  void add_metronome_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_metronome_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1544, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_midi_recording_quantization_listener()', 'description': 'add_midi_recording_quantization_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;midi_recording_quantization&quot; has changed. C++ signature :  void add_midi_recording_quantization_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_midi_recording_quantization_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1545, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_nudge_down_listener()', 'description': 'add_nudge_down_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;nudge_down&quot; has changed. C++ signature :  void add_nudge_down_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_nudge_down_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1546, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_nudge_up_listener()', 'description': 'add_nudge_up_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;nudge_up&quot; has changed. C++ signature :  void add_nudge_up_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_nudge_up_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1547, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_overdub_listener()', 'description': 'add_overdub_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;overdub&quot; has changed. C++ signature :  void add_overdub_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_overdub_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1548, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_punch_in_listener()', 'description': 'add_punch_in_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;punch_in&quot; has changed. C++ signature :  void add_punch_in_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_punch_in_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1549, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_punch_out_listener()', 'description': 'add_punch_out_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;punch_out&quot; has changed. C++ signature :  void add_punch_out_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_punch_out_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1550, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_re_enable_automation_enabled_listener()', 'description': 'add_re_enable_automation_enabled_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;re_enable_automation_enabled&quot; has changed. C++ signature :  void add_re_enable_automation_enabled_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_re_enable_automation_enabled_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1551, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_record_mode_listener()', 'description': 'add_record_mode_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;record_mode&quot; has changed. C++ signature :  void add_record_mode_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_record_mode_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1552, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_return_tracks_listener()', 'description': 'add_return_tracks_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;return_tracks&quot; has changed. C++ signature :  void add_return_tracks_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_return_tracks_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1553, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_root_note_listener()', 'description': 'add_root_note_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;root_note&quot; has changed. C++ signature :  void add_root_note_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_root_note_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1554, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_scale_intervals_listener()', 'description': 'add_scale_intervals_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;scale_intervals&quot; has changed. C++ signature :  void add_scale_intervals_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_scale_intervals_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1555, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_scale_name_listener()', 'description': 'add_scale_name_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;scale_name&quot; has changed. C++ signature :  void add_scale_name_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_scale_name_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1556, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_scenes_listener()', 'description': 'add_scenes_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;scenes&quot; has changed. C++ signature :  void add_scenes_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_scenes_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1557, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_session_automation_record_listener()', 'description': 'add_session_automation_record_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;session_automation_record&quot; has changed. C++ signature :  void add_session_automation_record_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_session_automation_record_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1558, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_session_record_listener()', 'description': 'add_session_record_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;session_record&quot; has changed. C++ signature :  void add_session_record_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_session_record_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1559, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_session_record_status_listener()', 'description': 'add_session_record_status_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;session_record_status&quot; has changed. C++ signature :  void add_session_record_status_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_session_record_status_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1560, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_signature_denominator_listener()', 'description': 'add_signature_denominator_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;signature_denominator&quot; has changed. C++ signature :  void add_signature_denominator_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_signature_denominator_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1561, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_signature_numerator_listener()', 'description': 'add_signature_numerator_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;signature_numerator&quot; has changed. C++ signature :  void add_signature_numerator_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_signature_numerator_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1562, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_song_length_listener()', 'description': 'add_song_length_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;song_length&quot; has changed. C++ signature :  void add_song_length_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_song_length_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1563, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_swing_amount_listener()', 'description': 'add_swing_amount_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;swing_amount&quot; has changed. C++ signature :  void add_swing_amount_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_swing_amount_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1564, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_tempo_listener()', 'description': 'add_tempo_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;tempo&quot; has changed. C++ signature :  void add_tempo_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_tempo_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1565, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_tracks_listener()', 'description': 'add_tracks_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;tracks&quot; has changed. C++ signature :  void add_tracks_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_tracks_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1566, 'tag': 'listener Method', 'name': 'Live.Song.Song.add_visible_tracks_listener()', 'description': 'add_visible_tracks_listener( (Song)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;visible_tracks&quot; has changed. C++ signature :  void add_visible_tracks_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'add_visible_tracks_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1567, 'tag': 'listener Method', 'name': 'Live.Song.Song.appointed_device_has_listener()', 'description': 'appointed_device_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;appointed_device&quot;. C++ signature :  bool appointed_device_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'appointed_device_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1568, 'tag': 'listener Method', 'name': 'Live.Song.Song.arrangement_overdub_has_listener()', 'description': 'arrangement_overdub_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;arrangement_overdub&quot;. C++ signature :  bool arrangement_overdub_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'arrangement_overdub_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1569, 'tag': 'listener Method', 'name': 'Live.Song.Song.back_to_arranger_has_listener()', 'description': 'back_to_arranger_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;back_to_arranger&quot;. C++ signature :  bool back_to_arranger_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'back_to_arranger_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1570, 'tag': 'Method', 'name': 'Live.Song.Song.begin_undo_step()', 'description': 'begin_undo_step( (Song)arg1) -> None : C++ signature :  void begin_undo_step(TPyHandle<ASong>)', 'path': ['Live', 'Song', 'Song', 'begin_undo_step()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1571, 'tag': 'listener Method', 'name': 'Live.Song.Song.can_capture_midi_has_listener()', 'description': 'can_capture_midi_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;can_capture_midi&quot;. C++ signature :  bool can_capture_midi_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'can_capture_midi_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1572, 'tag': 'listener Method', 'name': 'Live.Song.Song.can_jump_to_next_cue_has_listener()', 'description': 'can_jump_to_next_cue_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;can_jump_to_next_cue&quot;. C++ signature :  bool can_jump_to_next_cue_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'can_jump_to_next_cue_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1573, 'tag': 'listener Method', 'name': 'Live.Song.Song.can_jump_to_prev_cue_has_listener()', 'description': 'can_jump_to_prev_cue_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;can_jump_to_prev_cue&quot;. C++ signature :  bool can_jump_to_prev_cue_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'can_jump_to_prev_cue_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1574, 'tag': 'Method', 'name': 'Live.Song.Song.capture_and_insert_scene()', 'description': 'capture_and_insert_scene( (Song)arg1 [, (int)CaptureMode=Song.CaptureMode.all]) -> None : Capture currently playing clips and insert them as a new scene after the selected scene. Raises a runtime error if creating a new scene would exceed the limitations. C++ signature :  void capture_and_insert_scene(TPyHandle<ASong> [,int=Song.CaptureMode.all])', 'path': ['Live', 'Song', 'Song', 'capture_and_insert_scene()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1575, 'tag': 'Method', 'name': 'Live.Song.Song.capture_midi()', 'description': "capture_midi( (Song)arg1 [, (int)Destination=Song.CaptureDestination.auto]) -> None : Capture recently played MIDI material from audible tracks. If no Destination is given or Destination is set to CaptureDestination.auto, the captured material is inserted into the Session or Arrangement depending on which is visible. If Destination is set to CaptureDestination.session or CaptureDestination.arrangement, inserts the material into Session or Arrangement, respectively. Raises a limitation error when capturing into the Session and a new scene would have to be created but can't because it would exceed the limitations. C++ signature :  void capture_midi(TPyHandle<ASong> [,int=Song.CaptureDestination.auto])", 'path': ['Live', 'Song', 'Song', 'capture_midi()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1576, 'tag': 'listener Method', 'name': 'Live.Song.Song.clip_trigger_quantization_has_listener()', 'description': 'clip_trigger_quantization_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;clip_trigger_quantization&quot;. C++ signature :  bool clip_trigger_quantization_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'clip_trigger_quantization_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1577, 'tag': 'Method', 'name': 'Live.Song.Song.continue_playing()', 'description': 'continue_playing( (Song)arg1) -> None : Continue playing the song from the current position C++ signature :  void continue_playing(TPyHandle<ASong>)', 'path': ['Live', 'Song', 'Song', 'continue_playing()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1578, 'tag': 'listener Method', 'name': 'Live.Song.Song.count_in_duration_has_listener()', 'description': 'count_in_duration_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;count_in_duration&quot;. C++ signature :  bool count_in_duration_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'count_in_duration_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1579, 'tag': 'Method', 'name': 'Live.Song.Song.create_audio_track()', 'description': 'create_audio_track( (Song)arg1 [, (object)Index=None]) -> Track : Create a new audio track at the optional given index and return it.If the index is -1, the new track is added at the end. It will create a default audio track if possible. If the index is invalid or the new track would exceed the limitations, a limitation error is raised.If the index is missing, the track is created after the last selected item C++ signature :  TWeakPtr<TTrackPyHandle> create_audio_track(TPyHandle<ASong> [,boost::python::api::object=None])', 'path': ['Live', 'Song', 'Song', 'create_audio_track()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1580, 'tag': 'Method', 'name': 'Live.Song.Song.create_midi_track()', 'description': 'create_midi_track( (Song)arg1 [, (object)Index=None]) -> Track : Create a new midi track at the optional given index and return it.If the index is -1,  the new track is added at the end.It will create a default midi track if possible. If the index is invalid or the new track would exceed the limitations, a limitation error is raised.If the index is missing, the track is created after the last selected item C++ signature :  TWeakPtr<TTrackPyHandle> create_midi_track(TPyHandle<ASong> [,boost::python::api::object=None])', 'path': ['Live', 'Song', 'Song', 'create_midi_track()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1581, 'tag': 'Method', 'name': 'Live.Song.Song.create_return_track()', 'description': 'create_return_track( (Song)arg1) -> Track : Create a new return track at the end and return it. If the new track would exceed  the limitations, a limitation error is raised.  If the maximum number of return tracks is exceeded, a RuntimeError is raised. C++ signature :  TWeakPtr<TTrackPyHandle> create_return_track(TPyHandle<ASong>)', 'path': ['Live', 'Song', 'Song', 'create_return_track()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1582, 'tag': 'Method', 'name': 'Live.Song.Song.create_scene()', 'description': 'create_scene( (Song)arg1, (int)arg2) -> Scene : Create a new scene at the given index. If the index is -1, the new scene is added at the end. If the index is invalid or the new scene would exceed the limitations, a limitation error is raised. C++ signature :  TWeakPtr<TPyHandle<AScene> > create_scene(TPyHandle<ASong>,int)', 'path': ['Live', 'Song', 'Song', 'create_scene()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1583, 'tag': 'listener Method', 'name': 'Live.Song.Song.cue_points_has_listener()', 'description': 'cue_points_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;cue_points&quot;. C++ signature :  bool cue_points_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'cue_points_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1584, 'tag': 'listener Method', 'name': 'Live.Song.Song.current_song_time_has_listener()', 'description': 'current_song_time_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;current_song_time&quot;. C++ signature :  bool current_song_time_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'current_song_time_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1585, 'tag': 'listener Method', 'name': 'Live.Song.Song.data_has_listener()', 'description': 'data_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;data&quot;. C++ signature :  bool data_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'data_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1586, 'tag': 'Method', 'name': 'Live.Song.Song.delete_return_track()', 'description': 'delete_return_track( (Song)arg1, (int)arg2) -> None : Delete the return track with the given index. If no track with this index exists, an exception will be raised. C++ signature :  void delete_return_track(TPyHandle<ASong>,int)', 'path': ['Live', 'Song', 'Song', 'delete_return_track()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1587, 'tag': 'Method', 'name': 'Live.Song.Song.delete_scene()', 'description': 'delete_scene( (Song)arg1, (int)arg2) -> None : Delete the scene with the given index. If no scene with this index exists, an exception will be raised. C++ signature :  void delete_scene(TPyHandle<ASong>,int)', 'path': ['Live', 'Song', 'Song', 'delete_scene()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1588, 'tag': 'Method', 'name': 'Live.Song.Song.delete_track()', 'description': 'delete_track( (Song)arg1, (int)arg2) -> None : Delete the track with the given index. If no track with this index exists, an exception will be raised. C++ signature :  void delete_track(TPyHandle<ASong>,int)', 'path': ['Live', 'Song', 'Song', 'delete_track()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1589, 'tag': 'Method', 'name': 'Live.Song.Song.duplicate_scene()', 'description': 'duplicate_scene( (Song)arg1, (int)arg2) -> None : Duplicates a scene and selects the new one. Raises a limitation error if creating a new scene would exceed the limitations. C++ signature :  void duplicate_scene(TPyHandle<ASong>,int)', 'path': ['Live', 'Song', 'Song', 'duplicate_scene()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1590, 'tag': 'Method', 'name': 'Live.Song.Song.duplicate_track()', 'description': 'duplicate_track( (Song)arg1, (int)arg2) -> None : Duplicates a track and selects the new one. If the track is inside a folded group track, the group track is unfolded. Raises a limitation error if creating a new track would exceed the limitations. C++ signature :  void duplicate_track(TPyHandle<ASong>,int)', 'path': ['Live', 'Song', 'Song', 'duplicate_track()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1591, 'tag': 'Method', 'name': 'Live.Song.Song.end_undo_step()', 'description': 'end_undo_step( (Song)arg1) -> None : C++ signature :  void end_undo_step(TPyHandle<ASong>)', 'path': ['Live', 'Song', 'Song', 'end_undo_step()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1592, 'tag': 'listener Method', 'name': 'Live.Song.Song.exclusive_arm_has_listener()', 'description': 'exclusive_arm_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;exclusive_arm&quot;. C++ signature :  bool exclusive_arm_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'exclusive_arm_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1593, 'tag': 'Method', 'name': 'Live.Song.Song.find_device_position()', 'description': 'find_device_position( (Song)arg1, (Device)device, (LomObject)target, (int)target_position) -> int : Returns the closest possible position to the given target, where the device can be inserted. If inserting is not possible at all (i.e. if the device type is wrong), -1 is returned. C++ signature :  int find_device_position(TPyHandle<ASong>,TPyHandle<ADevice>,TPyHandleBase,int)', 'path': ['Live', 'Song', 'Song', 'find_device_position()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1594, 'tag': 'Method', 'name': 'Live.Song.Song.force_link_beat_time()', 'description': 'force_link_beat_time( (Song)arg1) -> None : Force the Link timeline to jump to Lives current beat time. Danger: This can cause beat time discontinuities in other connected apps. C++ signature :  void force_link_beat_time(TPyHandle<ASong>)', 'path': ['Live', 'Song', 'Song', 'force_link_beat_time()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1595, 'tag': 'Method', 'name': 'Live.Song.Song.get_beats_loop_length()', 'description': 'get_beats_loop_length( (Song)arg1) -> BeatTime : Get const access to the songs loop length, using a BeatTime class with the current global set signature. C++ signature :  NSongApi::TBeatTime get_beats_loop_length(TPyHandle<ASong>)', 'path': ['Live', 'Song', 'Song', 'get_beats_loop_length()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1596, 'tag': 'Method', 'name': 'Live.Song.Song.get_beats_loop_start()', 'description': 'get_beats_loop_start( (Song)arg1) -> BeatTime : Get const access to the songs loop start, using a BeatTime class with the current global set signature. C++ signature :  NSongApi::TBeatTime get_beats_loop_start(TPyHandle<ASong>)', 'path': ['Live', 'Song', 'Song', 'get_beats_loop_start()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1597, 'tag': 'Method', 'name': 'Live.Song.Song.get_current_beats_song_time()', 'description': 'get_current_beats_song_time( (Song)arg1) -> BeatTime : Get const access to the songs current playing position, using a BeatTime class with the current global set signature. C++ signature :  NSongApi::TBeatTime get_current_beats_song_time(TPyHandle<ASong>)', 'path': ['Live', 'Song', 'Song', 'get_current_beats_song_time()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1598, 'tag': 'Method', 'name': 'Live.Song.Song.get_current_smpte_song_time()', 'description': 'get_current_smpte_song_time( (Song)arg1, (int)arg2) -> SmptTime : Get const access to the songs current playing position, by specifying the SMPTE format in which you would like to receive the time. C++ signature :  NSongApi::TSmptTime get_current_smpte_song_time(TPyHandle<ASong>,int)', 'path': ['Live', 'Song', 'Song', 'get_current_smpte_song_time()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1599, 'tag': 'Method', 'name': 'Live.Song.Song.get_data()', 'description': 'get_data( (Song)arg1, (object)key, (object)default_value) -> object : Get data for the given key, that was previously stored using set_data. C++ signature :  boost::python::api::object get_data(TPyHandle<ASong>,TString,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'get_data()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1600, 'tag': 'listener Method', 'name': 'Live.Song.Song.groove_amount_has_listener()', 'description': 'groove_amount_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;groove_amount&quot;. C++ signature :  bool groove_amount_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'groove_amount_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1601, 'tag': 'listener Method', 'name': 'Live.Song.Song.is_counting_in_has_listener()', 'description': 'is_counting_in_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_counting_in&quot;. C++ signature :  bool is_counting_in_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'is_counting_in_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1602, 'tag': 'Method', 'name': 'Live.Song.Song.is_cue_point_selected()', 'description': 'is_cue_point_selected( (Song)arg1) -> bool : Return true if the global playing pos is currently on a cue point. C++ signature :  bool is_cue_point_selected(TPyHandle<ASong>)', 'path': ['Live', 'Song', 'Song', 'is_cue_point_selected()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1603, 'tag': 'listener Method', 'name': 'Live.Song.Song.is_playing_has_listener()', 'description': 'is_playing_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_playing&quot;. C++ signature :  bool is_playing_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'is_playing_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1604, 'tag': 'Method', 'name': 'Live.Song.Song.jump_by()', 'description': 'jump_by( (Song)arg1, (float)arg2) -> None : Set a new playing pos, relative to the current one. C++ signature :  void jump_by(TPyHandle<ASong>,double)', 'path': ['Live', 'Song', 'Song', 'jump_by()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1605, 'tag': 'Method', 'name': 'Live.Song.Song.jump_to_next_cue()', 'description': 'jump_to_next_cue( (Song)arg1) -> None : Jump to the next cue (marker) if possible. C++ signature :  void jump_to_next_cue(TPyHandle<ASong>)', 'path': ['Live', 'Song', 'Song', 'jump_to_next_cue()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1606, 'tag': 'Method', 'name': 'Live.Song.Song.jump_to_prev_cue()', 'description': 'jump_to_prev_cue( (Song)arg1) -> None : Jump to the prior cue (marker) if possible. C++ signature :  void jump_to_prev_cue(TPyHandle<ASong>)', 'path': ['Live', 'Song', 'Song', 'jump_to_prev_cue()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1607, 'tag': 'listener Method', 'name': 'Live.Song.Song.loop_has_listener()', 'description': 'loop_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;loop&quot;. C++ signature :  bool loop_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'loop_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1608, 'tag': 'listener Method', 'name': 'Live.Song.Song.loop_length_has_listener()', 'description': 'loop_length_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;loop_length&quot;. C++ signature :  bool loop_length_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'loop_length_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1609, 'tag': 'listener Method', 'name': 'Live.Song.Song.loop_start_has_listener()', 'description': 'loop_start_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;loop_start&quot;. C++ signature :  bool loop_start_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'loop_start_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1610, 'tag': 'listener Method', 'name': 'Live.Song.Song.metronome_has_listener()', 'description': 'metronome_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;metronome&quot;. C++ signature :  bool metronome_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'metronome_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1611, 'tag': 'listener Method', 'name': 'Live.Song.Song.midi_recording_quantization_has_listener()', 'description': 'midi_recording_quantization_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;midi_recording_quantization&quot;. C++ signature :  bool midi_recording_quantization_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'midi_recording_quantization_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1612, 'tag': 'Method', 'name': 'Live.Song.Song.move_device()', 'description': 'move_device( (Song)arg1, (Device)device, (LomObject)target, (int)target_position) -> int : Move a device into the target at the given position, where 0 moves it before the first device and len(devices) moves it to the end of the device chain.If the device cannot be moved to this position, the nearest possible position is chosen. If the device type is not valid, a runtime error is raised.Returns the index, where the device was moved to. C++ signature :  int move_device(TPyHandle<ASong>,TPyHandle<ADevice>,TPyHandleBase,int)', 'path': ['Live', 'Song', 'Song', 'move_device()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1613, 'tag': 'listener Method', 'name': 'Live.Song.Song.nudge_down_has_listener()', 'description': 'nudge_down_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;nudge_down&quot;. C++ signature :  bool nudge_down_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'nudge_down_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1614, 'tag': 'listener Method', 'name': 'Live.Song.Song.nudge_up_has_listener()', 'description': 'nudge_up_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;nudge_up&quot;. C++ signature :  bool nudge_up_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'nudge_up_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1615, 'tag': 'listener Method', 'name': 'Live.Song.Song.overdub_has_listener()', 'description': 'overdub_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;overdub&quot;. C++ signature :  bool overdub_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'overdub_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1616, 'tag': 'Method', 'name': 'Live.Song.Song.play_selection()', 'description': 'play_selection( (Song)arg1) -> None : Start playing the current set selection, or do nothing if no selection is set. C++ signature :  void play_selection(TPyHandle<ASong>)', 'path': ['Live', 'Song', 'Song', 'play_selection()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1617, 'tag': 'listener Method', 'name': 'Live.Song.Song.punch_in_has_listener()', 'description': 'punch_in_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;punch_in&quot;. C++ signature :  bool punch_in_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'punch_in_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1618, 'tag': 'listener Method', 'name': 'Live.Song.Song.punch_out_has_listener()', 'description': 'punch_out_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;punch_out&quot;. C++ signature :  bool punch_out_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'punch_out_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1619, 'tag': 'Method', 'name': 'Live.Song.Song.re_enable_automation()', 'description': 're_enable_automation( (Song)arg1) -> None : Discards overrides of automated parameters. C++ signature :  void re_enable_automation(TPyHandle<ASong>)', 'path': ['Live', 'Song', 'Song', 're_enable_automation()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1620, 'tag': 'listener Method', 'name': 'Live.Song.Song.re_enable_automation_enabled_has_listener()', 'description': 're_enable_automation_enabled_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;re_enable_automation_enabled&quot;. C++ signature :  bool re_enable_automation_enabled_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 're_enable_automation_enabled_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1621, 'tag': 'listener Method', 'name': 'Live.Song.Song.record_mode_has_listener()', 'description': 'record_mode_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;record_mode&quot;. C++ signature :  bool record_mode_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'record_mode_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1622, 'tag': 'Method', 'name': 'Live.Song.Song.redo()', 'description': 'redo( (Song)arg1) -> None : Redo the last action that was undone. C++ signature :  void redo(TPyHandle<ASong>)', 'path': ['Live', 'Song', 'Song', 'redo()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1623, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_appointed_device_listener()', 'description': 'remove_appointed_device_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;appointed_device&quot;. C++ signature :  void remove_appointed_device_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_appointed_device_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1624, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_arrangement_overdub_listener()', 'description': 'remove_arrangement_overdub_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;arrangement_overdub&quot;. C++ signature :  void remove_arrangement_overdub_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_arrangement_overdub_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1625, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_back_to_arranger_listener()', 'description': 'remove_back_to_arranger_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;back_to_arranger&quot;. C++ signature :  void remove_back_to_arranger_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_back_to_arranger_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1626, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_can_capture_midi_listener()', 'description': 'remove_can_capture_midi_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;can_capture_midi&quot;. C++ signature :  void remove_can_capture_midi_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_can_capture_midi_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1627, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_can_jump_to_next_cue_listener()', 'description': 'remove_can_jump_to_next_cue_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;can_jump_to_next_cue&quot;. C++ signature :  void remove_can_jump_to_next_cue_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_can_jump_to_next_cue_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1628, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_can_jump_to_prev_cue_listener()', 'description': 'remove_can_jump_to_prev_cue_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;can_jump_to_prev_cue&quot;. C++ signature :  void remove_can_jump_to_prev_cue_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_can_jump_to_prev_cue_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1629, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_clip_trigger_quantization_listener()', 'description': 'remove_clip_trigger_quantization_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;clip_trigger_quantization&quot;. C++ signature :  void remove_clip_trigger_quantization_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_clip_trigger_quantization_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1630, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_count_in_duration_listener()', 'description': 'remove_count_in_duration_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;count_in_duration&quot;. C++ signature :  void remove_count_in_duration_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_count_in_duration_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1631, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_cue_points_listener()', 'description': 'remove_cue_points_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;cue_points&quot;. C++ signature :  void remove_cue_points_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_cue_points_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1632, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_current_song_time_listener()', 'description': 'remove_current_song_time_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;current_song_time&quot;. C++ signature :  void remove_current_song_time_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_current_song_time_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1633, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_data_listener()', 'description': 'remove_data_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;data&quot;. C++ signature :  void remove_data_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_data_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1634, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_exclusive_arm_listener()', 'description': 'remove_exclusive_arm_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;exclusive_arm&quot;. C++ signature :  void remove_exclusive_arm_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_exclusive_arm_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1635, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_groove_amount_listener()', 'description': 'remove_groove_amount_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;groove_amount&quot;. C++ signature :  void remove_groove_amount_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_groove_amount_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1636, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_is_counting_in_listener()', 'description': 'remove_is_counting_in_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_counting_in&quot;. C++ signature :  void remove_is_counting_in_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_is_counting_in_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1637, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_is_playing_listener()', 'description': 'remove_is_playing_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_playing&quot;. C++ signature :  void remove_is_playing_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_is_playing_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1638, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_loop_length_listener()', 'description': 'remove_loop_length_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;loop_length&quot;. C++ signature :  void remove_loop_length_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_loop_length_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1639, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_loop_listener()', 'description': 'remove_loop_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;loop&quot;. C++ signature :  void remove_loop_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_loop_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1640, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_loop_start_listener()', 'description': 'remove_loop_start_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;loop_start&quot;. C++ signature :  void remove_loop_start_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_loop_start_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1641, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_metronome_listener()', 'description': 'remove_metronome_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;metronome&quot;. C++ signature :  void remove_metronome_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_metronome_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1642, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_midi_recording_quantization_listener()', 'description': 'remove_midi_recording_quantization_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;midi_recording_quantization&quot;. C++ signature :  void remove_midi_recording_quantization_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_midi_recording_quantization_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1643, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_nudge_down_listener()', 'description': 'remove_nudge_down_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;nudge_down&quot;. C++ signature :  void remove_nudge_down_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_nudge_down_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1644, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_nudge_up_listener()', 'description': 'remove_nudge_up_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;nudge_up&quot;. C++ signature :  void remove_nudge_up_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_nudge_up_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1645, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_overdub_listener()', 'description': 'remove_overdub_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;overdub&quot;. C++ signature :  void remove_overdub_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_overdub_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1646, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_punch_in_listener()', 'description': 'remove_punch_in_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;punch_in&quot;. C++ signature :  void remove_punch_in_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_punch_in_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1647, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_punch_out_listener()', 'description': 'remove_punch_out_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;punch_out&quot;. C++ signature :  void remove_punch_out_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_punch_out_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1648, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_re_enable_automation_enabled_listener()', 'description': 'remove_re_enable_automation_enabled_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;re_enable_automation_enabled&quot;. C++ signature :  void remove_re_enable_automation_enabled_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_re_enable_automation_enabled_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1649, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_record_mode_listener()', 'description': 'remove_record_mode_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;record_mode&quot;. C++ signature :  void remove_record_mode_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_record_mode_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1650, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_return_tracks_listener()', 'description': 'remove_return_tracks_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;return_tracks&quot;. C++ signature :  void remove_return_tracks_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_return_tracks_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1651, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_root_note_listener()', 'description': 'remove_root_note_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;root_note&quot;. C++ signature :  void remove_root_note_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_root_note_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1652, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_scale_intervals_listener()', 'description': 'remove_scale_intervals_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;scale_intervals&quot;. C++ signature :  void remove_scale_intervals_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_scale_intervals_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1653, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_scale_name_listener()', 'description': 'remove_scale_name_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;scale_name&quot;. C++ signature :  void remove_scale_name_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_scale_name_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1654, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_scenes_listener()', 'description': 'remove_scenes_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;scenes&quot;. C++ signature :  void remove_scenes_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_scenes_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1655, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_session_automation_record_listener()', 'description': 'remove_session_automation_record_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;session_automation_record&quot;. C++ signature :  void remove_session_automation_record_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_session_automation_record_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1656, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_session_record_listener()', 'description': 'remove_session_record_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;session_record&quot;. C++ signature :  void remove_session_record_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_session_record_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1657, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_session_record_status_listener()', 'description': 'remove_session_record_status_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;session_record_status&quot;. C++ signature :  void remove_session_record_status_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_session_record_status_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1658, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_signature_denominator_listener()', 'description': 'remove_signature_denominator_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;signature_denominator&quot;. C++ signature :  void remove_signature_denominator_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_signature_denominator_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1659, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_signature_numerator_listener()', 'description': 'remove_signature_numerator_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;signature_numerator&quot;. C++ signature :  void remove_signature_numerator_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_signature_numerator_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1660, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_song_length_listener()', 'description': 'remove_song_length_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;song_length&quot;. C++ signature :  void remove_song_length_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_song_length_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1661, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_swing_amount_listener()', 'description': 'remove_swing_amount_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;swing_amount&quot;. C++ signature :  void remove_swing_amount_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_swing_amount_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1662, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_tempo_listener()', 'description': 'remove_tempo_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;tempo&quot;. C++ signature :  void remove_tempo_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_tempo_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1663, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_tracks_listener()', 'description': 'remove_tracks_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;tracks&quot;. C++ signature :  void remove_tracks_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_tracks_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1664, 'tag': 'listener Method', 'name': 'Live.Song.Song.remove_visible_tracks_listener()', 'description': 'remove_visible_tracks_listener( (Song)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;visible_tracks&quot;. C++ signature :  void remove_visible_tracks_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'remove_visible_tracks_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1665, 'tag': 'listener Method', 'name': 'Live.Song.Song.return_tracks_has_listener()', 'description': 'return_tracks_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;return_tracks&quot;. C++ signature :  bool return_tracks_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'return_tracks_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1666, 'tag': 'listener Method', 'name': 'Live.Song.Song.root_note_has_listener()', 'description': 'root_note_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;root_note&quot;. C++ signature :  bool root_note_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'root_note_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1667, 'tag': 'listener Method', 'name': 'Live.Song.Song.scale_intervals_has_listener()', 'description': 'scale_intervals_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;scale_intervals&quot;. C++ signature :  bool scale_intervals_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'scale_intervals_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1668, 'tag': 'listener Method', 'name': 'Live.Song.Song.scale_name_has_listener()', 'description': 'scale_name_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;scale_name&quot;. C++ signature :  bool scale_name_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'scale_name_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1669, 'tag': 'listener Method', 'name': 'Live.Song.Song.scenes_has_listener()', 'description': 'scenes_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;scenes&quot;. C++ signature :  bool scenes_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'scenes_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1670, 'tag': 'Method', 'name': 'Live.Song.Song.scrub_by()', 'description': 'scrub_by( (Song)arg1, (float)arg2) -> None : Same as jump_by, but does not stop playback. C++ signature :  void scrub_by(TPyHandle<ASong>,double)', 'path': ['Live', 'Song', 'Song', 'scrub_by()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1671, 'tag': 'listener Method', 'name': 'Live.Song.Song.session_automation_record_has_listener()', 'description': 'session_automation_record_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;session_automation_record&quot;. C++ signature :  bool session_automation_record_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'session_automation_record_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1672, 'tag': 'listener Method', 'name': 'Live.Song.Song.session_record_has_listener()', 'description': 'session_record_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;session_record&quot;. C++ signature :  bool session_record_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'session_record_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1673, 'tag': 'listener Method', 'name': 'Live.Song.Song.session_record_status_has_listener()', 'description': 'session_record_status_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;session_record_status&quot;. C++ signature :  bool session_record_status_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'session_record_status_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1674, 'tag': 'Method', 'name': 'Live.Song.Song.set_data()', 'description': 'set_data( (Song)arg1, (object)key, (object)value) -> None : Store data for the given key in this object. The data is persistent and will be restored when loading the Live Set. C++ signature :  void set_data(TPyHandle<ASong>,TString,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'set_data()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1675, 'tag': 'Method', 'name': 'Live.Song.Song.set_or_delete_cue()', 'description': 'set_or_delete_cue( (Song)arg1) -> None : When a cue is selected, it gets deleted. If no cue is selected, a new cue is created at the current global songtime. C++ signature :  void set_or_delete_cue(TPyHandle<ASong>)', 'path': ['Live', 'Song', 'Song', 'set_or_delete_cue()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1676, 'tag': 'listener Method', 'name': 'Live.Song.Song.signature_denominator_has_listener()', 'description': 'signature_denominator_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;signature_denominator&quot;. C++ signature :  bool signature_denominator_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'signature_denominator_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1677, 'tag': 'listener Method', 'name': 'Live.Song.Song.signature_numerator_has_listener()', 'description': 'signature_numerator_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;signature_numerator&quot;. C++ signature :  bool signature_numerator_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'signature_numerator_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1678, 'tag': 'listener Method', 'name': 'Live.Song.Song.song_length_has_listener()', 'description': 'song_length_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;song_length&quot;. C++ signature :  bool song_length_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'song_length_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1679, 'tag': 'Method', 'name': 'Live.Song.Song.start_playing()', 'description': 'start_playing( (Song)arg1) -> None : Start playing from the startmarker C++ signature :  void start_playing(TPyHandle<ASong>)', 'path': ['Live', 'Song', 'Song', 'start_playing()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1680, 'tag': 'Method', 'name': 'Live.Song.Song.stop_all_clips()', 'description': 'stop_all_clips( (Song)arg1 [, (bool)Quantized=True]) -> None : Stop all playing Clips (if any) but continue playing the Song. C++ signature :  void stop_all_clips(TPyHandle<ASong> [,bool=True])', 'path': ['Live', 'Song', 'Song', 'stop_all_clips()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1681, 'tag': 'Method', 'name': 'Live.Song.Song.stop_playing()', 'description': 'stop_playing( (Song)arg1) -> None : Stop playing the Song. C++ signature :  void stop_playing(TPyHandle<ASong>)', 'path': ['Live', 'Song', 'Song', 'stop_playing()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1682, 'tag': 'listener Method', 'name': 'Live.Song.Song.swing_amount_has_listener()', 'description': 'swing_amount_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;swing_amount&quot;. C++ signature :  bool swing_amount_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'swing_amount_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1683, 'tag': 'Method', 'name': 'Live.Song.Song.tap_tempo()', 'description': 'tap_tempo( (Song)arg1) -> None : Trigger the tap tempo function. C++ signature :  void tap_tempo(TPyHandle<ASong>)', 'path': ['Live', 'Song', 'Song', 'tap_tempo()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1684, 'tag': 'listener Method', 'name': 'Live.Song.Song.tempo_has_listener()', 'description': 'tempo_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;tempo&quot;. C++ signature :  bool tempo_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'tempo_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1685, 'tag': 'listener Method', 'name': 'Live.Song.Song.tracks_has_listener()', 'description': 'tracks_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;tracks&quot;. C++ signature :  bool tracks_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'tracks_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1686, 'tag': 'Method', 'name': 'Live.Song.Song.trigger_session_record()', 'description': 'trigger_session_record( (Song)self [, (float)record_length=1.7976931348623157e+308]) -> None : Triggers a new session recording. C++ signature :  void trigger_session_record(TPyHandle<ASong> [,double=1.7976931348623157e+308])', 'path': ['Live', 'Song', 'Song', 'trigger_session_record()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1687, 'tag': 'Method', 'name': 'Live.Song.Song.undo()', 'description': 'undo( (Song)arg1) -> None : Undo the last action that was made. C++ signature :  void undo(TPyHandle<ASong>)', 'path': ['Live', 'Song', 'Song', 'undo()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'Method'}, {'ref': 1688, 'tag': 'listener Method', 'name': 'Live.Song.Song.visible_tracks_has_listener()', 'description': 'visible_tracks_has_listener( (Song)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;visible_tracks&quot;. C++ signature :  bool visible_tracks_has_listener(TPyHandle<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'visible_tracks_has_listener()'], 'hirachy': 3, 'ref_parent': 1473, 'children': [], 'group': 'listener Method'}, {'ref': 1689, 'tag': 'Class', 'name': 'Live.Song.Song.View', 'description': 'Representing the view aspects of a Live document: The Session and Arrangerview.', 'path': ['Live', 'Song', 'Song', 'View'], 'hirachy': 3, 'ref_parent': 1473, 'children': [1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721], 'group': None}, {'ref': 1690, 'tag': 'Property', 'name': 'Live.Song.Song.View._live_ptr', 'description': None, 'path': ['Live', 'Song', 'Song', 'View', '_live_ptr'], 'hirachy': 4, 'ref_parent': 1689, 'children': [], 'group': 'Property'}, {'ref': 1691, 'tag': 'Property', 'name': 'Live.Song.Song.View.canonical_parent', 'description': 'Get the canonical parent of the song view.', 'path': ['Live', 'Song', 'Song', 'View', 'canonical_parent'], 'hirachy': 4, 'ref_parent': 1689, 'children': [], 'group': 'Property'}, {'ref': 1692, 'tag': 'Property', 'name': 'Live.Song.Song.View.detail_clip', 'description': 'Get/Set the Clip that is currently visible in Lives Detailview.', 'path': ['Live', 'Song', 'Song', 'View', 'detail_clip'], 'hirachy': 4, 'ref_parent': 1689, 'children': [], 'group': 'Property'}, {'ref': 1693, 'tag': 'Property', 'name': 'Live.Song.Song.View.draw_mode', 'description': 'Get/Set if the Envelope/Note draw mode is enabled.', 'path': ['Live', 'Song', 'Song', 'View', 'draw_mode'], 'hirachy': 4, 'ref_parent': 1689, 'children': [], 'group': 'Property'}, {'ref': 1694, 'tag': 'Property', 'name': 'Live.Song.Song.View.follow_song', 'description': 'Get/Set if the Arrangerview should scroll to show the playmarker.', 'path': ['Live', 'Song', 'Song', 'View', 'follow_song'], 'hirachy': 4, 'ref_parent': 1689, 'children': [], 'group': 'Property'}, {'ref': 1695, 'tag': 'Property', 'name': 'Live.Song.Song.View.highlighted_clip_slot', 'description': 'Get/Set the clip slot, defined via the highlighted track and scene in the Session.Will be None for Master- and Sendtracks.', 'path': ['Live', 'Song', 'Song', 'View', 'highlighted_clip_slot'], 'hirachy': 4, 'ref_parent': 1689, 'children': [], 'group': 'Property'}, {'ref': 1696, 'tag': 'Property', 'name': 'Live.Song.Song.View.selected_chain', 'description': 'Get the highlighted chain if available.', 'path': ['Live', 'Song', 'Song', 'View', 'selected_chain'], 'hirachy': 4, 'ref_parent': 1689, 'children': [], 'group': 'Property'}, {'ref': 1697, 'tag': 'Property', 'name': 'Live.Song.Song.View.selected_parameter', 'description': 'Get the currently selected device parameter.', 'path': ['Live', 'Song', 'Song', 'View', 'selected_parameter'], 'hirachy': 4, 'ref_parent': 1689, 'children': [], 'group': 'Property'}, {'ref': 1698, 'tag': 'Property', 'name': 'Live.Song.Song.View.selected_scene', 'description': 'Get/Set the current selected scene in Lives Sessionview.', 'path': ['Live', 'Song', 'Song', 'View', 'selected_scene'], 'hirachy': 4, 'ref_parent': 1689, 'children': [], 'group': 'Property'}, {'ref': 1699, 'tag': 'Property', 'name': 'Live.Song.Song.View.selected_track', 'description': 'Get/Set the current selected Track in Lives Session or Arrangerview.', 'path': ['Live', 'Song', 'Song', 'View', 'selected_track'], 'hirachy': 4, 'ref_parent': 1689, 'children': [], 'group': 'Property'}, {'ref': 1700, 'tag': 'listener Method', 'name': 'Live.Song.Song.View.add_detail_clip_listener()', 'description': 'add_detail_clip_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;detail_clip&quot; has changed. C++ signature :  void add_detail_clip_listener(TPyViewData<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'View', 'add_detail_clip_listener()'], 'hirachy': 4, 'ref_parent': 1689, 'children': [], 'group': 'listener Method'}, {'ref': 1701, 'tag': 'listener Method', 'name': 'Live.Song.Song.View.add_draw_mode_listener()', 'description': 'add_draw_mode_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;draw_mode&quot; has changed. C++ signature :  void add_draw_mode_listener(TPyViewData<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'View', 'add_draw_mode_listener()'], 'hirachy': 4, 'ref_parent': 1689, 'children': [], 'group': 'listener Method'}, {'ref': 1702, 'tag': 'listener Method', 'name': 'Live.Song.Song.View.add_follow_song_listener()', 'description': 'add_follow_song_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;follow_song&quot; has changed. C++ signature :  void add_follow_song_listener(TPyViewData<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'View', 'add_follow_song_listener()'], 'hirachy': 4, 'ref_parent': 1689, 'children': [], 'group': 'listener Method'}, {'ref': 1703, 'tag': 'listener Method', 'name': 'Live.Song.Song.View.add_selected_chain_listener()', 'description': 'add_selected_chain_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;selected_chain&quot; has changed. C++ signature :  void add_selected_chain_listener(TPyViewData<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'View', 'add_selected_chain_listener()'], 'hirachy': 4, 'ref_parent': 1689, 'children': [], 'group': 'listener Method'}, {'ref': 1704, 'tag': 'listener Method', 'name': 'Live.Song.Song.View.add_selected_parameter_listener()', 'description': 'add_selected_parameter_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;selected_parameter&quot; has changed. C++ signature :  void add_selected_parameter_listener(TPyViewData<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'View', 'add_selected_parameter_listener()'], 'hirachy': 4, 'ref_parent': 1689, 'children': [], 'group': 'listener Method'}, {'ref': 1705, 'tag': 'listener Method', 'name': 'Live.Song.Song.View.add_selected_scene_listener()', 'description': 'add_selected_scene_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;selected_scene&quot; has changed. C++ signature :  void add_selected_scene_listener(TPyViewData<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'View', 'add_selected_scene_listener()'], 'hirachy': 4, 'ref_parent': 1689, 'children': [], 'group': 'listener Method'}, {'ref': 1706, 'tag': 'listener Method', 'name': 'Live.Song.Song.View.add_selected_track_listener()', 'description': 'add_selected_track_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;selected_track&quot; has changed. C++ signature :  void add_selected_track_listener(TPyViewData<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'View', 'add_selected_track_listener()'], 'hirachy': 4, 'ref_parent': 1689, 'children': [], 'group': 'listener Method'}, {'ref': 1707, 'tag': 'listener Method', 'name': 'Live.Song.Song.View.detail_clip_has_listener()', 'description': 'detail_clip_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;detail_clip&quot;. C++ signature :  bool detail_clip_has_listener(TPyViewData<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'View', 'detail_clip_has_listener()'], 'hirachy': 4, 'ref_parent': 1689, 'children': [], 'group': 'listener Method'}, {'ref': 1708, 'tag': 'listener Method', 'name': 'Live.Song.Song.View.draw_mode_has_listener()', 'description': 'draw_mode_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;draw_mode&quot;. C++ signature :  bool draw_mode_has_listener(TPyViewData<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'View', 'draw_mode_has_listener()'], 'hirachy': 4, 'ref_parent': 1689, 'children': [], 'group': 'listener Method'}, {'ref': 1709, 'tag': 'listener Method', 'name': 'Live.Song.Song.View.follow_song_has_listener()', 'description': 'follow_song_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;follow_song&quot;. C++ signature :  bool follow_song_has_listener(TPyViewData<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'View', 'follow_song_has_listener()'], 'hirachy': 4, 'ref_parent': 1689, 'children': [], 'group': 'listener Method'}, {'ref': 1710, 'tag': 'listener Method', 'name': 'Live.Song.Song.View.remove_detail_clip_listener()', 'description': 'remove_detail_clip_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;detail_clip&quot;. C++ signature :  void remove_detail_clip_listener(TPyViewData<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'View', 'remove_detail_clip_listener()'], 'hirachy': 4, 'ref_parent': 1689, 'children': [], 'group': 'listener Method'}, {'ref': 1711, 'tag': 'listener Method', 'name': 'Live.Song.Song.View.remove_draw_mode_listener()', 'description': 'remove_draw_mode_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;draw_mode&quot;. C++ signature :  void remove_draw_mode_listener(TPyViewData<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'View', 'remove_draw_mode_listener()'], 'hirachy': 4, 'ref_parent': 1689, 'children': [], 'group': 'listener Method'}, {'ref': 1712, 'tag': 'listener Method', 'name': 'Live.Song.Song.View.remove_follow_song_listener()', 'description': 'remove_follow_song_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;follow_song&quot;. C++ signature :  void remove_follow_song_listener(TPyViewData<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'View', 'remove_follow_song_listener()'], 'hirachy': 4, 'ref_parent': 1689, 'children': [], 'group': 'listener Method'}, {'ref': 1713, 'tag': 'listener Method', 'name': 'Live.Song.Song.View.remove_selected_chain_listener()', 'description': 'remove_selected_chain_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;selected_chain&quot;. C++ signature :  void remove_selected_chain_listener(TPyViewData<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'View', 'remove_selected_chain_listener()'], 'hirachy': 4, 'ref_parent': 1689, 'children': [], 'group': 'listener Method'}, {'ref': 1714, 'tag': 'listener Method', 'name': 'Live.Song.Song.View.remove_selected_parameter_listener()', 'description': 'remove_selected_parameter_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;selected_parameter&quot;. C++ signature :  void remove_selected_parameter_listener(TPyViewData<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'View', 'remove_selected_parameter_listener()'], 'hirachy': 4, 'ref_parent': 1689, 'children': [], 'group': 'listener Method'}, {'ref': 1715, 'tag': 'listener Method', 'name': 'Live.Song.Song.View.remove_selected_scene_listener()', 'description': 'remove_selected_scene_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;selected_scene&quot;. C++ signature :  void remove_selected_scene_listener(TPyViewData<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'View', 'remove_selected_scene_listener()'], 'hirachy': 4, 'ref_parent': 1689, 'children': [], 'group': 'listener Method'}, {'ref': 1716, 'tag': 'listener Method', 'name': 'Live.Song.Song.View.remove_selected_track_listener()', 'description': 'remove_selected_track_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;selected_track&quot;. C++ signature :  void remove_selected_track_listener(TPyViewData<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'View', 'remove_selected_track_listener()'], 'hirachy': 4, 'ref_parent': 1689, 'children': [], 'group': 'listener Method'}, {'ref': 1717, 'tag': 'Method', 'name': 'Live.Song.Song.View.select_device()', 'description': 'select_device( (View)arg1, (Device)arg2 [, (bool)ShouldAppointDevice=True]) -> None : Select the given device. C++ signature :  void select_device(TPyViewData<ASong>,TPyHandle<ADevice> [,bool=True])', 'path': ['Live', 'Song', 'Song', 'View', 'select_device()'], 'hirachy': 4, 'ref_parent': 1689, 'children': [], 'group': 'Method'}, {'ref': 1718, 'tag': 'listener Method', 'name': 'Live.Song.Song.View.selected_chain_has_listener()', 'description': 'selected_chain_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;selected_chain&quot;. C++ signature :  bool selected_chain_has_listener(TPyViewData<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'View', 'selected_chain_has_listener()'], 'hirachy': 4, 'ref_parent': 1689, 'children': [], 'group': 'listener Method'}, {'ref': 1719, 'tag': 'listener Method', 'name': 'Live.Song.Song.View.selected_parameter_has_listener()', 'description': 'selected_parameter_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;selected_parameter&quot;. C++ signature :  bool selected_parameter_has_listener(TPyViewData<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'View', 'selected_parameter_has_listener()'], 'hirachy': 4, 'ref_parent': 1689, 'children': [], 'group': 'listener Method'}, {'ref': 1720, 'tag': 'listener Method', 'name': 'Live.Song.Song.View.selected_scene_has_listener()', 'description': 'selected_scene_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;selected_scene&quot;. C++ signature :  bool selected_scene_has_listener(TPyViewData<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'View', 'selected_scene_has_listener()'], 'hirachy': 4, 'ref_parent': 1689, 'children': [], 'group': 'listener Method'}, {'ref': 1721, 'tag': 'listener Method', 'name': 'Live.Song.Song.View.selected_track_has_listener()', 'description': 'selected_track_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;selected_track&quot;. C++ signature :  bool selected_track_has_listener(TPyViewData<ASong>,boost::python::api::object)', 'path': ['Live', 'Song', 'Song', 'View', 'selected_track_has_listener()'], 'hirachy': 4, 'ref_parent': 1689, 'children': [], 'group': 'listener Method'}, {'ref': 1722, 'tag': 'Class', 'name': 'Live.Song.TimeFormat', 'description': None, 'path': ['Live', 'Song', 'TimeFormat'], 'hirachy': 2, 'ref_parent': 1413, 'children': [1723, 1724, 1725, 1726, 1727, 1728], 'group': None}, {'ref': 1723, 'tag': 'Value', 'name': 'Live.Song.TimeFormat.ms_time', 'description': None, 'path': ['Live', 'Song', 'TimeFormat', 'ms_time'], 'hirachy': 3, 'ref_parent': 1722, 'children': [], 'group': 'Value'}, {'ref': 1724, 'tag': 'Value', 'name': 'Live.Song.TimeFormat.smpte_24', 'description': None, 'path': ['Live', 'Song', 'TimeFormat', 'smpte_24'], 'hirachy': 3, 'ref_parent': 1722, 'children': [], 'group': 'Value'}, {'ref': 1725, 'tag': 'Value', 'name': 'Live.Song.TimeFormat.smpte_25', 'description': None, 'path': ['Live', 'Song', 'TimeFormat', 'smpte_25'], 'hirachy': 3, 'ref_parent': 1722, 'children': [], 'group': 'Value'}, {'ref': 1726, 'tag': 'Value', 'name': 'Live.Song.TimeFormat.smpte_29', 'description': None, 'path': ['Live', 'Song', 'TimeFormat', 'smpte_29'], 'hirachy': 3, 'ref_parent': 1722, 'children': [], 'group': 'Value'}, {'ref': 1727, 'tag': 'Value', 'name': 'Live.Song.TimeFormat.smpte_30', 'description': None, 'path': ['Live', 'Song', 'TimeFormat', 'smpte_30'], 'hirachy': 3, 'ref_parent': 1722, 'children': [], 'group': 'Value'}, {'ref': 1728, 'tag': 'Value', 'name': 'Live.Song.TimeFormat.smpte_30_drop', 'description': None, 'path': ['Live', 'Song', 'TimeFormat', 'smpte_30_drop'], 'hirachy': 3, 'ref_parent': 1722, 'children': [], 'group': 'Value'}, {'ref': 1729, 'tag': 'Module', 'name': 'Live.Track', 'description': None, 'path': ['Live', 'Track'], 'hirachy': 1, 'ref_parent': 0, 'children': [1730, 1732, 1737, 1740, 1744, 1747, 1751, 1760, 1763], 'group': None}, {'ref': 1730, 'tag': 'Class', 'name': 'Live.Track.DeviceContainer', 'description': 'This class is a common super class of Track and Chain', 'path': ['Live', 'Track', 'DeviceContainer'], 'hirachy': 2, 'ref_parent': 1729, 'children': [1731], 'group': None}, {'ref': 1731, 'tag': 'Property', 'name': 'Live.Track.DeviceContainer._live_ptr', 'description': None, 'path': ['Live', 'Track', 'DeviceContainer', '_live_ptr'], 'hirachy': 3, 'ref_parent': 1730, 'children': [], 'group': 'Property'}, {'ref': 1732, 'tag': 'Class', 'name': 'Live.Track.DeviceInsertMode', 'description': None, 'path': ['Live', 'Track', 'DeviceInsertMode'], 'hirachy': 2, 'ref_parent': 1729, 'children': [1733, 1734, 1735, 1736], 'group': None}, {'ref': 1733, 'tag': 'Value', 'name': 'Live.Track.DeviceInsertMode.count', 'description': None, 'path': ['Live', 'Track', 'DeviceInsertMode', 'count'], 'hirachy': 3, 'ref_parent': 1732, 'children': [], 'group': 'Value'}, {'ref': 1734, 'tag': 'Value', 'name': 'Live.Track.DeviceInsertMode.default', 'description': None, 'path': ['Live', 'Track', 'DeviceInsertMode', 'default'], 'hirachy': 3, 'ref_parent': 1732, 'children': [], 'group': 'Value'}, {'ref': 1735, 'tag': 'Value', 'name': 'Live.Track.DeviceInsertMode.selected_left', 'description': None, 'path': ['Live', 'Track', 'DeviceInsertMode', 'selected_left'], 'hirachy': 3, 'ref_parent': 1732, 'children': [], 'group': 'Value'}, {'ref': 1736, 'tag': 'Value', 'name': 'Live.Track.DeviceInsertMode.selected_right', 'description': None, 'path': ['Live', 'Track', 'DeviceInsertMode', 'selected_right'], 'hirachy': 3, 'ref_parent': 1732, 'children': [], 'group': 'Value'}, {'ref': 1737, 'tag': 'Class', 'name': 'Live.Track.RoutingChannel', 'description': 'This class represents a routing channel.', 'path': ['Live', 'Track', 'RoutingChannel'], 'hirachy': 2, 'ref_parent': 1729, 'children': [1738, 1739], 'group': None}, {'ref': 1738, 'tag': 'Property', 'name': 'Live.Track.RoutingChannel.display_name', 'description': 'Display name of routing channel.', 'path': ['Live', 'Track', 'RoutingChannel', 'display_name'], 'hirachy': 3, 'ref_parent': 1737, 'children': [], 'group': 'Property'}, {'ref': 1739, 'tag': 'Property', 'name': 'Live.Track.RoutingChannel.layout', 'description': "The routing channel's Layout, e.g., mono or stereo.", 'path': ['Live', 'Track', 'RoutingChannel', 'layout'], 'hirachy': 3, 'ref_parent': 1737, 'children': [], 'group': 'Property'}, {'ref': 1740, 'tag': 'Class', 'name': 'Live.Track.RoutingChannelLayout', 'description': None, 'path': ['Live', 'Track', 'RoutingChannelLayout'], 'hirachy': 2, 'ref_parent': 1729, 'children': [1741, 1742, 1743], 'group': None}, {'ref': 1741, 'tag': 'Value', 'name': 'Live.Track.RoutingChannelLayout.midi', 'description': None, 'path': ['Live', 'Track', 'RoutingChannelLayout', 'midi'], 'hirachy': 3, 'ref_parent': 1740, 'children': [], 'group': 'Value'}, {'ref': 1742, 'tag': 'Value', 'name': 'Live.Track.RoutingChannelLayout.mono', 'description': None, 'path': ['Live', 'Track', 'RoutingChannelLayout', 'mono'], 'hirachy': 3, 'ref_parent': 1740, 'children': [], 'group': 'Value'}, {'ref': 1743, 'tag': 'Value', 'name': 'Live.Track.RoutingChannelLayout.stereo', 'description': None, 'path': ['Live', 'Track', 'RoutingChannelLayout', 'stereo'], 'hirachy': 3, 'ref_parent': 1740, 'children': [], 'group': 'Value'}, {'ref': 1744, 'tag': 'Class', 'name': 'Live.Track.RoutingChannelVector', 'description': 'A container for returning routing channels from Live.', 'path': ['Live', 'Track', 'RoutingChannelVector'], 'hirachy': 2, 'ref_parent': 1729, 'children': [1745, 1746], 'group': None}, {'ref': 1745, 'tag': 'Method', 'name': 'Live.Track.RoutingChannelVector.append()', 'description': 'append( (RoutingChannelVector)arg1, (object)arg2) -> None : C++ signature :  void append(std::__1::vector<NRoutingApi::TRoutingChannel, std::__1::allocator<NRoutingApi::TRoutingChannel> > {lvalue},boost::python::api::object)', 'path': ['Live', 'Track', 'RoutingChannelVector', 'append()'], 'hirachy': 3, 'ref_parent': 1744, 'children': [], 'group': 'Method'}, {'ref': 1746, 'tag': 'Method', 'name': 'Live.Track.RoutingChannelVector.extend()', 'description': 'extend( (RoutingChannelVector)arg1, (object)arg2) -> None : C++ signature :  void extend(std::__1::vector<NRoutingApi::TRoutingChannel, std::__1::allocator<NRoutingApi::TRoutingChannel> > {lvalue},boost::python::api::object)', 'path': ['Live', 'Track', 'RoutingChannelVector', 'extend()'], 'hirachy': 3, 'ref_parent': 1744, 'children': [], 'group': 'Method'}, {'ref': 1747, 'tag': 'Class', 'name': 'Live.Track.RoutingType', 'description': 'This class represents a routing type.', 'path': ['Live', 'Track', 'RoutingType'], 'hirachy': 2, 'ref_parent': 1729, 'children': [1748, 1749, 1750], 'group': None}, {'ref': 1748, 'tag': 'Property', 'name': 'Live.Track.RoutingType.attached_object', 'description': 'Live object associated with the routing type.', 'path': ['Live', 'Track', 'RoutingType', 'attached_object'], 'hirachy': 3, 'ref_parent': 1747, 'children': [], 'group': 'Property'}, {'ref': 1749, 'tag': 'Property', 'name': 'Live.Track.RoutingType.category', 'description': 'Category of the routing type.', 'path': ['Live', 'Track', 'RoutingType', 'category'], 'hirachy': 3, 'ref_parent': 1747, 'children': [], 'group': 'Property'}, {'ref': 1750, 'tag': 'Property', 'name': 'Live.Track.RoutingType.display_name', 'description': 'Display name of routing type.', 'path': ['Live', 'Track', 'RoutingType', 'display_name'], 'hirachy': 3, 'ref_parent': 1747, 'children': [], 'group': 'Property'}, {'ref': 1751, 'tag': 'Class', 'name': 'Live.Track.RoutingTypeCategory', 'description': None, 'path': ['Live', 'Track', 'RoutingTypeCategory'], 'hirachy': 2, 'ref_parent': 1729, 'children': [1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759], 'group': None}, {'ref': 1752, 'tag': 'Value', 'name': 'Live.Track.RoutingTypeCategory.external', 'description': None, 'path': ['Live', 'Track', 'RoutingTypeCategory', 'external'], 'hirachy': 3, 'ref_parent': 1751, 'children': [], 'group': 'Value'}, {'ref': 1753, 'tag': 'Value', 'name': 'Live.Track.RoutingTypeCategory.invalid', 'description': None, 'path': ['Live', 'Track', 'RoutingTypeCategory', 'invalid'], 'hirachy': 3, 'ref_parent': 1751, 'children': [], 'group': 'Value'}, {'ref': 1754, 'tag': 'Value', 'name': 'Live.Track.RoutingTypeCategory.master', 'description': None, 'path': ['Live', 'Track', 'RoutingTypeCategory', 'master'], 'hirachy': 3, 'ref_parent': 1751, 'children': [], 'group': 'Value'}, {'ref': 1755, 'tag': 'Value', 'name': 'Live.Track.RoutingTypeCategory.none', 'description': None, 'path': ['Live', 'Track', 'RoutingTypeCategory', 'none'], 'hirachy': 3, 'ref_parent': 1751, 'children': [], 'group': 'Value'}, {'ref': 1756, 'tag': 'Value', 'name': 'Live.Track.RoutingTypeCategory.parent_group_track', 'description': None, 'path': ['Live', 'Track', 'RoutingTypeCategory', 'parent_group_track'], 'hirachy': 3, 'ref_parent': 1751, 'children': [], 'group': 'Value'}, {'ref': 1757, 'tag': 'Value', 'name': 'Live.Track.RoutingTypeCategory.resampling', 'description': None, 'path': ['Live', 'Track', 'RoutingTypeCategory', 'resampling'], 'hirachy': 3, 'ref_parent': 1751, 'children': [], 'group': 'Value'}, {'ref': 1758, 'tag': 'Value', 'name': 'Live.Track.RoutingTypeCategory.rewire', 'description': None, 'path': ['Live', 'Track', 'RoutingTypeCategory', 'rewire'], 'hirachy': 3, 'ref_parent': 1751, 'children': [], 'group': 'Value'}, {'ref': 1759, 'tag': 'Value', 'name': 'Live.Track.RoutingTypeCategory.track', 'description': None, 'path': ['Live', 'Track', 'RoutingTypeCategory', 'track'], 'hirachy': 3, 'ref_parent': 1751, 'children': [], 'group': 'Value'}, {'ref': 1760, 'tag': 'Class', 'name': 'Live.Track.RoutingTypeVector', 'description': 'A container for returning routing types from Live.', 'path': ['Live', 'Track', 'RoutingTypeVector'], 'hirachy': 2, 'ref_parent': 1729, 'children': [1761, 1762], 'group': None}, {'ref': 1761, 'tag': 'Method', 'name': 'Live.Track.RoutingTypeVector.append()', 'description': 'append( (RoutingTypeVector)arg1, (object)arg2) -> None : C++ signature :  void append(std::__1::vector<NRoutingApi::TRoutingType, std::__1::allocator<NRoutingApi::TRoutingType> > {lvalue},boost::python::api::object)', 'path': ['Live', 'Track', 'RoutingTypeVector', 'append()'], 'hirachy': 3, 'ref_parent': 1760, 'children': [], 'group': 'Method'}, {'ref': 1762, 'tag': 'Method', 'name': 'Live.Track.RoutingTypeVector.extend()', 'description': 'extend( (RoutingTypeVector)arg1, (object)arg2) -> None : C++ signature :  void extend(std::__1::vector<NRoutingApi::TRoutingType, std::__1::allocator<NRoutingApi::TRoutingType> > {lvalue},boost::python::api::object)', 'path': ['Live', 'Track', 'RoutingTypeVector', 'extend()'], 'hirachy': 3, 'ref_parent': 1760, 'children': [], 'group': 'Method'}, {'ref': 1763, 'tag': 'Class', 'name': 'Live.Track.Track', 'description': 'This class represents a track in Live. It can be either an Audio track, a MIDI Track, a Return Track or the Master track. The Master Track and at least one Audio or MIDI track will be always present.Return Tracks are optional.', 'path': ['Live', 'Track', 'Track'], 'hirachy': 2, 'ref_parent': 1729, 'children': [1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1960], 'group': None}, {'ref': 1764, 'tag': 'Property', 'name': 'Live.Track.Track._live_ptr', 'description': None, 'path': ['Live', 'Track', 'Track', '_live_ptr'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1765, 'tag': 'Property', 'name': 'Live.Track.Track.arm', 'description': 'Arm the track for recording. Not available for Master- and Send Tracks.', 'path': ['Live', 'Track', 'Track', 'arm'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1766, 'tag': 'Property', 'name': 'Live.Track.Track.arrangement_clips', 'description': 'const access to the list of clips in arrangement viewThe list will be empty for the master, send and group tracks.', 'path': ['Live', 'Track', 'Track', 'arrangement_clips'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1767, 'tag': 'Property', 'name': 'Live.Track.Track.available_input_routing_channels', 'description': 'Return a list of source channels for input routing.', 'path': ['Live', 'Track', 'Track', 'available_input_routing_channels'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1768, 'tag': 'Property', 'name': 'Live.Track.Track.available_input_routing_types', 'description': 'Return a list of source types for input routing.', 'path': ['Live', 'Track', 'Track', 'available_input_routing_types'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1769, 'tag': 'Property', 'name': 'Live.Track.Track.available_output_routing_channels', 'description': 'Return a list of destination channels for output routing.', 'path': ['Live', 'Track', 'Track', 'available_output_routing_channels'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1770, 'tag': 'Property', 'name': 'Live.Track.Track.available_output_routing_types', 'description': 'Return a list of destination types for output routing.', 'path': ['Live', 'Track', 'Track', 'available_output_routing_types'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1771, 'tag': 'Property', 'name': 'Live.Track.Track.can_be_armed', 'description': 'return True, if this Track has a valid arm property. Not all trackscan be armed (for example return Tracks or the Master Tracks).', 'path': ['Live', 'Track', 'Track', 'can_be_armed'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1772, 'tag': 'Property', 'name': 'Live.Track.Track.can_be_frozen', 'description': 'return True, if this Track can be frozen.', 'path': ['Live', 'Track', 'Track', 'can_be_frozen'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1773, 'tag': 'Property', 'name': 'Live.Track.Track.can_show_chains', 'description': 'return True, if this Track contains a rack instrument device that is capable of showing its chains in session view.', 'path': ['Live', 'Track', 'Track', 'can_show_chains'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1774, 'tag': 'Property', 'name': 'Live.Track.Track.canonical_parent', 'description': 'Get the canonical parent of the track.', 'path': ['Live', 'Track', 'Track', 'canonical_parent'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1775, 'tag': 'Property', 'name': 'Live.Track.Track.clip_slots', 'description': 'const access to the list of clipslots (see class AClipSlot) for this track.The list will be empty for the master and sendtracks.', 'path': ['Live', 'Track', 'Track', 'clip_slots'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1776, 'tag': 'Property', 'name': 'Live.Track.Track.color', 'description': 'Get/set access to the color of the Track (RGB).', 'path': ['Live', 'Track', 'Track', 'color'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1777, 'tag': 'Property', 'name': 'Live.Track.Track.color_index', 'description': 'Get/Set access to the color index of the track. Can be None for no color.', 'path': ['Live', 'Track', 'Track', 'color_index'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1778, 'tag': 'Property', 'name': 'Live.Track.Track.current_input_routing', 'description': 'Get/Set the name of the current active input routing.When setting a new routing, the new routing must be one of the available ones.', 'path': ['Live', 'Track', 'Track', 'current_input_routing'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1779, 'tag': 'Property', 'name': 'Live.Track.Track.current_input_sub_routing', 'description': 'Get/Set the current active input sub routing.When setting a new routing, the new routing must be one of the available ones.', 'path': ['Live', 'Track', 'Track', 'current_input_sub_routing'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1780, 'tag': 'Property', 'name': 'Live.Track.Track.current_monitoring_state', 'description': "Get/Set the track's current monitoring state.", 'path': ['Live', 'Track', 'Track', 'current_monitoring_state'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1781, 'tag': 'Property', 'name': 'Live.Track.Track.current_output_routing', 'description': 'Get/Set the current active output routing.When setting a new routing, the new routing must be one of the available ones.', 'path': ['Live', 'Track', 'Track', 'current_output_routing'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1782, 'tag': 'Property', 'name': 'Live.Track.Track.current_output_sub_routing', 'description': 'Get/Set the current active output sub routing.When setting a new routing, the new routing must be one of the available ones.', 'path': ['Live', 'Track', 'Track', 'current_output_sub_routing'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1783, 'tag': 'Property', 'name': 'Live.Track.Track.devices', 'description': "Return const access to all available Devices that are present in the TracksDevicechain. This tuple will also include the 'mixer_device' that every Trackalways has.", 'path': ['Live', 'Track', 'Track', 'devices'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1784, 'tag': 'Property', 'name': 'Live.Track.Track.fired_slot_index', 'description': "const access to the index of the fired (and thus blinking) clipslot in this track.This index is -1 if no slot is fired and -2 if the track's stop button has been fired.", 'path': ['Live', 'Track', 'Track', 'fired_slot_index'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1785, 'tag': 'Property', 'name': 'Live.Track.Track.fold_state', 'description': 'Get/Set whether the track is folded or not. Only available if is_foldable is True.', 'path': ['Live', 'Track', 'Track', 'fold_state'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1786, 'tag': 'Property', 'name': 'Live.Track.Track.group_track', 'description': 'return the group track if is_grouped.', 'path': ['Live', 'Track', 'Track', 'group_track'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1787, 'tag': 'Property', 'name': 'Live.Track.Track.has_audio_input', 'description': 'return True, if this Track can be feed with an Audio signal. This istrue for all Audio Tracks.', 'path': ['Live', 'Track', 'Track', 'has_audio_input'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1788, 'tag': 'Property', 'name': 'Live.Track.Track.has_audio_output', 'description': 'return True, if this Track sends out an Audio signal. This istrue for all Audio Tracks, and MIDI tracks with an Instrument.', 'path': ['Live', 'Track', 'Track', 'has_audio_output'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1789, 'tag': 'Property', 'name': 'Live.Track.Track.has_midi_input', 'description': 'return True, if this Track can be feed with an Audio signal. This istrue for all MIDI Tracks.', 'path': ['Live', 'Track', 'Track', 'has_midi_input'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1790, 'tag': 'Property', 'name': 'Live.Track.Track.has_midi_output', 'description': 'return True, if this Track sends out MIDI events. This istrue for all MIDI Tracks with no Instruments.', 'path': ['Live', 'Track', 'Track', 'has_midi_output'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1791, 'tag': 'Property', 'name': 'Live.Track.Track.implicit_arm', 'description': 'Arm the track for recording. When The track is implicitly armed, it showsin a weaker color in the live GUI and is not saved in the set.', 'path': ['Live', 'Track', 'Track', 'implicit_arm'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1792, 'tag': 'Property', 'name': 'Live.Track.Track.input_meter_left', 'description': 'Momentary value of left input channel meter, 0.0 to 1.0. For Audio Tracks only.', 'path': ['Live', 'Track', 'Track', 'input_meter_left'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1793, 'tag': 'Property', 'name': 'Live.Track.Track.input_meter_level', 'description': 'Return the MIDI or Audio meter value of the Tracks input, depending on thetype of the Track input. Meter values (MIDI or Audio) are always scaledfrom 0.0 to 1.0.', 'path': ['Live', 'Track', 'Track', 'input_meter_level'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1794, 'tag': 'Property', 'name': 'Live.Track.Track.input_meter_right', 'description': 'Momentary value of right input channel meter, 0.0 to 1.0. For Audio Tracks only.', 'path': ['Live', 'Track', 'Track', 'input_meter_right'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1795, 'tag': 'Property', 'name': 'Live.Track.Track.input_routing_channel', 'description': "Get and set the current source channel for input routing.Raises ValueError if the type isn't one of the current values inavailable_input_routing_channels.", 'path': ['Live', 'Track', 'Track', 'input_routing_channel'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1796, 'tag': 'Property', 'name': 'Live.Track.Track.input_routing_type', 'description': "Get and set the current source type for input routing.Raises ValueError if the type isn't one of the current values inavailable_input_routing_types.", 'path': ['Live', 'Track', 'Track', 'input_routing_type'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1797, 'tag': 'Property', 'name': 'Live.Track.Track.input_routings', 'description': 'Const access to the list of available input routings.', 'path': ['Live', 'Track', 'Track', 'input_routings'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1798, 'tag': 'Property', 'name': 'Live.Track.Track.input_sub_routings', 'description': 'Return a list of all available input sub routings.', 'path': ['Live', 'Track', 'Track', 'input_sub_routings'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1799, 'tag': 'Property', 'name': 'Live.Track.Track.is_foldable', 'description': 'return True if the track can be (un)folded to hide/reveal contained tracks.', 'path': ['Live', 'Track', 'Track', 'is_foldable'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1800, 'tag': 'Property', 'name': 'Live.Track.Track.is_frozen', 'description': "return True if this Track is currently frozen. No changes should be applied to the track's devices or clips while it is frozen.", 'path': ['Live', 'Track', 'Track', 'is_frozen'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1801, 'tag': 'Property', 'name': 'Live.Track.Track.is_grouped', 'description': 'return True if this Track is current part of a group track.', 'path': ['Live', 'Track', 'Track', 'is_grouped'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1802, 'tag': 'Property', 'name': 'Live.Track.Track.is_part_of_selection', 'description': 'return False if the track is not selected.', 'path': ['Live', 'Track', 'Track', 'is_part_of_selection'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1803, 'tag': 'Property', 'name': 'Live.Track.Track.is_showing_chains', 'description': 'Get/Set whether a track with a rack device is showing its chains in session view.', 'path': ['Live', 'Track', 'Track', 'is_showing_chains'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1804, 'tag': 'Property', 'name': 'Live.Track.Track.is_visible', 'description': 'return False if the track is hidden within a folded group track.', 'path': ['Live', 'Track', 'Track', 'is_visible'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1805, 'tag': 'Property', 'name': 'Live.Track.Track.mixer_device', 'description': 'Return access to the special Device that every Track has: This Device containsthe Volume, Pan, Sendamounts, and Crossfade assignment parameters.', 'path': ['Live', 'Track', 'Track', 'mixer_device'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1806, 'tag': 'Property', 'name': 'Live.Track.Track.mute', 'description': 'Mute/unmute the track.', 'path': ['Live', 'Track', 'Track', 'mute'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1807, 'tag': 'Property', 'name': 'Live.Track.Track.muted_via_solo', 'description': 'Returns true if the track is muted because another track is soloed.', 'path': ['Live', 'Track', 'Track', 'muted_via_solo'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1808, 'tag': 'Property', 'name': 'Live.Track.Track.name', 'description': 'Read/write access to the name of the Track, as visible in the track header.', 'path': ['Live', 'Track', 'Track', 'name'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1809, 'tag': 'Property', 'name': 'Live.Track.Track.output_meter_left', 'description': 'Momentary value of left output channel meter, 0.0 to 1.0.For tracks with audio output only.', 'path': ['Live', 'Track', 'Track', 'output_meter_left'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1810, 'tag': 'Property', 'name': 'Live.Track.Track.output_meter_level', 'description': 'Return the MIDI or Audio meter value of the Track output (behind themixer_device), depending on the type of the Track input, this can be a MIDIor Audio meter. Meter values (MIDI or Audio) are always scaled from 0.0 to 1.0.', 'path': ['Live', 'Track', 'Track', 'output_meter_level'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1811, 'tag': 'Property', 'name': 'Live.Track.Track.output_meter_right', 'description': 'Momentary value of right output channel meter, 0.0 to 1.0.For tracks with audio output only.', 'path': ['Live', 'Track', 'Track', 'output_meter_right'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1812, 'tag': 'Property', 'name': 'Live.Track.Track.output_routing_channel', 'description': "Get and set the current destination channel for output routing.Raises ValueError if the channel isn't one of the current values inavailable_output_routing_channels.", 'path': ['Live', 'Track', 'Track', 'output_routing_channel'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1813, 'tag': 'Property', 'name': 'Live.Track.Track.output_routing_type', 'description': "Get and set the current destination type for output routing.Raises ValueError if the type isn't one of the current values inavailable_output_routing_types.", 'path': ['Live', 'Track', 'Track', 'output_routing_type'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1814, 'tag': 'Property', 'name': 'Live.Track.Track.output_routings', 'description': 'Const access to the list of all available output routings.', 'path': ['Live', 'Track', 'Track', 'output_routings'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1815, 'tag': 'Property', 'name': 'Live.Track.Track.output_sub_routings', 'description': 'Return a list of all available output sub routings.', 'path': ['Live', 'Track', 'Track', 'output_sub_routings'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1816, 'tag': 'Property', 'name': 'Live.Track.Track.playing_slot_index', 'description': 'const access to the index of the currently playing clip in the track.Will be -1 when no clip is playing.', 'path': ['Live', 'Track', 'Track', 'playing_slot_index'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1817, 'tag': 'Property', 'name': 'Live.Track.Track.solo', 'description': 'Get/Set the solo status of the track. Note that this will not disable thesolo state of any other track. If you want exclusive solo, you have to disable the solo state of the other Tracks manually.', 'path': ['Live', 'Track', 'Track', 'solo'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1818, 'tag': 'Property', 'name': 'Live.Track.Track.view', 'description': 'Representing the view aspects of a Track.', 'path': ['Live', 'Track', 'Track', 'view'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Property'}, {'ref': 1819, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_arm_listener()', 'description': 'add_arm_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;arm&quot; has changed. C++ signature :  void add_arm_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_arm_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1820, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_arrangement_clips_listener()', 'description': 'add_arrangement_clips_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;arrangement_clips&quot; has changed. C++ signature :  void add_arrangement_clips_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_arrangement_clips_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1821, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_available_input_routing_channels_listener()', 'description': 'add_available_input_routing_channels_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;available_input_routing_channels&quot; has changed. C++ signature :  void add_available_input_routing_channels_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_available_input_routing_channels_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1822, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_available_input_routing_types_listener()', 'description': 'add_available_input_routing_types_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;available_input_routing_types&quot; has changed. C++ signature :  void add_available_input_routing_types_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_available_input_routing_types_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1823, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_available_output_routing_channels_listener()', 'description': 'add_available_output_routing_channels_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;available_output_routing_channels&quot; has changed. C++ signature :  void add_available_output_routing_channels_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_available_output_routing_channels_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1824, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_available_output_routing_types_listener()', 'description': 'add_available_output_routing_types_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;available_output_routing_types&quot; has changed. C++ signature :  void add_available_output_routing_types_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_available_output_routing_types_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1825, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_clip_slots_listener()', 'description': 'add_clip_slots_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;clip_slots&quot; has changed. C++ signature :  void add_clip_slots_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_clip_slots_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1826, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_color_index_listener()', 'description': 'add_color_index_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;color_index&quot; has changed. C++ signature :  void add_color_index_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_color_index_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1827, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_color_listener()', 'description': 'add_color_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;color&quot; has changed. C++ signature :  void add_color_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_color_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1828, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_current_input_routing_listener()', 'description': 'add_current_input_routing_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;current_input_routing&quot; has changed. C++ signature :  void add_current_input_routing_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_current_input_routing_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1829, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_current_input_sub_routing_listener()', 'description': 'add_current_input_sub_routing_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;current_input_sub_routing&quot; has changed. C++ signature :  void add_current_input_sub_routing_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_current_input_sub_routing_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1830, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_current_monitoring_state_listener()', 'description': 'add_current_monitoring_state_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;current_monitoring_state&quot; has changed. C++ signature :  void add_current_monitoring_state_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_current_monitoring_state_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1831, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_current_output_routing_listener()', 'description': 'add_current_output_routing_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;current_output_routing&quot; has changed. C++ signature :  void add_current_output_routing_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_current_output_routing_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1832, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_current_output_sub_routing_listener()', 'description': 'add_current_output_sub_routing_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;current_output_sub_routing&quot; has changed. C++ signature :  void add_current_output_sub_routing_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_current_output_sub_routing_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1833, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_data_listener()', 'description': 'add_data_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;data&quot; has changed. C++ signature :  void add_data_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_data_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1834, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_devices_listener()', 'description': 'add_devices_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;devices&quot; has changed. C++ signature :  void add_devices_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_devices_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1835, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_fired_slot_index_listener()', 'description': 'add_fired_slot_index_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;fired_slot_index&quot; has changed. C++ signature :  void add_fired_slot_index_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_fired_slot_index_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1836, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_has_audio_input_listener()', 'description': 'add_has_audio_input_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;has_audio_input&quot; has changed. C++ signature :  void add_has_audio_input_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_has_audio_input_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1837, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_has_audio_output_listener()', 'description': 'add_has_audio_output_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;has_audio_output&quot; has changed. C++ signature :  void add_has_audio_output_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_has_audio_output_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1838, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_has_midi_input_listener()', 'description': 'add_has_midi_input_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;has_midi_input&quot; has changed. C++ signature :  void add_has_midi_input_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_has_midi_input_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1839, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_has_midi_output_listener()', 'description': 'add_has_midi_output_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;has_midi_output&quot; has changed. C++ signature :  void add_has_midi_output_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_has_midi_output_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1840, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_implicit_arm_listener()', 'description': 'add_implicit_arm_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;implicit_arm&quot; has changed. C++ signature :  void add_implicit_arm_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_implicit_arm_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1841, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_input_meter_left_listener()', 'description': 'add_input_meter_left_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;input_meter_left&quot; has changed. C++ signature :  void add_input_meter_left_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_input_meter_left_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1842, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_input_meter_level_listener()', 'description': 'add_input_meter_level_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;input_meter_level&quot; has changed. C++ signature :  void add_input_meter_level_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_input_meter_level_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1843, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_input_meter_right_listener()', 'description': 'add_input_meter_right_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;input_meter_right&quot; has changed. C++ signature :  void add_input_meter_right_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_input_meter_right_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1844, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_input_routing_channel_listener()', 'description': 'add_input_routing_channel_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;input_routing_channel&quot; has changed. C++ signature :  void add_input_routing_channel_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_input_routing_channel_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1845, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_input_routing_type_listener()', 'description': 'add_input_routing_type_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;input_routing_type&quot; has changed. C++ signature :  void add_input_routing_type_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_input_routing_type_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1846, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_input_routings_listener()', 'description': 'add_input_routings_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;input_routings&quot; has changed. C++ signature :  void add_input_routings_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_input_routings_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1847, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_input_sub_routings_listener()', 'description': 'add_input_sub_routings_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;input_sub_routings&quot; has changed. C++ signature :  void add_input_sub_routings_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_input_sub_routings_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1848, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_is_frozen_listener()', 'description': 'add_is_frozen_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_frozen&quot; has changed. C++ signature :  void add_is_frozen_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_is_frozen_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1849, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_is_showing_chains_listener()', 'description': 'add_is_showing_chains_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_showing_chains&quot; has changed. C++ signature :  void add_is_showing_chains_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_is_showing_chains_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1850, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_mute_listener()', 'description': 'add_mute_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;mute&quot; has changed. C++ signature :  void add_mute_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_mute_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1851, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_muted_via_solo_listener()', 'description': 'add_muted_via_solo_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;muted_via_solo&quot; has changed. C++ signature :  void add_muted_via_solo_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_muted_via_solo_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1852, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_name_listener()', 'description': 'add_name_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_name_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1853, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_output_meter_left_listener()', 'description': 'add_output_meter_left_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;output_meter_left&quot; has changed. C++ signature :  void add_output_meter_left_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_output_meter_left_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1854, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_output_meter_level_listener()', 'description': 'add_output_meter_level_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;output_meter_level&quot; has changed. C++ signature :  void add_output_meter_level_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_output_meter_level_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1855, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_output_meter_right_listener()', 'description': 'add_output_meter_right_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;output_meter_right&quot; has changed. C++ signature :  void add_output_meter_right_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_output_meter_right_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1856, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_output_routing_channel_listener()', 'description': 'add_output_routing_channel_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;output_routing_channel&quot; has changed. C++ signature :  void add_output_routing_channel_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_output_routing_channel_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1857, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_output_routing_type_listener()', 'description': 'add_output_routing_type_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;output_routing_type&quot; has changed. C++ signature :  void add_output_routing_type_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_output_routing_type_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1858, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_output_routings_listener()', 'description': 'add_output_routings_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;output_routings&quot; has changed. C++ signature :  void add_output_routings_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_output_routings_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1859, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_output_sub_routings_listener()', 'description': 'add_output_sub_routings_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;output_sub_routings&quot; has changed. C++ signature :  void add_output_sub_routings_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_output_sub_routings_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1860, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_playing_slot_index_listener()', 'description': 'add_playing_slot_index_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;playing_slot_index&quot; has changed. C++ signature :  void add_playing_slot_index_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_playing_slot_index_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1861, 'tag': 'listener Method', 'name': 'Live.Track.Track.add_solo_listener()', 'description': 'add_solo_listener( (Track)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;solo&quot; has changed. C++ signature :  void add_solo_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'add_solo_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1862, 'tag': 'listener Method', 'name': 'Live.Track.Track.arm_has_listener()', 'description': 'arm_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;arm&quot;. C++ signature :  bool arm_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'arm_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1863, 'tag': 'listener Method', 'name': 'Live.Track.Track.arrangement_clips_has_listener()', 'description': 'arrangement_clips_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;arrangement_clips&quot;. C++ signature :  bool arrangement_clips_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'arrangement_clips_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1864, 'tag': 'listener Method', 'name': 'Live.Track.Track.available_input_routing_channels_has_listener()', 'description': 'available_input_routing_channels_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;available_input_routing_channels&quot;. C++ signature :  bool available_input_routing_channels_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'available_input_routing_channels_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1865, 'tag': 'listener Method', 'name': 'Live.Track.Track.available_input_routing_types_has_listener()', 'description': 'available_input_routing_types_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;available_input_routing_types&quot;. C++ signature :  bool available_input_routing_types_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'available_input_routing_types_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1866, 'tag': 'listener Method', 'name': 'Live.Track.Track.available_output_routing_channels_has_listener()', 'description': 'available_output_routing_channels_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;available_output_routing_channels&quot;. C++ signature :  bool available_output_routing_channels_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'available_output_routing_channels_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1867, 'tag': 'listener Method', 'name': 'Live.Track.Track.available_output_routing_types_has_listener()', 'description': 'available_output_routing_types_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;available_output_routing_types&quot;. C++ signature :  bool available_output_routing_types_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'available_output_routing_types_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1868, 'tag': 'listener Method', 'name': 'Live.Track.Track.clip_slots_has_listener()', 'description': 'clip_slots_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;clip_slots&quot;. C++ signature :  bool clip_slots_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'clip_slots_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1869, 'tag': 'listener Method', 'name': 'Live.Track.Track.color_has_listener()', 'description': 'color_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;color&quot;. C++ signature :  bool color_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'color_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1870, 'tag': 'listener Method', 'name': 'Live.Track.Track.color_index_has_listener()', 'description': 'color_index_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;color_index&quot;. C++ signature :  bool color_index_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'color_index_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1871, 'tag': 'listener Method', 'name': 'Live.Track.Track.current_input_routing_has_listener()', 'description': 'current_input_routing_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;current_input_routing&quot;. C++ signature :  bool current_input_routing_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'current_input_routing_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1872, 'tag': 'listener Method', 'name': 'Live.Track.Track.current_input_sub_routing_has_listener()', 'description': 'current_input_sub_routing_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;current_input_sub_routing&quot;. C++ signature :  bool current_input_sub_routing_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'current_input_sub_routing_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1873, 'tag': 'listener Method', 'name': 'Live.Track.Track.current_monitoring_state_has_listener()', 'description': 'current_monitoring_state_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;current_monitoring_state&quot;. C++ signature :  bool current_monitoring_state_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'current_monitoring_state_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1874, 'tag': 'listener Method', 'name': 'Live.Track.Track.current_output_routing_has_listener()', 'description': 'current_output_routing_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;current_output_routing&quot;. C++ signature :  bool current_output_routing_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'current_output_routing_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1875, 'tag': 'listener Method', 'name': 'Live.Track.Track.current_output_sub_routing_has_listener()', 'description': 'current_output_sub_routing_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;current_output_sub_routing&quot;. C++ signature :  bool current_output_sub_routing_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'current_output_sub_routing_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1876, 'tag': 'listener Method', 'name': 'Live.Track.Track.data_has_listener()', 'description': 'data_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;data&quot;. C++ signature :  bool data_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'data_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1877, 'tag': 'Method', 'name': 'Live.Track.Track.delete_clip()', 'description': 'delete_clip( (Track)arg1, (Clip)arg2) -> None : Delete the given clip. Raises a runtime error when the clip belongs to another track. C++ signature :  void delete_clip(TTrackPyHandle,TPyHandle<AClip>)', 'path': ['Live', 'Track', 'Track', 'delete_clip()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Method'}, {'ref': 1878, 'tag': 'Method', 'name': 'Live.Track.Track.delete_device()', 'description': "delete_device( (Track)arg1, (int)arg2) -> None : Delete a device identified by the index in the 'devices' list. C++ signature :  void delete_device(TTrackPyHandle,int)", 'path': ['Live', 'Track', 'Track', 'delete_device()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Method'}, {'ref': 1879, 'tag': 'listener Method', 'name': 'Live.Track.Track.devices_has_listener()', 'description': 'devices_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;devices&quot;. C++ signature :  bool devices_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'devices_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1880, 'tag': 'Method', 'name': 'Live.Track.Track.duplicate_clip_slot()', 'description': 'duplicate_clip_slot( (Track)arg1, (int)arg2) -> int : Duplicate a clip and put it into the next free slot and return the index of the destination slot. A new scene is created if no free slot is available. If creating the new scene would exceed the limitations, a runtime error is raised. C++ signature :  int duplicate_clip_slot(TTrackPyHandle,int)', 'path': ['Live', 'Track', 'Track', 'duplicate_clip_slot()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Method'}, {'ref': 1881, 'tag': 'Method', 'name': 'Live.Track.Track.duplicate_clip_to_arrangement()', 'description': 'duplicate_clip_to_arrangement( (Track)self, (Clip)clip, (float)destination_time) -> Clip : Duplicate the given clip into the arrangement of this track at the provided destination time and return it. When the type of the clip and the type of the track are incompatible, a runtime error is raised. C++ signature :  TWeakPtr<TPyHandle<AClip> > duplicate_clip_to_arrangement(TTrackPyHandle,TPyHandle<AClip>,double)', 'path': ['Live', 'Track', 'Track', 'duplicate_clip_to_arrangement()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Method'}, {'ref': 1882, 'tag': 'listener Method', 'name': 'Live.Track.Track.fired_slot_index_has_listener()', 'description': 'fired_slot_index_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;fired_slot_index&quot;. C++ signature :  bool fired_slot_index_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'fired_slot_index_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1883, 'tag': 'Method', 'name': 'Live.Track.Track.get_data()', 'description': 'get_data( (Track)arg1, (object)key, (object)default_value) -> object : Get data for the given key, that was previously stored using set_data. C++ signature :  boost::python::api::object get_data(TTrackPyHandle,TString,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'get_data()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Method'}, {'ref': 1884, 'tag': 'listener Method', 'name': 'Live.Track.Track.has_audio_input_has_listener()', 'description': 'has_audio_input_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;has_audio_input&quot;. C++ signature :  bool has_audio_input_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'has_audio_input_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1885, 'tag': 'listener Method', 'name': 'Live.Track.Track.has_audio_output_has_listener()', 'description': 'has_audio_output_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;has_audio_output&quot;. C++ signature :  bool has_audio_output_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'has_audio_output_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1886, 'tag': 'listener Method', 'name': 'Live.Track.Track.has_midi_input_has_listener()', 'description': 'has_midi_input_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;has_midi_input&quot;. C++ signature :  bool has_midi_input_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'has_midi_input_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1887, 'tag': 'listener Method', 'name': 'Live.Track.Track.has_midi_output_has_listener()', 'description': 'has_midi_output_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;has_midi_output&quot;. C++ signature :  bool has_midi_output_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'has_midi_output_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1888, 'tag': 'listener Method', 'name': 'Live.Track.Track.implicit_arm_has_listener()', 'description': 'implicit_arm_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;implicit_arm&quot;. C++ signature :  bool implicit_arm_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'implicit_arm_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1889, 'tag': 'listener Method', 'name': 'Live.Track.Track.input_meter_left_has_listener()', 'description': 'input_meter_left_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;input_meter_left&quot;. C++ signature :  bool input_meter_left_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'input_meter_left_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1890, 'tag': 'listener Method', 'name': 'Live.Track.Track.input_meter_level_has_listener()', 'description': 'input_meter_level_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;input_meter_level&quot;. C++ signature :  bool input_meter_level_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'input_meter_level_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1891, 'tag': 'listener Method', 'name': 'Live.Track.Track.input_meter_right_has_listener()', 'description': 'input_meter_right_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;input_meter_right&quot;. C++ signature :  bool input_meter_right_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'input_meter_right_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1892, 'tag': 'listener Method', 'name': 'Live.Track.Track.input_routing_channel_has_listener()', 'description': 'input_routing_channel_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;input_routing_channel&quot;. C++ signature :  bool input_routing_channel_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'input_routing_channel_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1893, 'tag': 'listener Method', 'name': 'Live.Track.Track.input_routing_type_has_listener()', 'description': 'input_routing_type_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;input_routing_type&quot;. C++ signature :  bool input_routing_type_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'input_routing_type_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1894, 'tag': 'listener Method', 'name': 'Live.Track.Track.input_routings_has_listener()', 'description': 'input_routings_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;input_routings&quot;. C++ signature :  bool input_routings_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'input_routings_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1895, 'tag': 'listener Method', 'name': 'Live.Track.Track.input_sub_routings_has_listener()', 'description': 'input_sub_routings_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;input_sub_routings&quot;. C++ signature :  bool input_sub_routings_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'input_sub_routings_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1896, 'tag': 'listener Method', 'name': 'Live.Track.Track.is_frozen_has_listener()', 'description': 'is_frozen_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_frozen&quot;. C++ signature :  bool is_frozen_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'is_frozen_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1897, 'tag': 'listener Method', 'name': 'Live.Track.Track.is_showing_chains_has_listener()', 'description': 'is_showing_chains_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_showing_chains&quot;. C++ signature :  bool is_showing_chains_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'is_showing_chains_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1898, 'tag': 'Method', 'name': 'Live.Track.Track.jump_in_running_session_clip()', 'description': 'jump_in_running_session_clip( (Track)arg1, (float)arg2) -> None : Jump forward or backward in the currently running Sessionclip (if any) by the specified relative amount in beats. Does nothing if no Session Clip is currently running. C++ signature :  void jump_in_running_session_clip(TTrackPyHandle,double)', 'path': ['Live', 'Track', 'Track', 'jump_in_running_session_clip()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Method'}, {'ref': 1899, 'tag': 'listener Method', 'name': 'Live.Track.Track.mute_has_listener()', 'description': 'mute_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;mute&quot;. C++ signature :  bool mute_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'mute_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1900, 'tag': 'listener Method', 'name': 'Live.Track.Track.muted_via_solo_has_listener()', 'description': 'muted_via_solo_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;muted_via_solo&quot;. C++ signature :  bool muted_via_solo_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'muted_via_solo_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1901, 'tag': 'listener Method', 'name': 'Live.Track.Track.name_has_listener()', 'description': 'name_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'name_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1902, 'tag': 'listener Method', 'name': 'Live.Track.Track.output_meter_left_has_listener()', 'description': 'output_meter_left_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;output_meter_left&quot;. C++ signature :  bool output_meter_left_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'output_meter_left_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1903, 'tag': 'listener Method', 'name': 'Live.Track.Track.output_meter_level_has_listener()', 'description': 'output_meter_level_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;output_meter_level&quot;. C++ signature :  bool output_meter_level_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'output_meter_level_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1904, 'tag': 'listener Method', 'name': 'Live.Track.Track.output_meter_right_has_listener()', 'description': 'output_meter_right_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;output_meter_right&quot;. C++ signature :  bool output_meter_right_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'output_meter_right_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1905, 'tag': 'listener Method', 'name': 'Live.Track.Track.output_routing_channel_has_listener()', 'description': 'output_routing_channel_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;output_routing_channel&quot;. C++ signature :  bool output_routing_channel_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'output_routing_channel_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1906, 'tag': 'listener Method', 'name': 'Live.Track.Track.output_routing_type_has_listener()', 'description': 'output_routing_type_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;output_routing_type&quot;. C++ signature :  bool output_routing_type_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'output_routing_type_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1907, 'tag': 'listener Method', 'name': 'Live.Track.Track.output_routings_has_listener()', 'description': 'output_routings_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;output_routings&quot;. C++ signature :  bool output_routings_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'output_routings_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1908, 'tag': 'listener Method', 'name': 'Live.Track.Track.output_sub_routings_has_listener()', 'description': 'output_sub_routings_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;output_sub_routings&quot;. C++ signature :  bool output_sub_routings_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'output_sub_routings_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1909, 'tag': 'listener Method', 'name': 'Live.Track.Track.playing_slot_index_has_listener()', 'description': 'playing_slot_index_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;playing_slot_index&quot;. C++ signature :  bool playing_slot_index_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'playing_slot_index_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1910, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_arm_listener()', 'description': 'remove_arm_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;arm&quot;. C++ signature :  void remove_arm_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_arm_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1911, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_arrangement_clips_listener()', 'description': 'remove_arrangement_clips_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;arrangement_clips&quot;. C++ signature :  void remove_arrangement_clips_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_arrangement_clips_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1912, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_available_input_routing_channels_listener()', 'description': 'remove_available_input_routing_channels_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;available_input_routing_channels&quot;. C++ signature :  void remove_available_input_routing_channels_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_available_input_routing_channels_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1913, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_available_input_routing_types_listener()', 'description': 'remove_available_input_routing_types_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;available_input_routing_types&quot;. C++ signature :  void remove_available_input_routing_types_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_available_input_routing_types_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1914, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_available_output_routing_channels_listener()', 'description': 'remove_available_output_routing_channels_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;available_output_routing_channels&quot;. C++ signature :  void remove_available_output_routing_channels_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_available_output_routing_channels_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1915, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_available_output_routing_types_listener()', 'description': 'remove_available_output_routing_types_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;available_output_routing_types&quot;. C++ signature :  void remove_available_output_routing_types_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_available_output_routing_types_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1916, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_clip_slots_listener()', 'description': 'remove_clip_slots_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;clip_slots&quot;. C++ signature :  void remove_clip_slots_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_clip_slots_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1917, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_color_index_listener()', 'description': 'remove_color_index_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;color_index&quot;. C++ signature :  void remove_color_index_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_color_index_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1918, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_color_listener()', 'description': 'remove_color_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;color&quot;. C++ signature :  void remove_color_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_color_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1919, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_current_input_routing_listener()', 'description': 'remove_current_input_routing_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;current_input_routing&quot;. C++ signature :  void remove_current_input_routing_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_current_input_routing_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1920, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_current_input_sub_routing_listener()', 'description': 'remove_current_input_sub_routing_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;current_input_sub_routing&quot;. C++ signature :  void remove_current_input_sub_routing_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_current_input_sub_routing_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1921, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_current_monitoring_state_listener()', 'description': 'remove_current_monitoring_state_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;current_monitoring_state&quot;. C++ signature :  void remove_current_monitoring_state_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_current_monitoring_state_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1922, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_current_output_routing_listener()', 'description': 'remove_current_output_routing_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;current_output_routing&quot;. C++ signature :  void remove_current_output_routing_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_current_output_routing_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1923, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_current_output_sub_routing_listener()', 'description': 'remove_current_output_sub_routing_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;current_output_sub_routing&quot;. C++ signature :  void remove_current_output_sub_routing_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_current_output_sub_routing_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1924, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_data_listener()', 'description': 'remove_data_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;data&quot;. C++ signature :  void remove_data_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_data_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1925, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_devices_listener()', 'description': 'remove_devices_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;devices&quot;. C++ signature :  void remove_devices_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_devices_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1926, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_fired_slot_index_listener()', 'description': 'remove_fired_slot_index_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;fired_slot_index&quot;. C++ signature :  void remove_fired_slot_index_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_fired_slot_index_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1927, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_has_audio_input_listener()', 'description': 'remove_has_audio_input_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;has_audio_input&quot;. C++ signature :  void remove_has_audio_input_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_has_audio_input_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1928, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_has_audio_output_listener()', 'description': 'remove_has_audio_output_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;has_audio_output&quot;. C++ signature :  void remove_has_audio_output_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_has_audio_output_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1929, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_has_midi_input_listener()', 'description': 'remove_has_midi_input_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;has_midi_input&quot;. C++ signature :  void remove_has_midi_input_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_has_midi_input_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1930, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_has_midi_output_listener()', 'description': 'remove_has_midi_output_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;has_midi_output&quot;. C++ signature :  void remove_has_midi_output_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_has_midi_output_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1931, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_implicit_arm_listener()', 'description': 'remove_implicit_arm_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;implicit_arm&quot;. C++ signature :  void remove_implicit_arm_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_implicit_arm_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1932, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_input_meter_left_listener()', 'description': 'remove_input_meter_left_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;input_meter_left&quot;. C++ signature :  void remove_input_meter_left_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_input_meter_left_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1933, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_input_meter_level_listener()', 'description': 'remove_input_meter_level_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;input_meter_level&quot;. C++ signature :  void remove_input_meter_level_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_input_meter_level_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1934, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_input_meter_right_listener()', 'description': 'remove_input_meter_right_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;input_meter_right&quot;. C++ signature :  void remove_input_meter_right_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_input_meter_right_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1935, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_input_routing_channel_listener()', 'description': 'remove_input_routing_channel_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;input_routing_channel&quot;. C++ signature :  void remove_input_routing_channel_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_input_routing_channel_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1936, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_input_routing_type_listener()', 'description': 'remove_input_routing_type_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;input_routing_type&quot;. C++ signature :  void remove_input_routing_type_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_input_routing_type_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1937, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_input_routings_listener()', 'description': 'remove_input_routings_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;input_routings&quot;. C++ signature :  void remove_input_routings_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_input_routings_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1938, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_input_sub_routings_listener()', 'description': 'remove_input_sub_routings_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;input_sub_routings&quot;. C++ signature :  void remove_input_sub_routings_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_input_sub_routings_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1939, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_is_frozen_listener()', 'description': 'remove_is_frozen_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_frozen&quot;. C++ signature :  void remove_is_frozen_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_is_frozen_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1940, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_is_showing_chains_listener()', 'description': 'remove_is_showing_chains_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_showing_chains&quot;. C++ signature :  void remove_is_showing_chains_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_is_showing_chains_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1941, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_mute_listener()', 'description': 'remove_mute_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;mute&quot;. C++ signature :  void remove_mute_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_mute_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1942, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_muted_via_solo_listener()', 'description': 'remove_muted_via_solo_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;muted_via_solo&quot;. C++ signature :  void remove_muted_via_solo_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_muted_via_solo_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1943, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_name_listener()', 'description': 'remove_name_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_name_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1944, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_output_meter_left_listener()', 'description': 'remove_output_meter_left_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;output_meter_left&quot;. C++ signature :  void remove_output_meter_left_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_output_meter_left_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1945, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_output_meter_level_listener()', 'description': 'remove_output_meter_level_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;output_meter_level&quot;. C++ signature :  void remove_output_meter_level_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_output_meter_level_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1946, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_output_meter_right_listener()', 'description': 'remove_output_meter_right_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;output_meter_right&quot;. C++ signature :  void remove_output_meter_right_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_output_meter_right_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1947, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_output_routing_channel_listener()', 'description': 'remove_output_routing_channel_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;output_routing_channel&quot;. C++ signature :  void remove_output_routing_channel_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_output_routing_channel_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1948, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_output_routing_type_listener()', 'description': 'remove_output_routing_type_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;output_routing_type&quot;. C++ signature :  void remove_output_routing_type_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_output_routing_type_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1949, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_output_routings_listener()', 'description': 'remove_output_routings_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;output_routings&quot;. C++ signature :  void remove_output_routings_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_output_routings_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1950, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_output_sub_routings_listener()', 'description': 'remove_output_sub_routings_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;output_sub_routings&quot;. C++ signature :  void remove_output_sub_routings_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_output_sub_routings_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1951, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_playing_slot_index_listener()', 'description': 'remove_playing_slot_index_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;playing_slot_index&quot;. C++ signature :  void remove_playing_slot_index_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_playing_slot_index_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1952, 'tag': 'listener Method', 'name': 'Live.Track.Track.remove_solo_listener()', 'description': 'remove_solo_listener( (Track)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;solo&quot;. C++ signature :  void remove_solo_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'remove_solo_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1953, 'tag': 'Method', 'name': 'Live.Track.Track.set_data()', 'description': 'set_data( (Track)arg1, (object)key, (object)value) -> None : Store data for the given key in this object. The data is persistent and will be restored when loading the Live Set. C++ signature :  void set_data(TTrackPyHandle,TString,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'set_data()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Method'}, {'ref': 1954, 'tag': 'listener Method', 'name': 'Live.Track.Track.solo_has_listener()', 'description': 'solo_has_listener( (Track)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;solo&quot;. C++ signature :  bool solo_has_listener(TTrackPyHandle,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'solo_has_listener()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'listener Method'}, {'ref': 1955, 'tag': 'Method', 'name': 'Live.Track.Track.stop_all_clips()', 'description': 'stop_all_clips( (Track)arg1 [, (bool)Quantized=True]) -> None : Stop running and triggered clip and slots on this track. C++ signature :  void stop_all_clips(TTrackPyHandle [,bool=True])', 'path': ['Live', 'Track', 'Track', 'stop_all_clips()'], 'hirachy': 3, 'ref_parent': 1763, 'children': [], 'group': 'Method'}, {'ref': 1956, 'tag': 'Sub-Class', 'name': 'Live.Track.Track.monitoring_states', 'description': None, 'path': ['Live', 'Track', 'Track', 'monitoring_states'], 'hirachy': 3, 'ref_parent': 1763, 'children': [1957, 1958, 1959], 'group': None}, {'ref': 1957, 'tag': 'Value', 'name': 'Live.Track.Track.monitoring_states.AUTO', 'description': None, 'path': ['Live', 'Track', 'Track', 'monitoring_states', 'AUTO'], 'hirachy': 4, 'ref_parent': 1956, 'children': [], 'group': 'Value'}, {'ref': 1958, 'tag': 'Value', 'name': 'Live.Track.Track.monitoring_states.IN', 'description': None, 'path': ['Live', 'Track', 'Track', 'monitoring_states', 'IN'], 'hirachy': 4, 'ref_parent': 1956, 'children': [], 'group': 'Value'}, {'ref': 1959, 'tag': 'Value', 'name': 'Live.Track.Track.monitoring_states.OFF', 'description': None, 'path': ['Live', 'Track', 'Track', 'monitoring_states', 'OFF'], 'hirachy': 4, 'ref_parent': 1956, 'children': [], 'group': 'Value'}, {'ref': 1960, 'tag': 'Class', 'name': 'Live.Track.Track.View', 'description': 'Representing the view aspects of a Track.', 'path': ['Live', 'Track', 'Track', 'View'], 'hirachy': 3, 'ref_parent': 1763, 'children': [1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975], 'group': None}, {'ref': 1961, 'tag': 'Property', 'name': 'Live.Track.Track.View._live_ptr', 'description': None, 'path': ['Live', 'Track', 'Track', 'View', '_live_ptr'], 'hirachy': 4, 'ref_parent': 1960, 'children': [], 'group': 'Property'}, {'ref': 1962, 'tag': 'Property', 'name': 'Live.Track.Track.View.canonical_parent', 'description': 'Get the canonical parent of the track view.', 'path': ['Live', 'Track', 'Track', 'View', 'canonical_parent'], 'hirachy': 4, 'ref_parent': 1960, 'children': [], 'group': 'Property'}, {'ref': 1963, 'tag': 'Property', 'name': 'Live.Track.Track.View.device_insert_mode', 'description': 'Get/Listen the device insertion mode of the track.  By default, it will insert devices at the end, but it can be changed to make it relative to current selection.', 'path': ['Live', 'Track', 'Track', 'View', 'device_insert_mode'], 'hirachy': 4, 'ref_parent': 1960, 'children': [], 'group': 'Property'}, {'ref': 1964, 'tag': 'Property', 'name': 'Live.Track.Track.View.is_collapsed', 'description': 'Get/Set/Listen if the track is shown collapsed in the arranger view.', 'path': ['Live', 'Track', 'Track', 'View', 'is_collapsed'], 'hirachy': 4, 'ref_parent': 1960, 'children': [], 'group': 'Property'}, {'ref': 1965, 'tag': 'Property', 'name': 'Live.Track.Track.View.selected_device', 'description': 'Get/Set/Listen the insertion mode of the device.  While in insertion mode, loading new devices from the browser will place devices at the selected position.', 'path': ['Live', 'Track', 'Track', 'View', 'selected_device'], 'hirachy': 4, 'ref_parent': 1960, 'children': [], 'group': 'Property'}, {'ref': 1966, 'tag': 'listener Method', 'name': 'Live.Track.Track.View.add_device_insert_mode_listener()', 'description': 'add_device_insert_mode_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;device_insert_mode&quot; has changed. C++ signature :  void add_device_insert_mode_listener(TPyViewData<ATrack>,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'View', 'add_device_insert_mode_listener()'], 'hirachy': 4, 'ref_parent': 1960, 'children': [], 'group': 'listener Method'}, {'ref': 1967, 'tag': 'listener Method', 'name': 'Live.Track.Track.View.add_is_collapsed_listener()', 'description': 'add_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_collapsed&quot; has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData<ATrack>,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'View', 'add_is_collapsed_listener()'], 'hirachy': 4, 'ref_parent': 1960, 'children': [], 'group': 'listener Method'}, {'ref': 1968, 'tag': 'listener Method', 'name': 'Live.Track.Track.View.add_selected_device_listener()', 'description': 'add_selected_device_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;selected_device&quot; has changed. C++ signature :  void add_selected_device_listener(TPyViewData<ATrack>,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'View', 'add_selected_device_listener()'], 'hirachy': 4, 'ref_parent': 1960, 'children': [], 'group': 'listener Method'}, {'ref': 1969, 'tag': 'listener Method', 'name': 'Live.Track.Track.View.device_insert_mode_has_listener()', 'description': 'device_insert_mode_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;device_insert_mode&quot;. C++ signature :  bool device_insert_mode_has_listener(TPyViewData<ATrack>,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'View', 'device_insert_mode_has_listener()'], 'hirachy': 4, 'ref_parent': 1960, 'children': [], 'group': 'listener Method'}, {'ref': 1970, 'tag': 'listener Method', 'name': 'Live.Track.Track.View.is_collapsed_has_listener()', 'description': 'is_collapsed_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_collapsed&quot;. C++ signature :  bool is_collapsed_has_listener(TPyViewData<ATrack>,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'View', 'is_collapsed_has_listener()'], 'hirachy': 4, 'ref_parent': 1960, 'children': [], 'group': 'listener Method'}, {'ref': 1971, 'tag': 'listener Method', 'name': 'Live.Track.Track.View.remove_device_insert_mode_listener()', 'description': 'remove_device_insert_mode_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;device_insert_mode&quot;. C++ signature :  void remove_device_insert_mode_listener(TPyViewData<ATrack>,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'View', 'remove_device_insert_mode_listener()'], 'hirachy': 4, 'ref_parent': 1960, 'children': [], 'group': 'listener Method'}, {'ref': 1972, 'tag': 'listener Method', 'name': 'Live.Track.Track.View.remove_is_collapsed_listener()', 'description': 'remove_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_collapsed&quot;. C++ signature :  void remove_is_collapsed_listener(TPyViewData<ATrack>,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'View', 'remove_is_collapsed_listener()'], 'hirachy': 4, 'ref_parent': 1960, 'children': [], 'group': 'listener Method'}, {'ref': 1973, 'tag': 'listener Method', 'name': 'Live.Track.Track.View.remove_selected_device_listener()', 'description': 'remove_selected_device_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;selected_device&quot;. C++ signature :  void remove_selected_device_listener(TPyViewData<ATrack>,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'View', 'remove_selected_device_listener()'], 'hirachy': 4, 'ref_parent': 1960, 'children': [], 'group': 'listener Method'}, {'ref': 1974, 'tag': 'Method', 'name': 'Live.Track.Track.View.select_instrument()', 'description': "select_instrument( (View)arg1) -> bool : Selects the track's instrument if it has one. C++ signature :  bool select_instrument(TPyViewData<ATrack>)", 'path': ['Live', 'Track', 'Track', 'View', 'select_instrument()'], 'hirachy': 4, 'ref_parent': 1960, 'children': [], 'group': 'Method'}, {'ref': 1975, 'tag': 'listener Method', 'name': 'Live.Track.Track.View.selected_device_has_listener()', 'description': 'selected_device_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;selected_device&quot;. C++ signature :  bool selected_device_has_listener(TPyViewData<ATrack>,boost::python::api::object)', 'path': ['Live', 'Track', 'Track', 'View', 'selected_device_has_listener()'], 'hirachy': 4, 'ref_parent': 1960, 'children': [], 'group': 'listener Method'}, {'ref': 1976, 'tag': 'Module', 'name': 'Live.TransmuteDevice', 'description': None, 'path': ['Live', 'TransmuteDevice'], 'hirachy': 1, 'ref_parent': 0, 'children': [1977], 'group': None}, {'ref': 1977, 'tag': 'Class', 'name': 'Live.TransmuteDevice.TransmuteDevice', 'description': 'This class represents a Transmute device.', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice'], 'hirachy': 2, 'ref_parent': 1976, 'children': [1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047], 'group': None}, {'ref': 1978, 'tag': 'Property', 'name': 'Live.TransmuteDevice.TransmuteDevice._live_ptr', 'description': None, 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', '_live_ptr'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'Property'}, {'ref': 1979, 'tag': 'Property', 'name': 'Live.TransmuteDevice.TransmuteDevice.can_have_chains', 'description': 'Returns true if the device is a rack.', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'can_have_chains'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'Property'}, {'ref': 1980, 'tag': 'Property', 'name': 'Live.TransmuteDevice.TransmuteDevice.can_have_drum_pads', 'description': 'Returns true if the device is a drum rack.', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'can_have_drum_pads'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'Property'}, {'ref': 1981, 'tag': 'Property', 'name': 'Live.TransmuteDevice.TransmuteDevice.canonical_parent', 'description': 'Get the canonical parent of the Device.', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'canonical_parent'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'Property'}, {'ref': 1982, 'tag': 'Property', 'name': 'Live.TransmuteDevice.TransmuteDevice.class_display_name', 'description': "Return const access to the name of the device's class name as displayed in Live's browser and device chain", 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'class_display_name'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'Property'}, {'ref': 1983, 'tag': 'Property', 'name': 'Live.TransmuteDevice.TransmuteDevice.class_name', 'description': "Return const access to the name of the device's class.", 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'class_name'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'Property'}, {'ref': 1984, 'tag': 'Property', 'name': 'Live.TransmuteDevice.TransmuteDevice.frequency_dial_mode_index', 'description': 'Return the current frequency dial mode index', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'frequency_dial_mode_index'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'Property'}, {'ref': 1985, 'tag': 'Property', 'name': 'Live.TransmuteDevice.TransmuteDevice.frequency_dial_mode_list', 'description': 'Return the current frequency dial mode list', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'frequency_dial_mode_list'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'Property'}, {'ref': 1986, 'tag': 'Property', 'name': 'Live.TransmuteDevice.TransmuteDevice.is_active', 'description': "Return const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off.", 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'is_active'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'Property'}, {'ref': 1987, 'tag': 'Property', 'name': 'Live.TransmuteDevice.TransmuteDevice.midi_gate_index', 'description': 'Return the current midi gate index', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'midi_gate_index'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'Property'}, {'ref': 1988, 'tag': 'Property', 'name': 'Live.TransmuteDevice.TransmuteDevice.midi_gate_list', 'description': 'Return the current midi gate list', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'midi_gate_list'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'Property'}, {'ref': 1989, 'tag': 'Property', 'name': 'Live.TransmuteDevice.TransmuteDevice.mod_mode_index', 'description': 'Return the current mod mode index', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'mod_mode_index'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'Property'}, {'ref': 1990, 'tag': 'Property', 'name': 'Live.TransmuteDevice.TransmuteDevice.mod_mode_list', 'description': 'Return the current mod mode list', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'mod_mode_list'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'Property'}, {'ref': 1991, 'tag': 'Property', 'name': 'Live.TransmuteDevice.TransmuteDevice.mono_poly_index', 'description': 'Return the current mono poly mode index', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'mono_poly_index'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'Property'}, {'ref': 1992, 'tag': 'Property', 'name': 'Live.TransmuteDevice.TransmuteDevice.mono_poly_list', 'description': 'Return the current mono poly mode list', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'mono_poly_list'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'Property'}, {'ref': 1993, 'tag': 'Property', 'name': 'Live.TransmuteDevice.TransmuteDevice.name', 'description': 'Return access to the name of the device.', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'name'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'Property'}, {'ref': 1994, 'tag': 'Property', 'name': 'Live.TransmuteDevice.TransmuteDevice.parameters', 'description': 'Const access to the list of available automatable parameters for this device.', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'parameters'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'Property'}, {'ref': 1995, 'tag': 'Property', 'name': 'Live.TransmuteDevice.TransmuteDevice.pitch_bend_range', 'description': 'Return the current pitch bend range', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'pitch_bend_range'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'Property'}, {'ref': 1996, 'tag': 'Property', 'name': 'Live.TransmuteDevice.TransmuteDevice.pitch_mode_index', 'description': 'Return the current pitch mode index', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'pitch_mode_index'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'Property'}, {'ref': 1997, 'tag': 'Property', 'name': 'Live.TransmuteDevice.TransmuteDevice.pitch_mode_list', 'description': 'Return the current pitch mode list', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'pitch_mode_list'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'Property'}, {'ref': 1998, 'tag': 'Property', 'name': 'Live.TransmuteDevice.TransmuteDevice.polyphony', 'description': 'Return the current polyphony', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'polyphony'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'Property'}, {'ref': 1999, 'tag': 'Property', 'name': 'Live.TransmuteDevice.TransmuteDevice.type', 'description': 'Return the type of the device.', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'type'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'Property'}, {'ref': 2000, 'tag': 'Property', 'name': 'Live.TransmuteDevice.TransmuteDevice.view', 'description': 'Representing the view aspects of a device.', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'view'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'Property'}, {'ref': 2001, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.add_frequency_dial_mode_index_listener()', 'description': 'add_frequency_dial_mode_index_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;frequency_dial_mode_index&quot; has changed. C++ signature :  void add_frequency_dial_mode_index_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'add_frequency_dial_mode_index_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2002, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.add_frequency_dial_mode_list_listener()', 'description': 'add_frequency_dial_mode_list_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;frequency_dial_mode_list&quot; has changed. C++ signature :  void add_frequency_dial_mode_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'add_frequency_dial_mode_list_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2003, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.add_is_active_listener()', 'description': 'add_is_active_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_active&quot; has changed. C++ signature :  void add_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'add_is_active_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2004, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.add_midi_gate_index_listener()', 'description': 'add_midi_gate_index_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;midi_gate_index&quot; has changed. C++ signature :  void add_midi_gate_index_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'add_midi_gate_index_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2005, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.add_midi_gate_list_listener()', 'description': 'add_midi_gate_list_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;midi_gate_list&quot; has changed. C++ signature :  void add_midi_gate_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'add_midi_gate_list_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2006, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.add_mod_mode_index_listener()', 'description': 'add_mod_mode_index_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;mod_mode_index&quot; has changed. C++ signature :  void add_mod_mode_index_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'add_mod_mode_index_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2007, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.add_mod_mode_list_listener()', 'description': 'add_mod_mode_list_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;mod_mode_list&quot; has changed. C++ signature :  void add_mod_mode_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'add_mod_mode_list_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2008, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.add_mono_poly_index_listener()', 'description': 'add_mono_poly_index_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;mono_poly_index&quot; has changed. C++ signature :  void add_mono_poly_index_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'add_mono_poly_index_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2009, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.add_mono_poly_list_listener()', 'description': 'add_mono_poly_list_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;mono_poly_list&quot; has changed. C++ signature :  void add_mono_poly_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'add_mono_poly_list_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2010, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.add_name_listener()', 'description': 'add_name_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'add_name_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2011, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.add_parameters_listener()', 'description': 'add_parameters_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;parameters&quot; has changed. C++ signature :  void add_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'add_parameters_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2012, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.add_pitch_bend_range_listener()', 'description': 'add_pitch_bend_range_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;pitch_bend_range&quot; has changed. C++ signature :  void add_pitch_bend_range_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'add_pitch_bend_range_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2013, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.add_pitch_mode_index_listener()', 'description': 'add_pitch_mode_index_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;pitch_mode_index&quot; has changed. C++ signature :  void add_pitch_mode_index_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'add_pitch_mode_index_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2014, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.add_pitch_mode_list_listener()', 'description': 'add_pitch_mode_list_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;pitch_mode_list&quot; has changed. C++ signature :  void add_pitch_mode_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'add_pitch_mode_list_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2015, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.add_polyphony_listener()', 'description': 'add_polyphony_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;polyphony&quot; has changed. C++ signature :  void add_polyphony_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'add_polyphony_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2016, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.frequency_dial_mode_index_has_listener()', 'description': 'frequency_dial_mode_index_has_listener( (TransmuteDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;frequency_dial_mode_index&quot;. C++ signature :  bool frequency_dial_mode_index_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'frequency_dial_mode_index_has_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2017, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.frequency_dial_mode_list_has_listener()', 'description': 'frequency_dial_mode_list_has_listener( (TransmuteDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;frequency_dial_mode_list&quot;. C++ signature :  bool frequency_dial_mode_list_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'frequency_dial_mode_list_has_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2018, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.is_active_has_listener()', 'description': 'is_active_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_active&quot;. C++ signature :  bool is_active_has_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'is_active_has_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2019, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.midi_gate_index_has_listener()', 'description': 'midi_gate_index_has_listener( (TransmuteDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;midi_gate_index&quot;. C++ signature :  bool midi_gate_index_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'midi_gate_index_has_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2020, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.midi_gate_list_has_listener()', 'description': 'midi_gate_list_has_listener( (TransmuteDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;midi_gate_list&quot;. C++ signature :  bool midi_gate_list_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'midi_gate_list_has_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2021, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.mod_mode_index_has_listener()', 'description': 'mod_mode_index_has_listener( (TransmuteDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;mod_mode_index&quot;. C++ signature :  bool mod_mode_index_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'mod_mode_index_has_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2022, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.mod_mode_list_has_listener()', 'description': 'mod_mode_list_has_listener( (TransmuteDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;mod_mode_list&quot;. C++ signature :  bool mod_mode_list_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'mod_mode_list_has_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2023, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.mono_poly_index_has_listener()', 'description': 'mono_poly_index_has_listener( (TransmuteDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;mono_poly_index&quot;. C++ signature :  bool mono_poly_index_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'mono_poly_index_has_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2024, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.mono_poly_list_has_listener()', 'description': 'mono_poly_list_has_listener( (TransmuteDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;mono_poly_list&quot;. C++ signature :  bool mono_poly_list_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'mono_poly_list_has_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2025, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.name_has_listener()', 'description': 'name_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'name_has_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2026, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.parameters_has_listener()', 'description': 'parameters_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;parameters&quot;. C++ signature :  bool parameters_has_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'parameters_has_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2027, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.pitch_bend_range_has_listener()', 'description': 'pitch_bend_range_has_listener( (TransmuteDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;pitch_bend_range&quot;. C++ signature :  bool pitch_bend_range_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'pitch_bend_range_has_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2028, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.pitch_mode_index_has_listener()', 'description': 'pitch_mode_index_has_listener( (TransmuteDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;pitch_mode_index&quot;. C++ signature :  bool pitch_mode_index_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'pitch_mode_index_has_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2029, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.pitch_mode_list_has_listener()', 'description': 'pitch_mode_list_has_listener( (TransmuteDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;pitch_mode_list&quot;. C++ signature :  bool pitch_mode_list_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'pitch_mode_list_has_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2030, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.polyphony_has_listener()', 'description': 'polyphony_has_listener( (TransmuteDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;polyphony&quot;. C++ signature :  bool polyphony_has_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'polyphony_has_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2031, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.remove_frequency_dial_mode_index_listener()', 'description': 'remove_frequency_dial_mode_index_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;frequency_dial_mode_index&quot;. C++ signature :  void remove_frequency_dial_mode_index_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'remove_frequency_dial_mode_index_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2032, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.remove_frequency_dial_mode_list_listener()', 'description': 'remove_frequency_dial_mode_list_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;frequency_dial_mode_list&quot;. C++ signature :  void remove_frequency_dial_mode_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'remove_frequency_dial_mode_list_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2033, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.remove_is_active_listener()', 'description': 'remove_is_active_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_active&quot;. C++ signature :  void remove_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'remove_is_active_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2034, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.remove_midi_gate_index_listener()', 'description': 'remove_midi_gate_index_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;midi_gate_index&quot;. C++ signature :  void remove_midi_gate_index_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'remove_midi_gate_index_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2035, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.remove_midi_gate_list_listener()', 'description': 'remove_midi_gate_list_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;midi_gate_list&quot;. C++ signature :  void remove_midi_gate_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'remove_midi_gate_list_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2036, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.remove_mod_mode_index_listener()', 'description': 'remove_mod_mode_index_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;mod_mode_index&quot;. C++ signature :  void remove_mod_mode_index_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'remove_mod_mode_index_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2037, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.remove_mod_mode_list_listener()', 'description': 'remove_mod_mode_list_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;mod_mode_list&quot;. C++ signature :  void remove_mod_mode_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'remove_mod_mode_list_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2038, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.remove_mono_poly_index_listener()', 'description': 'remove_mono_poly_index_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;mono_poly_index&quot;. C++ signature :  void remove_mono_poly_index_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'remove_mono_poly_index_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2039, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.remove_mono_poly_list_listener()', 'description': 'remove_mono_poly_list_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;mono_poly_list&quot;. C++ signature :  void remove_mono_poly_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'remove_mono_poly_list_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2040, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.remove_name_listener()', 'description': 'remove_name_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'remove_name_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2041, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.remove_parameters_listener()', 'description': 'remove_parameters_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;parameters&quot;. C++ signature :  void remove_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'remove_parameters_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2042, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.remove_pitch_bend_range_listener()', 'description': 'remove_pitch_bend_range_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;pitch_bend_range&quot;. C++ signature :  void remove_pitch_bend_range_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'remove_pitch_bend_range_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2043, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.remove_pitch_mode_index_listener()', 'description': 'remove_pitch_mode_index_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;pitch_mode_index&quot;. C++ signature :  void remove_pitch_mode_index_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'remove_pitch_mode_index_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2044, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.remove_pitch_mode_list_listener()', 'description': 'remove_pitch_mode_list_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;pitch_mode_list&quot;. C++ signature :  void remove_pitch_mode_list_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'remove_pitch_mode_list_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2045, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.remove_polyphony_listener()', 'description': 'remove_polyphony_listener( (TransmuteDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;polyphony&quot;. C++ signature :  void remove_polyphony_listener(TTransmuteDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'remove_polyphony_listener()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'listener Method'}, {'ref': 2046, 'tag': 'Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.store_chosen_bank()', 'description': 'store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -> None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle<ADevice>,int,int)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'store_chosen_bank()'], 'hirachy': 3, 'ref_parent': 1977, 'children': [], 'group': 'Method'}, {'ref': 2047, 'tag': 'Class', 'name': 'Live.TransmuteDevice.TransmuteDevice.View', 'description': 'Representing the view aspects of a device.', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'View'], 'hirachy': 3, 'ref_parent': 1977, 'children': [2048, 2049, 2050, 2051, 2052, 2053], 'group': None}, {'ref': 2048, 'tag': 'Property', 'name': 'Live.TransmuteDevice.TransmuteDevice.View._live_ptr', 'description': None, 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'View', '_live_ptr'], 'hirachy': 4, 'ref_parent': 2047, 'children': [], 'group': 'Property'}, {'ref': 2049, 'tag': 'Property', 'name': 'Live.TransmuteDevice.TransmuteDevice.View.canonical_parent', 'description': 'Get the canonical parent of the View.', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'View', 'canonical_parent'], 'hirachy': 4, 'ref_parent': 2047, 'children': [], 'group': 'Property'}, {'ref': 2050, 'tag': 'Property', 'name': 'Live.TransmuteDevice.TransmuteDevice.View.is_collapsed', 'description': 'Get/Set/Listen if the device is shown collapsed in the device chain.', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'View', 'is_collapsed'], 'hirachy': 4, 'ref_parent': 2047, 'children': [], 'group': 'Property'}, {'ref': 2051, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.View.add_is_collapsed_listener()', 'description': 'add_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_collapsed&quot; has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'View', 'add_is_collapsed_listener()'], 'hirachy': 4, 'ref_parent': 2047, 'children': [], 'group': 'listener Method'}, {'ref': 2052, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.View.is_collapsed_has_listener()', 'description': 'is_collapsed_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_collapsed&quot;. C++ signature :  bool is_collapsed_has_listener(TPyViewData<ADevice>,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'View', 'is_collapsed_has_listener()'], 'hirachy': 4, 'ref_parent': 2047, 'children': [], 'group': 'listener Method'}, {'ref': 2053, 'tag': 'listener Method', 'name': 'Live.TransmuteDevice.TransmuteDevice.View.remove_is_collapsed_listener()', 'description': 'remove_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_collapsed&quot;. C++ signature :  void remove_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)', 'path': ['Live', 'TransmuteDevice', 'TransmuteDevice', 'View', 'remove_is_collapsed_listener()'], 'hirachy': 4, 'ref_parent': 2047, 'children': [], 'group': 'listener Method'}, {'ref': 2054, 'tag': 'Module', 'name': 'Live.WavetableDevice', 'description': None, 'path': ['Live', 'WavetableDevice'], 'hirachy': 1, 'ref_parent': 0, 'children': [2055, 2060, 2064, 2076, 2084, 2092, 2095], 'group': None}, {'ref': 2055, 'tag': 'Class', 'name': 'Live.WavetableDevice.EffectMode', 'description': None, 'path': ['Live', 'WavetableDevice', 'EffectMode'], 'hirachy': 2, 'ref_parent': 2054, 'children': [2056, 2057, 2058, 2059], 'group': None}, {'ref': 2056, 'tag': 'Value', 'name': 'Live.WavetableDevice.EffectMode.frequency_modulation', 'description': None, 'path': ['Live', 'WavetableDevice', 'EffectMode', 'frequency_modulation'], 'hirachy': 3, 'ref_parent': 2055, 'children': [], 'group': 'Value'}, {'ref': 2057, 'tag': 'Value', 'name': 'Live.WavetableDevice.EffectMode.none', 'description': None, 'path': ['Live', 'WavetableDevice', 'EffectMode', 'none'], 'hirachy': 3, 'ref_parent': 2055, 'children': [], 'group': 'Value'}, {'ref': 2058, 'tag': 'Value', 'name': 'Live.WavetableDevice.EffectMode.sync_and_pulse_width', 'description': None, 'path': ['Live', 'WavetableDevice', 'EffectMode', 'sync_and_pulse_width'], 'hirachy': 3, 'ref_parent': 2055, 'children': [], 'group': 'Value'}, {'ref': 2059, 'tag': 'Value', 'name': 'Live.WavetableDevice.EffectMode.warp_and_fold', 'description': None, 'path': ['Live', 'WavetableDevice', 'EffectMode', 'warp_and_fold'], 'hirachy': 3, 'ref_parent': 2055, 'children': [], 'group': 'Value'}, {'ref': 2060, 'tag': 'Class', 'name': 'Live.WavetableDevice.FilterRouting', 'description': None, 'path': ['Live', 'WavetableDevice', 'FilterRouting'], 'hirachy': 2, 'ref_parent': 2054, 'children': [2061, 2062, 2063], 'group': None}, {'ref': 2061, 'tag': 'Value', 'name': 'Live.WavetableDevice.FilterRouting.parallel', 'description': None, 'path': ['Live', 'WavetableDevice', 'FilterRouting', 'parallel'], 'hirachy': 3, 'ref_parent': 2060, 'children': [], 'group': 'Value'}, {'ref': 2062, 'tag': 'Value', 'name': 'Live.WavetableDevice.FilterRouting.serial', 'description': None, 'path': ['Live', 'WavetableDevice', 'FilterRouting', 'serial'], 'hirachy': 3, 'ref_parent': 2060, 'children': [], 'group': 'Value'}, {'ref': 2063, 'tag': 'Value', 'name': 'Live.WavetableDevice.FilterRouting.split', 'description': None, 'path': ['Live', 'WavetableDevice', 'FilterRouting', 'split'], 'hirachy': 3, 'ref_parent': 2060, 'children': [], 'group': 'Value'}, {'ref': 2064, 'tag': 'Class', 'name': 'Live.WavetableDevice.ModulationSource', 'description': None, 'path': ['Live', 'WavetableDevice', 'ModulationSource'], 'hirachy': 2, 'ref_parent': 2054, 'children': [2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075], 'group': None}, {'ref': 2065, 'tag': 'Value', 'name': 'Live.WavetableDevice.ModulationSource.amp_envelope', 'description': None, 'path': ['Live', 'WavetableDevice', 'ModulationSource', 'amp_envelope'], 'hirachy': 3, 'ref_parent': 2064, 'children': [], 'group': 'Value'}, {'ref': 2066, 'tag': 'Value', 'name': 'Live.WavetableDevice.ModulationSource.envelope_2', 'description': None, 'path': ['Live', 'WavetableDevice', 'ModulationSource', 'envelope_2'], 'hirachy': 3, 'ref_parent': 2064, 'children': [], 'group': 'Value'}, {'ref': 2067, 'tag': 'Value', 'name': 'Live.WavetableDevice.ModulationSource.envelope_3', 'description': None, 'path': ['Live', 'WavetableDevice', 'ModulationSource', 'envelope_3'], 'hirachy': 3, 'ref_parent': 2064, 'children': [], 'group': 'Value'}, {'ref': 2068, 'tag': 'Value', 'name': 'Live.WavetableDevice.ModulationSource.lfo_1', 'description': None, 'path': ['Live', 'WavetableDevice', 'ModulationSource', 'lfo_1'], 'hirachy': 3, 'ref_parent': 2064, 'children': [], 'group': 'Value'}, {'ref': 2069, 'tag': 'Value', 'name': 'Live.WavetableDevice.ModulationSource.lfo_2', 'description': None, 'path': ['Live', 'WavetableDevice', 'ModulationSource', 'lfo_2'], 'hirachy': 3, 'ref_parent': 2064, 'children': [], 'group': 'Value'}, {'ref': 2070, 'tag': 'Value', 'name': 'Live.WavetableDevice.ModulationSource.midi_channel_pressure', 'description': None, 'path': ['Live', 'WavetableDevice', 'ModulationSource', 'midi_channel_pressure'], 'hirachy': 3, 'ref_parent': 2064, 'children': [], 'group': 'Value'}, {'ref': 2071, 'tag': 'Value', 'name': 'Live.WavetableDevice.ModulationSource.midi_mod_wheel', 'description': None, 'path': ['Live', 'WavetableDevice', 'ModulationSource', 'midi_mod_wheel'], 'hirachy': 3, 'ref_parent': 2064, 'children': [], 'group': 'Value'}, {'ref': 2072, 'tag': 'Value', 'name': 'Live.WavetableDevice.ModulationSource.midi_note', 'description': None, 'path': ['Live', 'WavetableDevice', 'ModulationSource', 'midi_note'], 'hirachy': 3, 'ref_parent': 2064, 'children': [], 'group': 'Value'}, {'ref': 2073, 'tag': 'Value', 'name': 'Live.WavetableDevice.ModulationSource.midi_pitch_bend', 'description': None, 'path': ['Live', 'WavetableDevice', 'ModulationSource', 'midi_pitch_bend'], 'hirachy': 3, 'ref_parent': 2064, 'children': [], 'group': 'Value'}, {'ref': 2074, 'tag': 'Value', 'name': 'Live.WavetableDevice.ModulationSource.midi_random', 'description': None, 'path': ['Live', 'WavetableDevice', 'ModulationSource', 'midi_random'], 'hirachy': 3, 'ref_parent': 2064, 'children': [], 'group': 'Value'}, {'ref': 2075, 'tag': 'Value', 'name': 'Live.WavetableDevice.ModulationSource.midi_velocity', 'description': None, 'path': ['Live', 'WavetableDevice', 'ModulationSource', 'midi_velocity'], 'hirachy': 3, 'ref_parent': 2064, 'children': [], 'group': 'Value'}, {'ref': 2076, 'tag': 'Class', 'name': 'Live.WavetableDevice.UnisonMode', 'description': None, 'path': ['Live', 'WavetableDevice', 'UnisonMode'], 'hirachy': 2, 'ref_parent': 2054, 'children': [2077, 2078, 2079, 2080, 2081, 2082, 2083], 'group': None}, {'ref': 2077, 'tag': 'Value', 'name': 'Live.WavetableDevice.UnisonMode.classic', 'description': None, 'path': ['Live', 'WavetableDevice', 'UnisonMode', 'classic'], 'hirachy': 3, 'ref_parent': 2076, 'children': [], 'group': 'Value'}, {'ref': 2078, 'tag': 'Value', 'name': 'Live.WavetableDevice.UnisonMode.fast_shimmer', 'description': None, 'path': ['Live', 'WavetableDevice', 'UnisonMode', 'fast_shimmer'], 'hirachy': 3, 'ref_parent': 2076, 'children': [], 'group': 'Value'}, {'ref': 2079, 'tag': 'Value', 'name': 'Live.WavetableDevice.UnisonMode.none', 'description': None, 'path': ['Live', 'WavetableDevice', 'UnisonMode', 'none'], 'hirachy': 3, 'ref_parent': 2076, 'children': [], 'group': 'Value'}, {'ref': 2080, 'tag': 'Value', 'name': 'Live.WavetableDevice.UnisonMode.phase_sync', 'description': None, 'path': ['Live', 'WavetableDevice', 'UnisonMode', 'phase_sync'], 'hirachy': 3, 'ref_parent': 2076, 'children': [], 'group': 'Value'}, {'ref': 2081, 'tag': 'Value', 'name': 'Live.WavetableDevice.UnisonMode.position_spread', 'description': None, 'path': ['Live', 'WavetableDevice', 'UnisonMode', 'position_spread'], 'hirachy': 3, 'ref_parent': 2076, 'children': [], 'group': 'Value'}, {'ref': 2082, 'tag': 'Value', 'name': 'Live.WavetableDevice.UnisonMode.random_note', 'description': None, 'path': ['Live', 'WavetableDevice', 'UnisonMode', 'random_note'], 'hirachy': 3, 'ref_parent': 2076, 'children': [], 'group': 'Value'}, {'ref': 2083, 'tag': 'Value', 'name': 'Live.WavetableDevice.UnisonMode.slow_shimmer', 'description': None, 'path': ['Live', 'WavetableDevice', 'UnisonMode', 'slow_shimmer'], 'hirachy': 3, 'ref_parent': 2076, 'children': [], 'group': 'Value'}, {'ref': 2084, 'tag': 'Class', 'name': 'Live.WavetableDevice.VoiceCount', 'description': None, 'path': ['Live', 'WavetableDevice', 'VoiceCount'], 'hirachy': 2, 'ref_parent': 2054, 'children': [2085, 2086, 2087, 2088, 2089, 2090, 2091], 'group': None}, {'ref': 2085, 'tag': 'Value', 'name': 'Live.WavetableDevice.VoiceCount.eight', 'description': None, 'path': ['Live', 'WavetableDevice', 'VoiceCount', 'eight'], 'hirachy': 3, 'ref_parent': 2084, 'children': [], 'group': 'Value'}, {'ref': 2086, 'tag': 'Value', 'name': 'Live.WavetableDevice.VoiceCount.five', 'description': None, 'path': ['Live', 'WavetableDevice', 'VoiceCount', 'five'], 'hirachy': 3, 'ref_parent': 2084, 'children': [], 'group': 'Value'}, {'ref': 2087, 'tag': 'Value', 'name': 'Live.WavetableDevice.VoiceCount.four', 'description': None, 'path': ['Live', 'WavetableDevice', 'VoiceCount', 'four'], 'hirachy': 3, 'ref_parent': 2084, 'children': [], 'group': 'Value'}, {'ref': 2088, 'tag': 'Value', 'name': 'Live.WavetableDevice.VoiceCount.seven', 'description': None, 'path': ['Live', 'WavetableDevice', 'VoiceCount', 'seven'], 'hirachy': 3, 'ref_parent': 2084, 'children': [], 'group': 'Value'}, {'ref': 2089, 'tag': 'Value', 'name': 'Live.WavetableDevice.VoiceCount.six', 'description': None, 'path': ['Live', 'WavetableDevice', 'VoiceCount', 'six'], 'hirachy': 3, 'ref_parent': 2084, 'children': [], 'group': 'Value'}, {'ref': 2090, 'tag': 'Value', 'name': 'Live.WavetableDevice.VoiceCount.three', 'description': None, 'path': ['Live', 'WavetableDevice', 'VoiceCount', 'three'], 'hirachy': 3, 'ref_parent': 2084, 'children': [], 'group': 'Value'}, {'ref': 2091, 'tag': 'Value', 'name': 'Live.WavetableDevice.VoiceCount.two', 'description': None, 'path': ['Live', 'WavetableDevice', 'VoiceCount', 'two'], 'hirachy': 3, 'ref_parent': 2084, 'children': [], 'group': 'Value'}, {'ref': 2092, 'tag': 'Class', 'name': 'Live.WavetableDevice.Voicing', 'description': None, 'path': ['Live', 'WavetableDevice', 'Voicing'], 'hirachy': 2, 'ref_parent': 2054, 'children': [2093, 2094], 'group': None}, {'ref': 2093, 'tag': 'Value', 'name': 'Live.WavetableDevice.Voicing.mono', 'description': None, 'path': ['Live', 'WavetableDevice', 'Voicing', 'mono'], 'hirachy': 3, 'ref_parent': 2092, 'children': [], 'group': 'Value'}, {'ref': 2094, 'tag': 'Value', 'name': 'Live.WavetableDevice.Voicing.poly', 'description': None, 'path': ['Live', 'WavetableDevice', 'Voicing', 'poly'], 'hirachy': 3, 'ref_parent': 2092, 'children': [], 'group': 'Value'}, {'ref': 2095, 'tag': 'Class', 'name': 'Live.WavetableDevice.WavetableDevice', 'description': 'This class represents a Wavetable device.', 'path': ['Live', 'WavetableDevice', 'WavetableDevice'], 'hirachy': 2, 'ref_parent': 2054, 'children': [2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182], 'group': None}, {'ref': 2096, 'tag': 'Property', 'name': 'Live.WavetableDevice.WavetableDevice._live_ptr', 'description': None, 'path': ['Live', 'WavetableDevice', 'WavetableDevice', '_live_ptr'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'Property'}, {'ref': 2097, 'tag': 'Property', 'name': 'Live.WavetableDevice.WavetableDevice.can_have_chains', 'description': 'Returns true if the device is a rack.', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'can_have_chains'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'Property'}, {'ref': 2098, 'tag': 'Property', 'name': 'Live.WavetableDevice.WavetableDevice.can_have_drum_pads', 'description': 'Returns true if the device is a drum rack.', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'can_have_drum_pads'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'Property'}, {'ref': 2099, 'tag': 'Property', 'name': 'Live.WavetableDevice.WavetableDevice.canonical_parent', 'description': 'Get the canonical parent of the Device.', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'canonical_parent'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'Property'}, {'ref': 2100, 'tag': 'Property', 'name': 'Live.WavetableDevice.WavetableDevice.class_display_name', 'description': "Return const access to the name of the device's class name as displayed in Live's browser and device chain", 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'class_display_name'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'Property'}, {'ref': 2101, 'tag': 'Property', 'name': 'Live.WavetableDevice.WavetableDevice.class_name', 'description': "Return const access to the name of the device's class.", 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'class_name'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'Property'}, {'ref': 2102, 'tag': 'Property', 'name': 'Live.WavetableDevice.WavetableDevice.filter_routing', 'description': 'Return the current filter routing.', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'filter_routing'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'Property'}, {'ref': 2103, 'tag': 'Property', 'name': 'Live.WavetableDevice.WavetableDevice.is_active', 'description': "Return const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off.", 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'is_active'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'Property'}, {'ref': 2104, 'tag': 'Property', 'name': 'Live.WavetableDevice.WavetableDevice.mono_poly', 'description': 'Return the current voicing mode.', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'mono_poly'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'Property'}, {'ref': 2105, 'tag': 'Property', 'name': 'Live.WavetableDevice.WavetableDevice.name', 'description': 'Return access to the name of the device.', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'name'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'Property'}, {'ref': 2106, 'tag': 'Property', 'name': 'Live.WavetableDevice.WavetableDevice.oscillator_1_effect_mode', 'description': 'Return the current effect mode of the oscillator 1.', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'oscillator_1_effect_mode'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'Property'}, {'ref': 2107, 'tag': 'Property', 'name': 'Live.WavetableDevice.WavetableDevice.oscillator_1_wavetable_category', 'description': 'Return the current wavetable category of the oscillator 1.', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'oscillator_1_wavetable_category'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'Property'}, {'ref': 2108, 'tag': 'Property', 'name': 'Live.WavetableDevice.WavetableDevice.oscillator_1_wavetable_index', 'description': 'Return the current wavetable index of the oscillator 1.', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'oscillator_1_wavetable_index'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'Property'}, {'ref': 2109, 'tag': 'Property', 'name': 'Live.WavetableDevice.WavetableDevice.oscillator_1_wavetables', 'description': "Get a vector of oscillator 1's wavetable names.", 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'oscillator_1_wavetables'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'Property'}, {'ref': 2110, 'tag': 'Property', 'name': 'Live.WavetableDevice.WavetableDevice.oscillator_2_effect_mode', 'description': 'Return the current effect mode of the oscillator 2.', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'oscillator_2_effect_mode'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'Property'}, {'ref': 2111, 'tag': 'Property', 'name': 'Live.WavetableDevice.WavetableDevice.oscillator_2_wavetable_category', 'description': 'Return the current wavetable category of the oscillator 2.', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'oscillator_2_wavetable_category'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'Property'}, {'ref': 2112, 'tag': 'Property', 'name': 'Live.WavetableDevice.WavetableDevice.oscillator_2_wavetable_index', 'description': 'Return the current wavetable index of the oscillator 2.', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'oscillator_2_wavetable_index'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'Property'}, {'ref': 2113, 'tag': 'Property', 'name': 'Live.WavetableDevice.WavetableDevice.oscillator_2_wavetables', 'description': "Get a vector of oscillator 2's wavetable names.", 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'oscillator_2_wavetables'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'Property'}, {'ref': 2114, 'tag': 'Property', 'name': 'Live.WavetableDevice.WavetableDevice.oscillator_wavetable_categories', 'description': 'Get a vector of the available wavetable categories.', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'oscillator_wavetable_categories'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'Property'}, {'ref': 2115, 'tag': 'Property', 'name': 'Live.WavetableDevice.WavetableDevice.parameters', 'description': 'Const access to the list of available automatable parameters for this device.', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'parameters'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'Property'}, {'ref': 2116, 'tag': 'Property', 'name': 'Live.WavetableDevice.WavetableDevice.poly_voices', 'description': 'Return the current number of polyphonic voices. Uses the VoiceCount enumeration.', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'poly_voices'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'Property'}, {'ref': 2117, 'tag': 'Property', 'name': 'Live.WavetableDevice.WavetableDevice.type', 'description': 'Return the type of the device.', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'type'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'Property'}, {'ref': 2118, 'tag': 'Property', 'name': 'Live.WavetableDevice.WavetableDevice.unison_mode', 'description': 'Return the current unison mode.', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'unison_mode'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'Property'}, {'ref': 2119, 'tag': 'Property', 'name': 'Live.WavetableDevice.WavetableDevice.unison_voice_count', 'description': 'Return the current number of unison voices.', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'unison_voice_count'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'Property'}, {'ref': 2120, 'tag': 'Property', 'name': 'Live.WavetableDevice.WavetableDevice.view', 'description': 'Representing the view aspects of a device.', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'view'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'Property'}, {'ref': 2121, 'tag': 'Property', 'name': 'Live.WavetableDevice.WavetableDevice.visible_modulation_target_names', 'description': 'Get the names of all the visible modulation targets.', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'visible_modulation_target_names'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'Property'}, {'ref': 2122, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.add_filter_routing_listener()', 'description': 'add_filter_routing_listener( (WavetableDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;filter_routing&quot; has changed. C++ signature :  void add_filter_routing_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'add_filter_routing_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2123, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.add_is_active_listener()', 'description': 'add_is_active_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_active&quot; has changed. C++ signature :  void add_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'add_is_active_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2124, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.add_modulation_matrix_changed_listener()', 'description': 'add_modulation_matrix_changed_listener( (WavetableDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;modulation_matrix_changed&quot; has changed. C++ signature :  void add_modulation_matrix_changed_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'add_modulation_matrix_changed_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2125, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.add_mono_poly_listener()', 'description': 'add_mono_poly_listener( (WavetableDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;mono_poly&quot; has changed. C++ signature :  void add_mono_poly_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'add_mono_poly_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2126, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.add_name_listener()', 'description': 'add_name_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;name&quot; has changed. C++ signature :  void add_name_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'add_name_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2127, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.add_oscillator_1_effect_mode_listener()', 'description': 'add_oscillator_1_effect_mode_listener( (WavetableDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;oscillator_1_effect_mode&quot; has changed. C++ signature :  void add_oscillator_1_effect_mode_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'add_oscillator_1_effect_mode_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2128, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.add_oscillator_1_wavetable_category_listener()', 'description': 'add_oscillator_1_wavetable_category_listener( (WavetableDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;oscillator_1_wavetable_category&quot; has changed. C++ signature :  void add_oscillator_1_wavetable_category_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'add_oscillator_1_wavetable_category_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2129, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.add_oscillator_1_wavetable_index_listener()', 'description': 'add_oscillator_1_wavetable_index_listener( (WavetableDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;oscillator_1_wavetable_index&quot; has changed. C++ signature :  void add_oscillator_1_wavetable_index_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'add_oscillator_1_wavetable_index_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2130, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.add_oscillator_1_wavetables_listener()', 'description': 'add_oscillator_1_wavetables_listener( (WavetableDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;oscillator_1_wavetables&quot; has changed. C++ signature :  void add_oscillator_1_wavetables_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'add_oscillator_1_wavetables_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2131, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.add_oscillator_2_effect_mode_listener()', 'description': 'add_oscillator_2_effect_mode_listener( (WavetableDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;oscillator_2_effect_mode&quot; has changed. C++ signature :  void add_oscillator_2_effect_mode_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'add_oscillator_2_effect_mode_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2132, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.add_oscillator_2_wavetable_category_listener()', 'description': 'add_oscillator_2_wavetable_category_listener( (WavetableDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;oscillator_2_wavetable_category&quot; has changed. C++ signature :  void add_oscillator_2_wavetable_category_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'add_oscillator_2_wavetable_category_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2133, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.add_oscillator_2_wavetable_index_listener()', 'description': 'add_oscillator_2_wavetable_index_listener( (WavetableDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;oscillator_2_wavetable_index&quot; has changed. C++ signature :  void add_oscillator_2_wavetable_index_listener(TWavetableDevicePyHandle,boost::python::api::object)add_oscillator_2_wavetable_index_listener( (WavetableDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;oscillator_2_wavetable_index&quot; has changed. C++ signature :  void add_oscillator_2_wavetable_index_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'add_oscillator_2_wavetable_index_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2134, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.add_oscillator_2_wavetables_listener()', 'description': 'add_oscillator_2_wavetables_listener( (WavetableDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;oscillator_2_wavetables&quot; has changed. C++ signature :  void add_oscillator_2_wavetables_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'add_oscillator_2_wavetables_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2135, 'tag': 'Method', 'name': 'Live.WavetableDevice.WavetableDevice.add_parameter_to_modulation_matrix()', 'description': 'add_parameter_to_modulation_matrix( (WavetableDevice)self, (DeviceParameter)parameter) -> int : Add a non-pitch parameter to the modulation matrix. C++ signature :  int add_parameter_to_modulation_matrix(TWavetableDevicePyHandle,TPyHandle<ATimeableValue>)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'add_parameter_to_modulation_matrix()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'Method'}, {'ref': 2136, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.add_parameters_listener()', 'description': 'add_parameters_listener( (Device)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;parameters&quot; has changed. C++ signature :  void add_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'add_parameters_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2137, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.add_poly_voices_listener()', 'description': 'add_poly_voices_listener( (WavetableDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;poly_voices&quot; has changed. C++ signature :  void add_poly_voices_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'add_poly_voices_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2138, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.add_unison_mode_listener()', 'description': 'add_unison_mode_listener( (WavetableDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;unison_mode&quot; has changed. C++ signature :  void add_unison_mode_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'add_unison_mode_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2139, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.add_unison_voice_count_listener()', 'description': 'add_unison_voice_count_listener( (WavetableDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;unison_voice_count&quot; has changed. C++ signature :  void add_unison_voice_count_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'add_unison_voice_count_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2140, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.add_visible_modulation_target_names_listener()', 'description': 'add_visible_modulation_target_names_listener( (WavetableDevice)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;visible_modulation_target_names&quot; has changed. C++ signature :  void add_visible_modulation_target_names_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'add_visible_modulation_target_names_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2141, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.filter_routing_has_listener()', 'description': 'filter_routing_has_listener( (WavetableDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;filter_routing&quot;. C++ signature :  bool filter_routing_has_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'filter_routing_has_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2142, 'tag': 'Method', 'name': 'Live.WavetableDevice.WavetableDevice.get_modulation_target_parameter_name()', 'description': 'get_modulation_target_parameter_name( (WavetableDevice)self, (int)target_index) -> unicode : Get the parameter name of the modulation target at the given index. C++ signature :  TString get_modulation_target_parameter_name(TWavetableDevicePyHandle,int)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'get_modulation_target_parameter_name()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'Method'}, {'ref': 2143, 'tag': 'Method', 'name': 'Live.WavetableDevice.WavetableDevice.get_modulation_value()', 'description': 'get_modulation_value( (WavetableDevice)self, (int)target_index, (int)source) -> float : Get the value of a modulation amount for the given target-source connection. C++ signature :  float get_modulation_value(TWavetableDevicePyHandle,int,int)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'get_modulation_value()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'Method'}, {'ref': 2144, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.is_active_has_listener()', 'description': 'is_active_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_active&quot;. C++ signature :  bool is_active_has_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'is_active_has_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2145, 'tag': 'Method', 'name': 'Live.WavetableDevice.WavetableDevice.is_parameter_modulatable()', 'description': 'is_parameter_modulatable( (WavetableDevice)self, (DeviceParameter)parameter) -> bool : Indicate whether the parameter is modulatable. Note that pitch parameters only exist in python and must be handled there. C++ signature :  bool is_parameter_modulatable(TWavetableDevicePyHandle,TPyHandle<ATimeableValue>)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'is_parameter_modulatable()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'Method'}, {'ref': 2146, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.modulation_matrix_changed_has_listener()', 'description': 'modulation_matrix_changed_has_listener( (WavetableDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;modulation_matrix_changed&quot;. C++ signature :  bool modulation_matrix_changed_has_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'modulation_matrix_changed_has_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2147, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.mono_poly_has_listener()', 'description': 'mono_poly_has_listener( (WavetableDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;mono_poly&quot;. C++ signature :  bool mono_poly_has_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'mono_poly_has_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2148, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.name_has_listener()', 'description': 'name_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;name&quot;. C++ signature :  bool name_has_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'name_has_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2149, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.oscillator_1_effect_mode_has_listener()', 'description': 'oscillator_1_effect_mode_has_listener( (WavetableDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;oscillator_1_effect_mode&quot;. C++ signature :  bool oscillator_1_effect_mode_has_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'oscillator_1_effect_mode_has_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2150, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.oscillator_1_wavetable_category_has_listener()', 'description': 'oscillator_1_wavetable_category_has_listener( (WavetableDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;oscillator_1_wavetable_category&quot;. C++ signature :  bool oscillator_1_wavetable_category_has_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'oscillator_1_wavetable_category_has_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2151, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.oscillator_1_wavetable_index_has_listener()', 'description': 'oscillator_1_wavetable_index_has_listener( (WavetableDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;oscillator_1_wavetable_index&quot;. C++ signature :  bool oscillator_1_wavetable_index_has_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'oscillator_1_wavetable_index_has_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2152, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.oscillator_1_wavetables_has_listener()', 'description': 'oscillator_1_wavetables_has_listener( (WavetableDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;oscillator_1_wavetables&quot;. C++ signature :  bool oscillator_1_wavetables_has_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'oscillator_1_wavetables_has_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2153, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.oscillator_2_effect_mode_has_listener()', 'description': 'oscillator_2_effect_mode_has_listener( (WavetableDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;oscillator_2_effect_mode&quot;. C++ signature :  bool oscillator_2_effect_mode_has_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'oscillator_2_effect_mode_has_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2154, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.oscillator_2_wavetable_category_has_listener()', 'description': 'oscillator_2_wavetable_category_has_listener( (WavetableDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;oscillator_2_wavetable_category&quot;. C++ signature :  bool oscillator_2_wavetable_category_has_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'oscillator_2_wavetable_category_has_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2155, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.oscillator_2_wavetable_index_has_listener()', 'description': 'oscillator_2_wavetable_index_has_listener( (WavetableDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;oscillator_2_wavetable_index&quot;. C++ signature :  bool oscillator_2_wavetable_index_has_listener(TWavetableDevicePyHandle,boost::python::api::object)oscillator_2_wavetable_index_has_listener( (WavetableDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;oscillator_2_wavetable_index&quot;. C++ signature :  bool oscillator_2_wavetable_index_has_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'oscillator_2_wavetable_index_has_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2156, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.oscillator_2_wavetables_has_listener()', 'description': 'oscillator_2_wavetables_has_listener( (WavetableDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;oscillator_2_wavetables&quot;. C++ signature :  bool oscillator_2_wavetables_has_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'oscillator_2_wavetables_has_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2157, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.parameters_has_listener()', 'description': 'parameters_has_listener( (Device)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;parameters&quot;. C++ signature :  bool parameters_has_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'parameters_has_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2158, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.poly_voices_has_listener()', 'description': 'poly_voices_has_listener( (WavetableDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;poly_voices&quot;. C++ signature :  bool poly_voices_has_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'poly_voices_has_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2159, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.remove_filter_routing_listener()', 'description': 'remove_filter_routing_listener( (WavetableDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;filter_routing&quot;. C++ signature :  void remove_filter_routing_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'remove_filter_routing_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2160, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.remove_is_active_listener()', 'description': 'remove_is_active_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_active&quot;. C++ signature :  void remove_is_active_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'remove_is_active_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2161, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.remove_modulation_matrix_changed_listener()', 'description': 'remove_modulation_matrix_changed_listener( (WavetableDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;modulation_matrix_changed&quot;. C++ signature :  void remove_modulation_matrix_changed_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'remove_modulation_matrix_changed_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2162, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.remove_mono_poly_listener()', 'description': 'remove_mono_poly_listener( (WavetableDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;mono_poly&quot;. C++ signature :  void remove_mono_poly_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'remove_mono_poly_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2163, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.remove_name_listener()', 'description': 'remove_name_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;name&quot;. C++ signature :  void remove_name_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'remove_name_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2164, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.remove_oscillator_1_effect_mode_listener()', 'description': 'remove_oscillator_1_effect_mode_listener( (WavetableDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;oscillator_1_effect_mode&quot;. C++ signature :  void remove_oscillator_1_effect_mode_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'remove_oscillator_1_effect_mode_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2165, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.remove_oscillator_1_wavetable_category_listener()', 'description': 'remove_oscillator_1_wavetable_category_listener( (WavetableDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;oscillator_1_wavetable_category&quot;. C++ signature :  void remove_oscillator_1_wavetable_category_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'remove_oscillator_1_wavetable_category_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2166, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.remove_oscillator_1_wavetable_index_listener()', 'description': 'remove_oscillator_1_wavetable_index_listener( (WavetableDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;oscillator_1_wavetable_index&quot;. C++ signature :  void remove_oscillator_1_wavetable_index_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'remove_oscillator_1_wavetable_index_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2167, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.remove_oscillator_1_wavetables_listener()', 'description': 'remove_oscillator_1_wavetables_listener( (WavetableDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;oscillator_1_wavetables&quot;. C++ signature :  void remove_oscillator_1_wavetables_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'remove_oscillator_1_wavetables_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2168, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.remove_oscillator_2_effect_mode_listener()', 'description': 'remove_oscillator_2_effect_mode_listener( (WavetableDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;oscillator_2_effect_mode&quot;. C++ signature :  void remove_oscillator_2_effect_mode_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'remove_oscillator_2_effect_mode_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2169, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.remove_oscillator_2_wavetable_category_listener()', 'description': 'remove_oscillator_2_wavetable_category_listener( (WavetableDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;oscillator_2_wavetable_category&quot;. C++ signature :  void remove_oscillator_2_wavetable_category_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'remove_oscillator_2_wavetable_category_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2170, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.remove_oscillator_2_wavetable_index_listener()', 'description': 'remove_oscillator_2_wavetable_index_listener( (WavetableDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;oscillator_2_wavetable_index&quot;. C++ signature :  void remove_oscillator_2_wavetable_index_listener(TWavetableDevicePyHandle,boost::python::api::object)remove_oscillator_2_wavetable_index_listener( (WavetableDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;oscillator_2_wavetable_index&quot;. C++ signature :  void remove_oscillator_2_wavetable_index_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'remove_oscillator_2_wavetable_index_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2171, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.remove_oscillator_2_wavetables_listener()', 'description': 'remove_oscillator_2_wavetables_listener( (WavetableDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;oscillator_2_wavetables&quot;. C++ signature :  void remove_oscillator_2_wavetables_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'remove_oscillator_2_wavetables_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2172, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.remove_parameters_listener()', 'description': 'remove_parameters_listener( (Device)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;parameters&quot;. C++ signature :  void remove_parameters_listener(TPyHandle<ADevice>,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'remove_parameters_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2173, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.remove_poly_voices_listener()', 'description': 'remove_poly_voices_listener( (WavetableDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;poly_voices&quot;. C++ signature :  void remove_poly_voices_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'remove_poly_voices_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2174, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.remove_unison_mode_listener()', 'description': 'remove_unison_mode_listener( (WavetableDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;unison_mode&quot;. C++ signature :  void remove_unison_mode_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'remove_unison_mode_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2175, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.remove_unison_voice_count_listener()', 'description': 'remove_unison_voice_count_listener( (WavetableDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;unison_voice_count&quot;. C++ signature :  void remove_unison_voice_count_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'remove_unison_voice_count_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2176, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.remove_visible_modulation_target_names_listener()', 'description': 'remove_visible_modulation_target_names_listener( (WavetableDevice)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;visible_modulation_target_names&quot;. C++ signature :  void remove_visible_modulation_target_names_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'remove_visible_modulation_target_names_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2177, 'tag': 'Method', 'name': 'Live.WavetableDevice.WavetableDevice.set_modulation_value()', 'description': 'set_modulation_value( (WavetableDevice)self, (int)target_index, (int)source, (float)value) -> None : Set the value of a modulation amount for the given target-source connection. C++ signature :  void set_modulation_value(TWavetableDevicePyHandle,int,int,float)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'set_modulation_value()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'Method'}, {'ref': 2178, 'tag': 'Method', 'name': 'Live.WavetableDevice.WavetableDevice.store_chosen_bank()', 'description': 'store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -> None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle<ADevice>,int,int)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'store_chosen_bank()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'Method'}, {'ref': 2179, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.unison_mode_has_listener()', 'description': 'unison_mode_has_listener( (WavetableDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;unison_mode&quot;. C++ signature :  bool unison_mode_has_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'unison_mode_has_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2180, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.unison_voice_count_has_listener()', 'description': 'unison_voice_count_has_listener( (WavetableDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;unison_voice_count&quot;. C++ signature :  bool unison_voice_count_has_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'unison_voice_count_has_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2181, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.visible_modulation_target_names_has_listener()', 'description': 'visible_modulation_target_names_has_listener( (WavetableDevice)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;visible_modulation_target_names&quot;. C++ signature :  bool visible_modulation_target_names_has_listener(TWavetableDevicePyHandle,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'visible_modulation_target_names_has_listener()'], 'hirachy': 3, 'ref_parent': 2095, 'children': [], 'group': 'listener Method'}, {'ref': 2182, 'tag': 'Class', 'name': 'Live.WavetableDevice.WavetableDevice.View', 'description': 'Representing the view aspects of a Wavetable device.', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'View'], 'hirachy': 3, 'ref_parent': 2095, 'children': [2183, 2184, 2185, 2186, 2187, 2188], 'group': None}, {'ref': 2183, 'tag': 'Property', 'name': 'Live.WavetableDevice.WavetableDevice.View._live_ptr', 'description': None, 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'View', '_live_ptr'], 'hirachy': 4, 'ref_parent': 2182, 'children': [], 'group': 'Property'}, {'ref': 2184, 'tag': 'Property', 'name': 'Live.WavetableDevice.WavetableDevice.View.canonical_parent', 'description': 'Get the canonical parent of the View.', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'View', 'canonical_parent'], 'hirachy': 4, 'ref_parent': 2182, 'children': [], 'group': 'Property'}, {'ref': 2185, 'tag': 'Property', 'name': 'Live.WavetableDevice.WavetableDevice.View.is_collapsed', 'description': 'Get/Set/Listen if the device is shown collapsed in the device chain.', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'View', 'is_collapsed'], 'hirachy': 4, 'ref_parent': 2182, 'children': [], 'group': 'Property'}, {'ref': 2186, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.View.add_is_collapsed_listener()', 'description': 'add_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Add a listener function or method, which will be called as soon as the property &quot;is_collapsed&quot; has changed. C++ signature :  void add_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'View', 'add_is_collapsed_listener()'], 'hirachy': 4, 'ref_parent': 2182, 'children': [], 'group': 'listener Method'}, {'ref': 2187, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.View.is_collapsed_has_listener()', 'description': 'is_collapsed_has_listener( (View)arg1, (object)arg2) -> bool : Returns true, if the given listener function or method is connected to the property &quot;is_collapsed&quot;. C++ signature :  bool is_collapsed_has_listener(TPyViewData<ADevice>,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'View', 'is_collapsed_has_listener()'], 'hirachy': 4, 'ref_parent': 2182, 'children': [], 'group': 'listener Method'}, {'ref': 2188, 'tag': 'listener Method', 'name': 'Live.WavetableDevice.WavetableDevice.View.remove_is_collapsed_listener()', 'description': 'remove_is_collapsed_listener( (View)arg1, (object)arg2) -> None : Remove a previously set listener function or method from property &quot;is_collapsed&quot;. C++ signature :  void remove_is_collapsed_listener(TPyViewData<ADevice>,boost::python::api::object)', 'path': ['Live', 'WavetableDevice', 'WavetableDevice', 'View', 'remove_is_collapsed_listener()'], 'hirachy': 4, 'ref_parent': 2182, 'children': [], 'group': 'listener Method'}]